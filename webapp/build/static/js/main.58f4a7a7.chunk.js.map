{"version":3,"sources":["components/models/urls.ts","components/models/nas.ts","components/models/HomeContext.tsx","components/pages/home/components/files/MoveDialog.tsx","components/pages/home/components/files/RenameDialog.tsx","components/pages/home/components/folders/ListFolderPanel.tsx","components/pages/home/components/files/UploadDialog.tsx","components/pages/home/JSONSchema/model/Schema.ts","components/pages/home/JSONSchema/model/Action.ts","components/pages/home/JSONSchema/model/base.ts","components/pages/home/JSONSchema/model/Icon.ts","components/pages/home/JSONSchema/Components/JSONSchemaTextField.tsx","components/pages/home/JSONSchema/Components/JSONSchemaSelectField.tsx","components/pages/home/JSONSchema/Components/JSONSchemaForignField.tsx","components/pages/home/JSONSchema/JSONSchema.tsx","components/pages/home/components/folders/NewFolderDialog.tsx","components/pages/home/components/documents/Editor.tsx","components/pages/home/components/others/NasMenu.tsx","components/models/SystemContext.tsx","components/pages/home/components/others/ComputerStatus.tsx","components/pages/home/components/files/FilesActions.tsx","components/pages/home/components/files/ListFilesPanel.tsx","components/pages/home/components/files/UploadFilesSideBar.tsx","components/pages/home/HomePage.tsx","components/pages/systemInfo/PercentageChart.tsx","components/pages/systemInfo/SystemInfoPage.tsx","serviceWorker.js","index.js","App.tsx"],"names":["url","Nas","constructor","menus","currentFolder","searchedFiles","errorMsg","moveFileTo","fileId","dest","a","Axios","patch","getContent","id","moveFolderTo","folderId","u","rename","newName","search","keyword","get","response","data","parents","undefined","uploadFile","files","onUpload","index","f","size","formData","FormData","append","toString","post","headers","onUploadProgress","progress","p","Math","round","loaded","total","res","push","total_size","alert","deleteFile","window","confirm","delete","deleteFolder","createNewFolder","parent","folders","renameFolder","findIndex","getDocument","Promise","resolve","content","JSON","parse","createNewDocument","name","stringify","ops","documents","updateDocument","deleteDocument","console","log","reject","this","HomePageProvider","Component","props","super","selectDocument","document","setState","selectedDocument","updateUploadInfo","uploadInfo","setUploadInfo","file","uploadFiles","fetch","isLoading","nas","state","update","componentDidUpdate","oldProps","match","params","componentWillMount","render","HomePageContext","Provider","value","children","context","info","React","createContext","MoveDialog","useContext","useState","selection","setSelection","Dialog","open","fullWidth","DialogTitle","DialogContent","FormControl","InputLabel","Select","labelId","onChange","e","target","MenuItem","filter","type","selectedFile","map","DialogActions","Button","onClick","onClose","RenameDialog","ext","path","filename","getDefaultName","setName","TextField","ListPanel","showMoveToDialog","setShowMoveToDialog","selectedFolder","setSelectedFolder","anchorEl","setAnchorEl","handleClick","event","currentTarget","handleClose","style","overflow","overflowX","height","color","List","Grid","centered","Row","verticalAlign","Column","width","to","IconButton","Message","error","MessageHeader","i","ListItem","button","key","ListItemAvatar","Icon","ListItemText","location","href","primary","secondary","moment","modified_at","format","ListItemSecondaryAction","Menu","keepMounted","Boolean","UploadDialog","Modal","Header","Content","multiple","l","length","marginTop","Segment","Progress","percent","attached","active","currentName","currentIndex","Actions","basic","setOpen","disabled","loading","inverted","current","uploadedDataSize","totalDataSize","setTimeout","Widget","ActionTypes","ActionDone","SchemaList","schemas","schemaList","forEach","s","extra","default","merge","values","widget","select","choice","choices","find","c","foreignkey","onSubmit","maps","readonly","tomanyTable","BaseExtra","schemaName","FieldAction","t","d","n","actionTypes","actionDone","action","FieldIcon","iconData","icon","JSONSchemaTextField","schema","onSaved","Form","Input","data-testid","control","label","required","pointing","hasError","defaultValue","help","Label","JSONSchemaSelectField","options","text","placeholder","JSONSchemaForignField","list","setList","editSchema","setSchema","selected","setSelect","setLoading","openDialogIndex","getURL","fetchList","related_model","replace","axios","fetchSchema","request","method","fields","create","columns","Dropdown","labeled","fluid","result","tag","JSONSchema","v","number","parseInt","submitSuccess","componentDidMount","icons","actions","newSchema","renderField","Container","Field","NewFolderDialog","Editor","editor","setEditor","isChanged","ref","instance","getEditor","getContents","NasMenus","openNewFolder","setOpenNewFolder","openEditor","setOpenEditor","vertical","SystemProvider","fetchSystemInfo","systemInfo","SystemContext","ComputerStatus","disk","used","toFixed","FilesActions","setIsLoading","shadow","setShadow","margin","Autocomplete","getOptionLabel","option","paddingTop","paddingBottom","r","renderInput","InputProps","endAdornment","Fragment","CircularProgress","padding","onMouseOver","onMouseOut","cursor","Card","raised","Player","require","imageExt","videoExt","ListFilesPanel","setselectedFile","showRenameDialog","setShowRenameDialog","imageSrc","setImageSrc","videoSrc","setVideoSrc","isImage","filepath","includes","extname","isVideo","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","hover","src","cover","basename","link","createElement","body","appendChild","click","removeChild","Image","poster","UploadFilesSideBar","Typography","component","Rating","cpu","readOnly","memory","ListItemIcon","LinearProgress","variant","marginBottom","HomePage","show","setShow","Drawer","position","Hidden","smDown","implementation","computer","backgroundColor","mobile","tablet","mdUp","PercentageChart","title","color2","minHeight","minWidth","dataKey","fill","isAnimationActive","SystemInfoPage","temperature","humidity","pressure","hostname","ReactDOM","catalogs","setShowMenu","exact","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.58f4a7a7.chunk.js","sourcesContent":["export const systemURL = \"/system/\"\nexport const url = \"/api/folder/\"\nexport const fileURL = \"/api/file/\"\nexport const documentURL = \"/api/document/\"\nexport const searchFileURL = \"/api/file?search=\"\n// download folder\nexport const downloadURL = \"/api/download/\"","import Axios from \"axios\"\nimport { Folder, Parent, File as NasFile, Document as NasDocument } from './Folder';\nimport { number } from \"@lingui/core\";\nimport { OutputData } from \"@editorjs/editorjs\";\nimport { systemURL, url, documentURL, fileURL, searchFileURL } from \"./urls\"\nimport { DeltaStatic } from \"quill\";\nimport { Sidebar } from 'semantic-ui-react';\n\n\n\ntype UploadProgressCallback = (index: number, progress: number) => void\n\n\nexport class Nas {\n    menus: Parent[]\n    currentFolder?: Folder\n    searchedFiles: NasFile[];\n    errorMsg?: string\n\n\n    constructor() {\n        this.menus = []\n        this.searchedFiles = [];\n    }\n\n    moveFileTo = async (fileId: number, dest: number) => {\n        try {\n            if (this.currentFolder) {\n                let url = `${fileURL}${fileId}/`\n                let response = await Axios.patch(url, { \"parent\": dest })\n                await this.getContent(this.currentFolder.id)\n            }\n\n        } catch (err) {\n            this.errorMsg = err;\n        }\n    }\n\n    moveFolderTo = async (folderId: number, dest: number) => {\n        try {\n            if (this.currentFolder) {\n                let u = `${url}${folderId}/`\n                let response = await Axios.patch(u, { \"parent\": dest })\n                await this.getContent(this.currentFolder.id)\n            }\n\n        } catch (err) {\n            this.errorMsg = err;\n        }\n    }\n\n    /**\n     * Rename file\n     */\n    rename = async (fileId: number, newName: string) => {\n        try {\n            if (this.currentFolder) {\n                let url = `${fileURL}${fileId}/`\n                let response = await Axios.patch(url, { \"filename\": newName })\n                await this.getContent(this.currentFolder.id)\n            }\n\n        } catch (err) {\n            this.errorMsg = err;\n        }\n    }\n\n    search = async (keyword: String) => {\n        try {\n            let url = `${searchFileURL}${keyword}`\n            let response = await Axios.get<NasFile[]>(url);\n            this.searchedFiles = response.data;\n        } catch (err) {\n            this.errorMsg = err\n        }\n    }\n\n    getContent = async (id?: number | string) => {\n        try {\n            let u = id ? `${url}${id}/` : url\n            let response = await Axios.get<Folder>(u)\n            const { data } = response\n            this.menus = data.parents\n            this.currentFolder = data\n            this.errorMsg = undefined\n        } catch (err) {\n            this.errorMsg = err\n            this.currentFolder = undefined\n        }\n    }\n\n    /**\n     * Upload file to server.\n     * If upload fail, will show alert dialog\n     * @param files: List of files\n     * @param onUpload: callback function\n     */\n    uploadFile = async (files: File[], onUpload: (index: number, progress: number, current: number, total: number) => void) => {\n        try {\n\n            let index = 0;\n            for (let f of files) {\n                if (this.currentFolder) {\n                    onUpload(index, 0, 0, f.size);\n                    let formData = new FormData()\n                    formData.append(\"file\", f)\n                    this.currentFolder.id && formData.append(\"parent\", this.currentFolder.id.toString())\n                    let res = await Axios.post<NasFile>(fileURL, formData,\n                        {\n                            headers: { 'Content-Type': 'multipart/form-data' },\n                            // eslint-disable-next-line no-loop-func\n                            onUploadProgress: (progress) => {\n                                let p = Math.round((progress.loaded * 100) / progress.total);\n                                onUpload(index, p, f.size * progress.loaded, progress.total)\n\n                            }\n\n                        })\n                    this.currentFolder.files.push(res.data)\n                    this.currentFolder.total_size += res.data.size\n\n\n                }\n                index += 1\n            }\n            onUpload(index, 100, 0, 0);\n        } catch (err) {\n            alert(\"Upload Failed: \" + err.toString())\n        }\n    }\n\n    deleteFile = async (id: number) => {\n        try {\n            let confirm = window.confirm(\"Are you sure you want to delete this file?\")\n            if (confirm && this.currentFolder) {\n                let res = await Axios.delete<Nas>(`${fileURL}${id}/`)\n                await this.getContent(this.currentFolder.id)\n            }\n        } catch (err) {\n            alert(\"Upload Failed: \" + err.toString())\n        }\n    }\n\n    deleteFolder = async (id: number) => {\n        try {\n            let confirm = window.confirm(\"Are you sure you want to delete this folder?\")\n            if (confirm && this.currentFolder) {\n                let res = await Axios.delete<Nas>(`${url}${id}/`)\n                await this.getContent(this.currentFolder.id)\n            }\n        } catch (err) {\n            alert(\"Upload Failed: \" + err.toString())\n        }\n    }\n\n    createNewFolder = async (data: any) => {\n        if (this.currentFolder) {\n            let res = await Axios.post<Folder>(url, { ...data, parent: this.currentFolder.id ? this.currentFolder.id : null })\n            this.currentFolder.folders.push(res.data)\n        } else {\n            alert(\"Create new folder error: empty parent folder\")\n        }\n    }\n\n    renameFolder = async (id: number, newName: string) => {\n        if (this.currentFolder) {\n            let res = await Axios.patch<Folder>(`${url}${id}/`, { \"name\": newName })\n            let index = this.currentFolder.folders.findIndex((f) => f.id === id)\n            if (index > -1) {\n                this.currentFolder.folders[index] = res.data\n            }\n        } else {\n            alert(\"Rename new folder error: empty parent folder\")\n        }\n    }\n\n    /**\n     * Get document from server.\n     * We need this function because we are getting abstract document object from server\n     * at begining(Which doesn't include content field).\n     * \n     * We will Call this function when user want to edit the file\n     */\n    getDocument = async (id: string | number) => {\n\n        let res = await Axios.get<NasDocument>(`${documentURL}${id}/`)\n        /// Need to parse the content into js object\n        return Promise.resolve({ ...res.data, content: JSON.parse(res.data.content) })\n\n    }\n\n    /**\n     * Create new document\n     * @param name: Name of the document\n     * @param data: EditorJS object\n     */\n    createNewDocument = async (name: string, data: DeltaStatic) => {\n        let res = await Axios.\n            post<NasDocument>(documentURL,\n                {\n                    name: name, parent: this.currentFolder && this.currentFolder.id ? this.currentFolder.id : null,\n                    content: JSON.stringify(data.ops)\n                })\n        this.currentFolder && this.currentFolder.documents.push(res.data)\n\n    }\n\n    /**\n     * Update Document\n     * @param id: document's id\n     * @param data: EditorJS object\n     */\n    updateDocument = async (id: number, name: string, data: DeltaStatic) => {\n\n        let res = await Axios.patch<NasDocument>(`${documentURL}${id}/`, { name, content: JSON.stringify(data.ops) })\n        if (this.currentFolder) {\n            let index = this.currentFolder.documents.findIndex((f) => f.id === id)\n            if (index > -1) {\n                this.currentFolder.documents[index] = res.data\n            }\n\n        }\n\n    }\n\n    /**\n     * Delete document by id\n     * \n     * @param id: document's id\n     */\n    deleteDocument = async (id: number) => {\n        if (this.currentFolder) {\n            console.log(\"delte document\")\n            let res = await Axios.delete<NasDocument>(`${documentURL}${id}/`)\n            await this.getContent(this.currentFolder.id)\n            return Promise.resolve(res.data)\n        } else {\n            alert(\"Create new folder error: empty parent folder\")\n            return Promise.reject()\n        }\n    }\n\n}\n","import React, { Component } from \"react\";\nimport { Nas } from \"./nas\";\nimport { RouteComponentProps } from \"react-router\";\nimport { Folder, Document as NasDocument, File as NasFile } from \"./Folder\";\nimport { UploadInfo } from \"../pages/home/components/files/UploadDialog\";\n\ninterface RouterProps {\n  id: string;\n}\n\ninterface HomePageContext {\n  nas: Nas;\n  selectedDocument?: NasDocument;\n  uploadInfo?: UploadInfo;\n  updateUploadInfo(info?: UploadInfo): void;\n  uploadFiles?: File[];\n  setUploadInfo(files?: File[]): void;\n  update(): void;\n  selectDocument(doc?: NasDocument): void;\n  isLoading: boolean;\n}\n\ninterface HomePageProps extends RouteComponentProps<RouterProps> {}\n\nexport class HomePageProvider extends Component<\n  HomePageProps,\n  HomePageContext\n> {\n  constructor(props: HomePageProps) {\n    super(props);\n    this.state = {\n      nas: new Nas(),\n      selectDocument: this.selectDocument,\n      updateUploadInfo: this.updateUploadInfo,\n      setUploadInfo: this.setUploadInfo,\n      update: this.update,\n      isLoading: false\n    };\n  }\n\n  selectDocument = (document?: NasDocument) => {\n    this.setState({ selectedDocument: document });\n  };\n\n  updateUploadInfo = (uploadInfo?: UploadInfo) => {\n    this.setState({ uploadInfo });\n  };\n\n  setUploadInfo = (file: File[]) => {\n    this.setState({ uploadFiles: file });\n  };\n\n  async componentDidUpdate(oldProps: HomePageProps) {\n    if (this.props.match.params.id !== oldProps.match.params.id) {\n      let id = this.props.match.params.id;\n      await this.fetch(id);\n    }\n  }\n\n  async componentWillMount() {\n    let id = this.props.match.params.id;\n    await this.fetch(id);\n  }\n\n  fetch = async (id: any) => {\n    this.setState({ isLoading: true });\n    const { nas } = this.state;\n    await nas.getContent(id);\n    this.setState({ nas, isLoading: false });\n  };\n\n  update = () => {\n    this.setState({\n      nas: this.state.nas\n    });\n  };\n\n  render() {\n    return (\n      <HomePageContext.Provider value={this.state}>\n        {this.props.children}\n      </HomePageContext.Provider>\n    );\n  }\n}\n\nconst context: HomePageContext = {\n  nas: new Nas(),\n  update: () => {},\n  selectDocument: () => {},\n  updateUploadInfo: (info: UploadInfo) => {},\n  setUploadInfo: (files: File[]) => {},\n  isLoading: false\n};\n\nexport const HomePageContext = React.createContext(context);\n","import React, { useContext, useState } from \"react\";\nimport {\n  Folder,\n  File as NasFile,\n  Document as NasDocument\n} from \"../../../../models/Folder\";\nimport { HomePageContext } from \"../../../../models/HomeContext\";\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  TextField,\n  FormControl,\n  Select,\n  MenuItem,\n  InputLabel,\n  Button,\n  DialogActions\n} from \"@material-ui/core\";\n\ninterface Props {\n  open: boolean;\n  onClose(): void;\n  type: \"file\" | \"folder\" | \"document\";\n  selectedFile: NasFile | NasDocument | Folder;\n}\n\nexport default function MoveDialog(props: Props) {\n  const { nas } = useContext(HomePageContext);\n  const [selection, setSelection] = useState<number>();\n\n  return (\n    <Dialog open={props.open} fullWidth>\n      <DialogTitle>Move File To</DialogTitle>\n      <DialogContent>\n        <FormControl fullWidth>\n          <InputLabel>Destnation</InputLabel>\n          <Select\n            labelId=\"demo-simple-select-label\"\n            id=\"demo-simple-select\"\n            value={selection}\n            onChange={e => {\n              setSelection(e.target.value as number);\n            }}\n            fullWidth\n          >\n            {nas.currentFolder && (\n              <MenuItem value={nas.currentFolder.parent}>\n                Parent Folder\n              </MenuItem>\n            )}\n            {nas.currentFolder &&\n              nas.currentFolder.folders\n                .filter(f =>\n                  props.type === \"folder\"\n                    ? props.selectedFile.id !== f.id\n                    : true\n                )\n                .map(f => <MenuItem value={f.id}>{f.name}</MenuItem>)}\n          </Select>\n        </FormControl>\n      </DialogContent>\n      <DialogActions>\n        <Button\n          onClick={() => {\n            setSelection(undefined);\n            props.onClose();\n          }}\n        >\n          cancel\n        </Button>\n        <Button\n          onClick={async () => {\n            if (selection) {\n              switch (props.type) {\n                case \"file\":\n                  await nas.moveFileTo(props.selectedFile.id, selection);\n                  break;\n                case \"folder\":\n                  await nas.moveFolderTo(props.selectedFile.id, selection);\n              }\n            }\n            setSelection(undefined);\n            props.onClose();\n          }}\n        >\n          ok\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n","import React, { useContext, useState } from \"react\";\nimport {\n  Folder,\n  File as NasFile,\n  Document as NasDocument\n} from \"../../../../models/Folder\";\nimport { HomePageContext } from \"../../../../models/HomeContext\";\nimport * as path from \"path\";\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  TextField,\n  FormControl,\n  Select,\n  MenuItem,\n  InputLabel,\n  Button,\n  DialogActions\n} from \"@material-ui/core\";\n\ninterface Props {\n  open: boolean;\n  onClose(): void;\n  type: \"file\" | \"folder\" | \"document\";\n  selectedFile: NasFile | NasDocument | Folder;\n}\n\nexport default function RenameDialog(props: Props) {\n  const getDefaultName = () => {\n    switch (props.type) {\n      case \"file\":\n        let ext = path.extname((props.selectedFile as NasFile).filename);\n        return path.basename((props.selectedFile as NasFile).filename, ext);\n\n      case \"folder\":\n        return (props.selectedFile as Folder).name;\n\n      default:\n        return (props.selectedFile as NasDocument).name;\n    }\n  };\n\n  const { nas } = useContext(HomePageContext);\n\n  const [name, setName] = useState<string>(getDefaultName());\n\n  return (\n    <Dialog open={props.open} fullWidth>\n      <DialogTitle>Rename</DialogTitle>\n      <DialogContent>\n        <TextField\n          fullWidth\n          value={name}\n          onChange={e => {\n            setName(e.target.value);\n          }}\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button\n          onClick={() => {\n            props.onClose();\n            setName(\"\");\n          }}\n        >\n          cancel\n        </Button>\n        <Button\n          onClick={async () => {\n            if (name) {\n              switch (props.type) {\n                case \"file\":\n                  let ext = path.extname(\n                    (props.selectedFile as NasFile).filename\n                  );\n                  await nas.rename(props.selectedFile.id, `${name}${ext}`);\n                  break;\n                case \"folder\":\n                  await nas.renameFolder(props.selectedFile.id, name);\n              }\n            }\n            props.onClose();\n          }}\n        >\n          ok\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n","import React, { useContext, useState } from \"react\";\nimport {\n  Segment,\n  MessageHeader,\n  Message,\n  Icon,\n  Modal,\n  Image,\n  SemanticICONS,\n  Divider,\n  Label,\n  Button,\n  Popup,\n  Grid\n} from \"semantic-ui-react\";\nimport { createStyles, Theme, makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nimport ArrowBackIosIcon from \"@material-ui/icons/ArrowBackIos\";\nimport {\n  ListItemSecondaryAction,\n  IconButton,\n  Menu,\n  MenuItem\n} from \"@material-ui/core\";\nimport { HomePageContext } from \"../../../../models/HomeContext\";\nimport moment from \"moment\";\nimport path from \"path\";\nimport \"video-react/dist/video-react.css\";\nimport { Folder, Document as NasDocument } from \"../../../../models/Folder\";\n\nimport { NavLink } from \"react-router-dom\";\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\nimport MoveDialog from \"../files/MoveDialog\";\nimport RenameDialog from \"../files/RenameDialog\";\n\nexport default function ListPanel() {\n  const { nas, isLoading, update } = useContext(HomePageContext);\n  const [showMoveToDialog, setShowMoveToDialog] = useState(false);\n  const [selectedFolder, setSelectedFolder] = useState<Folder | undefined>(\n    undefined\n  );\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <div\n      style={{\n        overflow: \"auto\",\n        overflowX: \"hidden\",\n        height: \"100%\",\n        color: \"blue\"\n      }}\n    >\n      <List>\n        <Grid centered>\n          <Grid.Row verticalAlign=\"middle\">\n            <Grid.Column width={5}>\n              {nas.currentFolder && nas.currentFolder.parent ? (\n                <NavLink to={`/home/${nas.currentFolder.parent}`}>\n                  <IconButton>\n                    <ArrowBackIosIcon />\n                  </IconButton>\n                </NavLink>\n              ) : (\n                <IconButton>\n                  <NavLink to={`/home`}>\n                    <ArrowBackIosIcon />\n                  </NavLink>{\" \"}\n                </IconButton>\n              )}\n            </Grid.Column>\n            <Grid.Column width={11}>\n              <div style={{ color: \"black\" }}>\n                {nas.currentFolder && nas.currentFolder.name}\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n        {nas.errorMsg && (\n          <Message error>\n            <MessageHeader>Network Error</MessageHeader>\n            <div>{nas.errorMsg.toString()}</div>\n          </Message>\n        )}\n        {/*Render Folders*/}\n        {nas.currentFolder &&\n          nas.currentFolder.folders.map((f, i) => (\n            <ListItem button key={`folder-${f.id}`}>\n              <ListItemAvatar>\n                <Icon name=\"folder\" size=\"large\" color=\"grey\"></Icon>\n              </ListItemAvatar>\n              <ListItemText\n                onClick={() => {\n                  window.location.href = `#/home/${f.id}`;\n                }}\n                style={{ color: \"black\" }}\n                primary={f.name}\n                secondary={moment(f.modified_at).format(\"MMM DD, YYYY\")}\n              />\n              {/** folder menu button */}\n              <ListItemSecondaryAction>\n                <IconButton onClick={handleClick}>\n                  <MoreHorizIcon />\n                </IconButton>\n              </ListItemSecondaryAction>\n              <Menu\n                id=\"simple-menu\"\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={handleClose}\n              >\n                <MenuItem\n                  onClick={() => {\n                    setSelectedFolder(f);\n                    handleClose();\n                  }}\n                >\n                  Rename\n                </MenuItem>\n                <MenuItem\n                  onClick={async () => {\n                    await nas.deleteFolder(f.id);\n                    handleClose();\n                    update();\n                  }}\n                >\n                  Delete\n                </MenuItem>\n                <MenuItem\n                  onClick={() => {\n                    handleClose();\n                    setShowMoveToDialog(true);\n                    setSelectedFolder(f);\n                  }}\n                >\n                  Move To\n                </MenuItem>\n              </Menu>\n              {/** end folder menu button */}\n            </ListItem>\n          ))}\n        {/*End Render Folders*/}\n      </List>\n\n      {selectedFolder && !showMoveToDialog && (\n        <RenameDialog\n          type=\"folder\"\n          selectedFile={selectedFolder}\n          open={selectedFolder !== undefined}\n          onClose={() => setSelectedFolder(undefined)}\n        />\n      )}\n\n      {selectedFolder && (\n        <MoveDialog\n          type=\"folder\"\n          selectedFile={selectedFolder}\n          open={showMoveToDialog}\n          onClose={() => {\n            setShowMoveToDialog(false);\n            setSelectedFolder(undefined);\n          }}\n        />\n      )}\n    </div>\n  );\n}\n","import React, { useState, useContext } from \"react\";\nimport {\n  Modal,\n  Segment,\n  Progress,\n  Grid,\n  Button,\n  Icon\n} from \"semantic-ui-react\";\nimport { HomePageContext } from \"../../../../models/HomeContext\";\n\ninterface Props {\n  open: boolean;\n  setOpen(open: boolean): void;\n}\n\nexport interface UploadInfo {\n  currentName: string;\n  progress: number;\n  total: number;\n  currentIndex: number;\n  uploadedDataSize: number;\n  totalDataSize: number;\n}\n\nexport default function UploadDialog(props: Props) {\n  const {\n    nas,\n    update,\n    uploadInfo,\n    setUploadInfo,\n    uploadFiles,\n    updateUploadInfo\n  } = useContext(HomePageContext);\n\n  function calculateSize(size: number): string {\n    if (size < 1024 * 1024) {\n      return `${size / 1024} kb`;\n    } else if (size >= 1024 * 1024 && size < 1024 * 1024 * 1024) {\n      return `${size / 1024 / 1024} mb`;\n    } else if (size >= 1024 * 1024 * 1024 && size < 1024 * 1024 * 1024 * 1024) {\n      return `${size / 1024 / 1024 / 1024} gb`;\n    } else if (\n      size >= 1024 * 1024 * 1024 * 1024 &&\n      size < 1024 * 1024 * 1024 * 1024 * 1024\n    ) {\n      return `${size / 1024 / 1024 / 1024 / 1024} tb`;\n    }\n\n    return `${size} bytes`;\n  }\n\n  return (\n    <Modal open={props.open}>\n      <Modal.Header>Select Files</Modal.Header>\n      <Modal.Content>\n        <Grid.Row>\n          <input\n            type=\"file\"\n            multiple\n            name=\"Upload file\"\n            onChange={e => {\n              let uploadFiles = e.target.files;\n              if (uploadFiles) {\n                let l: File[] = [];\n                for (var i = 0; i < uploadFiles.length; i++) {\n                  l.push(uploadFiles[i]);\n                }\n\n                setUploadInfo(l);\n              }\n            }}\n          ></input>\n        </Grid.Row>\n        {uploadInfo && (\n          <Grid.Row style={{ marginTop: 20 }}>\n            <Segment>\n              <Progress\n                percent={uploadInfo.progress}\n                attached=\"top\"\n                color=\"green\"\n                active\n              />\n              {uploadInfo.currentName} {uploadInfo.currentIndex}/\n              {uploadInfo.total} --- {uploadInfo.progress} %\n              <Progress\n                percent={(uploadInfo.currentIndex / uploadInfo.total) * 100}\n                attached=\"bottom\"\n                color=\"blue\"\n                active\n              />\n            </Segment>\n          </Grid.Row>\n        )}\n      </Modal.Content>\n      <Modal.Actions>\n        <Button basic color=\"red\" onClick={() => props.setOpen(false)}>\n          <Icon name=\"remove\" /> {uploadInfo ? \"Minimize\" : \"Close\"}\n        </Button>\n        <Button\n          disabled={uploadFiles === undefined}\n          color=\"green\"\n          loading={uploadInfo !== undefined}\n          inverted\n          onClick={async () => {\n            if (uploadFiles) {\n              await nas.uploadFile(\n                uploadFiles,\n                (\n                  index: number,\n                  progress: number,\n                  current: number,\n                  total: number\n                ) => {\n                  updateUploadInfo({\n                    total: uploadFiles.length,\n                    currentIndex: index,\n                    currentName: uploadFiles[index]\n                      ? uploadFiles[index].name\n                      : \"Finished\",\n                    progress: progress,\n                    uploadedDataSize: current,\n                    totalDataSize: total\n                  });\n                }\n              );\n              update();\n              setTimeout(() => {\n                props.setOpen(false);\n                setUploadInfo(undefined);\n                updateUploadInfo(undefined);\n              }, 300);\n            }\n          }}\n        >\n          <Icon name=\"checkmark\" /> Upload\n        </Button>\n      </Modal.Actions>\n    </Modal>\n  );\n}\n","import { FieldIcon } from \"./Icon\";\nimport { FieldAction } from \"./Action\";\nimport { string } from \"prop-types\";\n\n\ninterface Extra {\n    default?: any;\n    help?: string;\n    related_model?: string;\n    choices?: Choice[]\n\n}\n\nexport enum Widget {\n    text = \"text\",\n    number = \"number\",\n    datetime = \"datetime\",\n    foreignkey = \"foreignkey\",\n    unknown = \"unknown\",\n    select = \"select\",\n    tomanyTable = \"tomany-table\"\n}\n\ninterface Validation {\n    length: Length\n\n}\n\nexport interface Choice {\n    label: string;\n    value: any;\n}\n\ninterface Length {\n    maximum?: number;\n    minimum?: number;\n}\n\nexport interface Schema {\n    label: string;\n    readonly: boolean;\n    /// Could be null\n    extra?: Extra;\n    /// Map's key\n    name: string;\n    /// If widget type is not defined in the enum, then\n    /// return widgetType.unknown\n    widget: Widget | string;\n    required: boolean;\n    /// could be null\n    validations?: Validation;\n    /// this is value will be displayed at screen if set,\n    /// else null\n    value?: any;\n    /// Set this value only if the field includes selection\n    choice?: Choice;\n    /// icon for the field\n    /// this will be set through the params of JSONForm widget\n    icon?: FieldIcon;\n    /// action for the field\n    /// this will be set through the params of JSONForm widget\n    action?: FieldAction;\n\n}\n\n\n\nexport class SchemaList {\n\n    schemaList: Schema[];\n\n    constructor(schemas: Schema[]) {\n        schemas.forEach(s => {\n            if (s.extra && s.extra.default) {\n                s.value = s.extra.default\n            }\n        })\n        this.schemaList = schemas;\n    }\n\n    merge(values: { [key: string]: any }) {\n        this.schemaList = this.schemaList.map((s) => {\n            if (values[s.name]) {\n                let value = values[s.name];\n                if (s.widget == Widget.select) {\n                    let choice: Choice | undefined = s.extra\n                        && s.extra.choices\n                        && s.extra.choices.find((c) => c.value === value)\n                    s.choice = choice;\n                } else if (s.widget == Widget.foreignkey) {\n                    let choice: Choice = value;\n                    s.choice = choice;\n                    s.value = value.value;\n                } else {\n                    s.value = value;\n                }\n            }\n            return s;\n        });\n    }\n\n    onSubmit(): { [key: string]: any } {\n        console.log(this.schemaList)\n        let maps: { [key: string]: any } = {};\n        this.schemaList.filter(s => !s.readonly && s.widget !== Widget.tomanyTable).forEach((s) => maps[s.name] = s.value);\n        console.log(maps)\n        return maps;\n\n    }\n\n}\n","import { BaseExtra } from \"./base\";\nimport { Schema } from './Schema';\n\nexport enum ActionTypes {\n    image,\n    qrScan\n}\n\nexport enum ActionDone {\n    getInput,\n    getImage\n}\n\nexport class FieldAction extends BaseExtra<FieldAction>{\n\n    actionTypes: ActionTypes;\n    actionDone: ActionDone;\n    schemaName: string;\n\n    constructor(t: ActionTypes, d: ActionDone, n: string) {\n        super(n);\n        this.schemaName = n;\n        this.actionTypes = t;\n        this.actionDone = d;\n    }\n\n    static merge(schemas: Schema[], values: FieldAction[]): Schema[] {\n        return schemas.map((s) => {\n            values.forEach((f) => {\n                if (f.schemaName == s.name) {\n                    s.action = f;\n                }\n            })\n\n            return s;\n        })\n    }\n\n\n}","import { Schema } from \"./Schema\";\n\nexport abstract class BaseExtra<T> {\n\n    schemaName: string\n\n    constructor(name: string) {\n        this.schemaName = name;\n    }\n\n    /**\n     * Merge with schemas\n     * @param schemas shemas\n     * @param values values you want to merge\n     * @returns new schemas\n     */\n    merge(schemas: [], values: T[]): Schema[] {\n        return []\n    }\n}","import { BaseExtra } from './base';\nimport { Schema } from './Schema';\n\n\nexport class FieldIcon extends BaseExtra<FieldIcon> {\n    iconData: string;\n    schemaName: string;\n\n    constructor(i: string, n: string) {\n        super(n);\n        this.iconData = i;\n        this.schemaName = n;\n    }\n\n    static merge(schemas: Schema[], values: FieldIcon[]): Schema[] {\n        return schemas.map((s) => {\n            values.forEach((f) => {\n                if (f.schemaName == s.name) {\n                    s.icon = f;\n                }\n            })\n            return s;\n        })\n    }\n\n}","import React from \"react\";\nimport { Schema, Widget } from \"../model/Schema\";\nimport { Input, Form, Label } from \"semantic-ui-react\";\n\nexport interface FieldProps {\n  schema: Schema;\n  onSaved(value: any): void;\n}\n\nexport default function JSONSchemaTextField(props: FieldProps) {\n  const { schema, onSaved } = props;\n\n  function hasError() {\n    if (schema.required && schema.value === undefined) {\n      return { content: \"This field is required\", pointing: \"below\" };\n    }\n\n    return;\n  }\n\n  return (\n    <div>\n      <Form.Input\n        data-testid=\"input-field\"\n        control={Input}\n        label={schema.label}\n        error={hasError()}\n        onChange={(e, { value }) => {\n          onSaved(value);\n        }}\n        // defaultValue={\n        //   schema.value ? schema.value : schema.extra && schema.extra.default\n        // }\n        defaultValue={schema.value}\n      ></Form.Input>\n      {schema.extra && schema.extra.help && (\n        <Label color=\"blue\">{schema.extra.help}</Label>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Schema } from \"../model/Schema\";\nimport { Input, Form, Select } from \"semantic-ui-react\";\nimport { FieldProps } from \"./JSONSchemaTextField\";\n\nexport default function JSONSchemaSelectField(props: FieldProps) {\n  const { schema, onSaved } = props;\n\n  function hasError() {\n    if (schema.required && schema.value === undefined) {\n      return { content: \"This field is required\", pointing: \"below\" };\n    }\n\n    return;\n  }\n\n  const renderOptions = () => {\n    if (schema.extra && schema.extra.choices) {\n      return schema.extra.choices.map(c => {\n        return { text: c.label, value: c.value, key: c.label };\n      });\n    }\n    return [];\n  };\n\n  return (\n    <Form.Select\n      data-testid=\"select-field\"\n      control={Select}\n      label={schema.label}\n      options={renderOptions()}\n      value={schema.value}\n      onChange={(e, { value }) => onSaved(value as string)}\n      placeholder={\n        schema.value ? schema.value : schema.extra && schema.extra.default\n      }\n    />\n  );\n}\n","import React, { useState } from \"react\";\nimport { FieldProps } from \"./JSONSchemaTextField\";\nimport {\n  Form,\n  Dropdown,\n  Label,\n  Button,\n  Grid,\n  Modal,\n  Header\n} from \"semantic-ui-react\";\nimport axios from \"axios\";\nimport { Schema, Choice } from \"../model/Schema\";\nimport JSONSchema from \"../JSONSchema\";\nimport { Dialog, DialogContent, DialogTitle } from \"@material-ui/core\";\n\ninterface Props extends FieldProps {\n  url: string;\n  select(choice: Choice): void;\n}\n\nexport default function JSONSchemaForignField(props: Props) {\n  const { schema, onSaved, url } = props;\n  const [list, setList] = useState<any[]>();\n  const [editSchema, setSchema] = useState<Schema[]>();\n  const [selected, setSelect] = useState<number>(\n    schema.choice && schema.choice.value\n  );\n  const [loading, setLoading] = useState(false);\n  const [openDialogIndex, setOpen] = useState(-1);\n\n  function getURL(path?: string) {\n    return `${url}/${path}`;\n  }\n\n  /**\n   * Fetch selection\n   */\n  const fetchList = async () => {\n    if (schema.extra) {\n      let url = getURL(\n        schema.extra.related_model &&\n          schema.extra.related_model.replace(\"-\", \"_\") + \"/\"\n      );\n      let response = await axios.get<any[]>(url);\n\n      return response.data;\n    }\n  };\n\n  /**\n   * Fetch schema\n   */\n  const fetchSchema = async () => {\n    if (schema.extra) {\n      let url = getURL(\n        schema.extra.related_model &&\n          schema.extra.related_model.replace(\"-\", \"_\") + \"/\"\n      );\n      let response = await axios.request({ method: \"OPTIONS\", url: url });\n      setSchema(response.data.fields);\n    }\n  };\n\n  /**\n   * Update forign key\n   * @param data json data\n   */\n  const update = async (data: any) => {\n    setLoading(true);\n    if (schema.extra) {\n      let url = getURL(\n        schema.extra.related_model &&\n          schema.extra.related_model.replace(\"-\", \"_\") + \"/\" + selected + \"/\"\n      );\n      let response = await axios.patch(url, data);\n    }\n    setLoading(false);\n  };\n\n  /**\n   * Create forign key\n   * @param data JSon Data\n   */\n  const create = async (data: any) => {\n    setLoading(true);\n    if (schema.extra) {\n      let url = getURL(\n        schema.extra.related_model &&\n          schema.extra.related_model.replace(\"-\", \"_\") + \"/\"\n      );\n      let response = await axios.post(url, data);\n    }\n    setLoading(false);\n  };\n\n  const options = () => {\n    if (list !== undefined) {\n      return list.map(l => {\n        return { key: l.id, text: l.name, value: l.id };\n      });\n    } else {\n      if (schema.choice) {\n        return [\n          {\n            text: schema.choice.label,\n            key: schema.choice.value,\n            value: schema.choice.value\n          }\n        ];\n      } else {\n        return [];\n      }\n    }\n  };\n\n  return (\n    <Grid>\n      <Grid.Row columns=\"equal\">\n        <Grid.Column width={10}>\n          <Dropdown\n            value={schema.choice && schema.choice.value}\n            labeled\n            placeholder={`Select ${schema.label}`}\n            fluid\n            search\n            selection\n            onChange={(e, { value }) => {\n              setSelect(value as number);\n              onSaved(value as string);\n              if (list) {\n                let selected = list.find(l => l.id === value);\n                props.select({ label: selected.name, value: selected.id });\n              }\n            }}\n            options={options()}\n            onClick={async () => {\n              let result = await fetchList();\n              if (result) {\n                setList(result);\n              }\n            }}\n          />\n        </Grid.Column>\n        <Grid.Column>\n          <Button\n            icon=\"add\"\n            color=\"blue\"\n            onClick={async () => {\n              setOpen(0);\n              await fetchSchema();\n            }}\n          ></Button>\n          <Button\n            icon=\"edit\"\n            color=\"blue\"\n            disabled={schema.value === undefined}\n            onClick={async () => {\n              setOpen(1);\n              let list = await fetchList();\n              setList(list);\n              await fetchSchema();\n            }}\n          ></Button>\n          <Dialog\n            open={openDialogIndex === 0}\n            onClose={() => setOpen(-1)}\n            fullWidth\n          >\n            <DialogTitle>Add {schema.label}</DialogTitle>\n            <DialogContent>\n              {editSchema && (\n                <JSONSchema\n                  schemas={editSchema}\n                  url={url}\n                  onSubmit={create}\n                ></JSONSchema>\n              )}\n            </DialogContent>\n          </Dialog>\n\n          <Dialog\n            open={openDialogIndex === 1}\n            onClose={() => setOpen(-1)}\n            fullWidth\n          >\n            <DialogTitle>Edit {schema.label}</DialogTitle>\n            <DialogContent>\n              {editSchema && (\n                <JSONSchema\n                  schemas={editSchema}\n                  values={list && list.find(l => l.id === selected)}\n                  url={url}\n                  onSubmit={update}\n                  loading={loading}\n                ></JSONSchema>\n              )}\n            </DialogContent>\n          </Dialog>\n        </Grid.Column>\n        {schema.required && !schema.value && (\n          <Grid.Column>\n            <Label tag color=\"red\">\n              Required\n            </Label>\n          </Grid.Column>\n        )}\n      </Grid.Row>\n    </Grid>\n  );\n}\n","import React, { Component } from \"react\";\nimport { Schema, SchemaList, Widget } from \"./model/Schema\";\nimport { FieldAction } from \"./model/Action\";\nimport { FieldIcon } from \"./model/Icon\";\nimport { Form, Button, Container, Label } from \"semantic-ui-react\";\n\nimport \"semantic-ui-css/semantic.min.css\";\nimport JSONSchemaTextField from \"./Components/JSONSchemaTextField\";\nimport JSONSchemaSelectField from \"./Components/JSONSchemaSelectField\";\nimport JSONSchemaForignField from \"./Components/JSONSchemaForignField\";\n\ninterface Props {\n  schemas: Schema[] | any;\n  values?: { [key: string]: any };\n  actions?: FieldAction[];\n  icons?: FieldIcon[];\n  url: string;\n  loading?: boolean;\n  onSubmit?(data: { [key: string]: any }): void;\n}\n\ninterface State {\n  schemaList?: SchemaList;\n  submitSuccess?: boolean;\n}\n\nexport default class JSONSchema extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { schemaList: undefined, submitSuccess: undefined };\n  }\n\n  componentDidMount() {\n    const { schemas, values, icons, actions } = this.props;\n    let schemaList: SchemaList = new SchemaList(schemas);\n\n    if (values) {\n      schemaList.merge(values);\n    }\n    if (icons) {\n      let newSchema = FieldIcon.merge(schemaList.schemaList, icons);\n      schemaList.schemaList = newSchema;\n    }\n    if (actions) {\n      let newSchema = FieldAction.merge(schemaList.schemaList, actions);\n      schemaList.schemaList = newSchema;\n    }\n    this.setState({ schemaList: schemaList });\n  }\n\n  /**\n   * Onsave\n   */\n  onSaved = (value: string, schema: Schema) => {\n    let v: any = value;\n    if (schema.widget === Widget.number) {\n      v = parseInt(value);\n    }\n    schema.value = v;\n    this.setState({\n      schemaList: this.state.schemaList\n    });\n  };\n\n  /**\n   * render field based on schema's type\n   * @param schema Schema\n   */\n  renderField(schema: Schema) {\n    switch (schema.widget) {\n      case Widget.select:\n        return (\n          <JSONSchemaSelectField\n            schema={schema}\n            onSaved={v => this.onSaved(v, schema)}\n          ></JSONSchemaSelectField>\n        );\n      case Widget.foreignkey:\n        return (\n          <JSONSchemaForignField\n            select={choice => {\n              schema.choice = choice;\n              this.setState({\n                schemaList: this.state.schemaList\n              });\n            }}\n            schema={schema}\n            onSaved={v => this.onSaved(v, schema)}\n            url={this.props.url}\n          ></JSONSchemaForignField>\n        );\n      case Widget.text:\n        return (\n          <JSONSchemaTextField\n            schema={schema}\n            onSaved={v => this.onSaved(v, schema)}\n          />\n        );\n      case Widget.number:\n        return (\n          <JSONSchemaTextField\n            schema={schema}\n            onSaved={v => this.onSaved(v, schema)}\n          />\n        );\n      default:\n        return <div key={schema.name}></div>;\n    }\n  }\n\n  render() {\n    const { schemaList, submitSuccess } = this.state;\n    const { loading } = this.props;\n\n    return (\n      <Container>\n        {submitSuccess !== undefined && (\n          <Label basic color={submitSuccess ? \"green\" : \"red\"}>\n            Submitted {submitSuccess ? \"success\" : \"failed\"}\n          </Label>\n        )}\n        <Form loading={loading}>\n          {schemaList &&\n            schemaList.schemaList\n              .filter(s => !s.readonly)\n              .map(s => (\n                <Form.Field key={s.name}>{this.renderField(s)}</Form.Field>\n              ))}\n          <Button\n            loading={loading === true}\n            onClick={async () => {\n              if (schemaList && this.props.onSubmit) {\n                try {\n                  let data = schemaList.onSubmit();\n                  await this.props.onSubmit(data);\n                  this.setState({ submitSuccess: true });\n                } catch (e) {\n                  alert(e);\n                  this.setState({ submitSuccess: false });\n                }\n              }\n            }}\n          >\n            Submit\n          </Button>\n        </Form>\n      </Container>\n    );\n  }\n}\n","import React, { useState, useContext } from \"react\";\nimport {\n  Modal,\n  Segment,\n  Progress,\n  Grid,\n  Button,\n  Icon\n} from \"semantic-ui-react\";\nimport { HomePageContext } from \"../../../../models/HomeContext\";\nimport { SchemaList, Schema, Widget } from \"../../JSONSchema/model/Schema\";\nimport { JSONSchema } from \"../../JSONSchema\";\n\ninterface Props {\n  open: boolean;\n  setOpen(open: boolean): void;\n}\n\ninterface UploadInfo {\n  currentName: string;\n  progress: number;\n  total: number;\n  currentIndex: number;\n}\n\nconst schema: Schema[] = [\n  {\n    name: \"name\",\n    label: \"Folder Name\",\n    readonly: false,\n    required: true,\n    widget: Widget.text\n  }\n];\n\nexport default function NewFolderDialog(props: Props) {\n  const { nas, update } = useContext(HomePageContext);\n\n  return (\n    <Modal open={props.open}>\n      <Modal.Header>New Folder</Modal.Header>\n      <Modal.Content>\n        <JSONSchema\n          schemas={schema}\n          url=\"\"\n          onSubmit={async data => {\n            try {\n              await nas.createNewFolder(data);\n              update();\n              setTimeout(() => {\n                props.setOpen(false);\n              }, 300);\n            } catch (err) {\n              throw err;\n            }\n          }}\n        />\n      </Modal.Content>\n      <Modal.Actions>\n        <Button basic color=\"red\" onClick={() => props.setOpen(false)}>\n          <Icon name=\"remove\" /> No\n        </Button>\n      </Modal.Actions>\n    </Modal>\n  );\n}\n","import React, { useState, useContext } from \"react\";\nimport EditorJs from \"react-editor-js\";\nimport { Modal, Button } from \"semantic-ui-react\";\nimport { TextField } from \"@material-ui/core\";\nimport { Document as NasDocument } from \"../../../../models/Folder\";\nimport { HomePageContext } from \"../../../../models/HomeContext\";\nimport EditorJS from \"@editorjs/editorjs\";\nimport \"react-quill/dist/quill.snow.css\";\nimport ReactQuill, { Quill } from \"react-quill\";\n\ninterface Props {\n  open: boolean;\n  setOpen(open: boolean): void;\n  document?: NasDocument;\n}\n\nexport default function Editor(props: Props) {\n  const [editor, setEditor] = useState<ReactQuill | undefined>();\n  const [name, setName] = useState<string | undefined>();\n  const [isChanged, setIsChanged] = useState(false);\n  const { document } = props;\n  const { nas, update } = useContext(HomePageContext);\n\n  if (name === undefined) {\n    setName(document ? document.name : \"\");\n  }\n\n  return (\n    <Modal open={props.open} centered={false}>\n      <Modal.Header>\n        <TextField\n          value={name}\n          label=\"You Document Title\"\n          onChange={e => {\n            setName(e.target.value);\n          }}\n          fullWidth\n        />\n      </Modal.Header>\n      <Modal.Content>\n        <ReactQuill\n          ref={instance => setEditor(instance != null ? instance : undefined)}\n          defaultValue={document && document.content}\n        />\n      </Modal.Content>\n      <Modal.Actions>\n        <Button\n          onClick={() => {\n            if (isChanged) {\n              let confirm = window.confirm(\n                \"Are you sure you want to exit? You will lose unsave data.\"\n              );\n              if (confirm) {\n                props.setOpen(false);\n              }\n            } else {\n              props.setOpen(false);\n            }\n          }}\n        >\n          close\n        </Button>\n        <Button\n          color=\"blue\"\n          onClick={async () => {\n            try {\n              if (editor && name) {\n                let data = editor.getEditor().getContents();\n                if (document) {\n                  // update current document\n                  await nas.updateDocument(document.id, name, data);\n                } else {\n                  if (name !== \"\") {\n                    await nas.createNewDocument(name, data);\n                  } else {\n                    throw \"Name should not be empty\";\n                  }\n                }\n                update();\n                setName(undefined);\n                props.setOpen(false);\n              }\n            } catch (err) {\n              alert(err.toString());\n            }\n          }}\n        >\n          Save\n        </Button>\n      </Modal.Actions>\n    </Modal>\n  );\n}\n","import React, { useContext, useState } from \"react\";\nimport {\n  Button,\n  Icon,\n  Grid,\n  Breadcrumb,\n  Segment,\n  Card,\n  MenuItem as MMenuItem\n} from \"semantic-ui-react\";\nimport { Link, NavLink } from \"react-router-dom\";\nimport { HomePageContext } from \"../../../../models/HomeContext\";\nimport UploadDialog from \"../files/UploadDialog\";\nimport NewFolderDialog from \"../folders/NewFolderDialog\";\nimport Editor from \"../documents/Editor\";\nimport { ContextMenu, MenuItem } from \"react-contextmenu\";\n\nimport { Menu } from \"semantic-ui-react\";\n\nexport default function NasMenus() {\n  const { nas } = useContext(HomePageContext);\n\n  const [open, setOpen] = useState(false);\n  const [openNewFolder, setOpenNewFolder] = useState(false);\n  const [openEditor, setOpenEditor] = useState(false);\n\n  return (\n    <div>\n      <ContextMenu id=\"folder\">\n        <Menu id=\"folder\" vertical>\n          <MenuItem\n            onClick={() => {\n              setOpenNewFolder(true);\n            }}\n          >\n            <MMenuItem>New Folder</MMenuItem>\n          </MenuItem>\n        </Menu>\n      </ContextMenu>\n      <ContextMenu id=\"files\">\n        <Menu vertical>\n          <MMenuItem onClick={() => setOpenEditor(true)}>\n            New Document\n          </MMenuItem>\n          <MMenuItem\n            onClick={() => {\n              setOpen(true);\n            }}\n          >\n            Upload Files\n          </MMenuItem>\n        </Menu>\n      </ContextMenu>\n      <UploadDialog open={open} setOpen={setOpen}></UploadDialog>\n      <NewFolderDialog\n        open={openNewFolder}\n        setOpen={setOpenNewFolder}\n      ></NewFolderDialog>\n      <Editor open={openEditor} setOpen={setOpenEditor}></Editor>\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\nimport { Nas } from \"./nas\";\nimport { RouteComponentProps } from \"react-router\";\nimport { SystemInfo } from \"./Folder\";\nimport Axios from \"axios\";\nimport { systemURL } from \"./urls\";\n\ninterface SystemContext {\n  systemInfo?: SystemInfo;\n}\n\ninterface SystemProps {}\n\nexport class SystemProvider extends Component<SystemProps, SystemContext> {\n  constructor(props: SystemProps) {\n    super(props);\n    this.state = {};\n  }\n\n  async componentDidMount() {\n    let info = await this.fetchSystemInfo();\n    if (info) {\n      this.setState({ systemInfo: info });\n    }\n    // setInterval(async () => {\n    //   let info = await this.fetchSystemInfo();\n    //   console.log(\"Update system info\");\n    //   if (info) {\n    //     this.setState({ systemInfo: info });\n    //   }\n    // }, 20000);\n  }\n\n  fetchSystemInfo = async (): Promise<SystemInfo> => {\n    let info = await Axios.get<SystemInfo>(systemURL);\n    return Promise.resolve(info.data);\n  };\n\n  render() {\n    return (\n      <SystemContext.Provider value={this.state}>\n        {this.props.children}\n      </SystemContext.Provider>\n    );\n  }\n}\n\nconst context: SystemContext = {};\n\nexport const SystemContext = React.createContext(context);\n","import React, { useContext } from \"react\";\nimport { Progress, Message } from \"semantic-ui-react\";\nimport { SystemContext } from \"../../../../models/SystemContext\";\n\nexport default function ComputerStatus() {\n  const { systemInfo } = useContext(SystemContext);\n  if (systemInfo === undefined) {\n    return (\n      <Message>\n        <p>No Info Avaliable currently</p>\n      </Message>\n    );\n  }\n  return (\n    <div>\n      <span>\n        Used Sapce: {(systemInfo.disk.used / 1024 / 1024).toFixed(2)}MB/\n        {(systemInfo.disk.total / 1024 / 1024).toFixed(2)}MB\n      </span>\n      <Progress\n        percent={((systemInfo.disk.used / systemInfo.disk.total) * 100).toFixed(\n          2\n        )}\n        size=\"tiny\"\n        color=\"green\"\n      />\n    </div>\n  );\n}\n","import React, { useContext, useState } from \"react\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { TextField, ListItem, CircularProgress } from \"@material-ui/core\";\nimport { HomePageContext } from \"../../../../models/HomeContext\";\n\nimport * as path from \"path\";\nimport { File as NasFile } from \"../../../../models/Folder\";\nimport { Grid, Card, Header, Icon } from \"semantic-ui-react\";\nimport { ContextMenuTrigger } from \"react-contextmenu\";\n\nexport default function FilesActions() {\n  const { nas, update, selectedDocument, selectDocument } = useContext(\n    HomePageContext\n  );\n  const [isLoading, setIsLoading] = useState(false);\n  const [shadow, setShadow] = useState<number>();\n\n  return (\n    <div style={{ width: \"100%\", margin: \"20px\" }}>\n      <Grid>\n        <Grid.Row>\n          <Autocomplete\n            id=\"combo-box-demo\"\n            loading={isLoading}\n            options={nas.searchedFiles ? nas.searchedFiles : []}\n            getOptionLabel={option => path.basename(option.filename)}\n            style={{\n              width: \"100%\",\n              paddingTop: \"10px\",\n              paddingBottom: \"10px\",\n              height: \"100%\"\n            }}\n            onChange={(e: any, v: NasFile | null, r: any) => {\n              if (v) {\n                window.location.href = `#/home/${v.parent}`;\n                console.log(\"on change\", v);\n              }\n            }}\n            onClick={file => {\n              console.log(\"onclick\");\n            }}\n            renderInput={params => (\n              <TextField\n                {...params}\n                label=\"Search File\"\n                InputProps={{\n                  ...params.InputProps,\n                  endAdornment: (\n                    <React.Fragment>\n                      {isLoading ? <CircularProgress size={20} /> : null}\n                      {params.InputProps.endAdornment}\n                    </React.Fragment>\n                  )\n                }}\n                onChange={async e => {\n                  let keyword = e.target.value;\n                  if (keyword.length > 1) {\n                    setIsLoading(true);\n                    await nas.search(e.target.value);\n                    update();\n                    setIsLoading(false);\n                  }\n                }}\n              />\n            )}\n          />\n        </Grid.Row>\n\n        <Grid.Row>\n          {/*Render documents*/}\n          {nas.currentFolder &&\n            nas.currentFolder.documents.map((f, i) => (\n              <Grid.Column width={4} style={{ padding: 10 }}>\n                <div\n                  onMouseOver={() => setShadow(i)}\n                  onMouseOut={() => setShadow(undefined)}\n                  style={{ cursor: \"grab\" }}\n                >\n                  <Card\n                    style={{ height: 100 }}\n                    raised={shadow === i ? true : false}\n                    onClick={async () => {\n                      let document = await nas.getDocument(f.id);\n                      selectDocument(document);\n                    }}\n                  >\n                    <Header icon style={{ padding: 10 }} size=\"small\">\n                      <Icon name=\"file pdf\" color=\"red\" />\n                      {f.name}\n                    </Header>\n                  </Card>\n                </div>\n              </Grid.Column>\n            ))}\n          {/*End Render documents*/}\n        </Grid.Row>\n\n        <Grid.Row>\n          <h3>Files</h3>\n        </Grid.Row>\n      </Grid>\n    </div>\n  );\n}\n","import React, { useContext, useState } from \"react\";\nimport {\n  Segment,\n  MessageHeader,\n  Message,\n  Icon,\n  Modal,\n  Image,\n  SemanticICONS,\n  Dropdown\n} from \"semantic-ui-react\";\nimport {\n  TableContainer,\n  TableHead,\n  Table,\n  TableCell,\n  TableRow,\n  Menu,\n  MenuItem,\n  TableBody,\n  IconButton\n} from \"@material-ui/core\";\nimport { HomePageContext } from \"../../../../models/HomeContext\";\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\nimport moment from \"moment\";\nimport path from \"path\";\nimport \"video-react/dist/video-react.css\";\nimport {\n  Folder,\n  Document as NasDocument,\n  File as NasFile\n} from \"../../../../models/Folder\";\nimport Editor from \"../documents/Editor\";\nimport { downloadURL } from \"../../../../models/urls\";\nimport { Grid } from \"semantic-ui-react\";\nimport FilesActions from \"./FilesActions\";\nimport MoveDialog from \"./MoveDialog\";\nimport RenameDialog from \"./RenameDialog\";\n\nconst { Player } = require(\"video-react\");\n\nconst imageExt = [\".jpg\", \".png\", \".bmp\", \".JPG\", \".gif\"];\nconst videoExt = [\".mov\", \".mp4\", \".avi\", \".m4v\", \".MOV\", \".MP4\"];\n\nexport default function ListFilesPanel() {\n  const {\n    nas,\n    isLoading,\n    update,\n    selectedDocument,\n    selectDocument\n  } = useContext(HomePageContext);\n  const [selectedFile, setselectedFile] = useState<NasFile>();\n  const [showRenameDialog, setShowRenameDialog] = useState(false);\n  const [showMoveToDialog, setShowMoveToDialog] = useState(false);\n  const [imageSrc, setImageSrc] = useState<string | undefined>(undefined);\n  const [videoSrc, setVideoSrc] = useState<\n    { src: string; cover: string } | undefined\n  >(undefined);\n\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  function isImage(filepath: string): boolean {\n    return imageExt.includes(path.extname(filepath));\n  }\n\n  function isVideo(filepath: string): boolean {\n    return videoExt.includes(path.extname(filepath));\n  }\n\n  function getIcon(filepath: string): SemanticICONS {\n    if (isImage(filepath)) {\n      return \"images\";\n    } else if (isVideo(filepath)) {\n      return \"file video\";\n    }\n\n    return \"file\";\n  }\n\n  return (\n    <div id=\"file-list\">\n      <Grid>\n        <FilesActions />\n        <Grid.Row style={{ overflow: \"auto\", overflowX: \"hidden\" }}>\n          {nas.errorMsg && (\n            <Message error>\n              <MessageHeader>Network Error</MessageHeader>\n              <div>{nas.errorMsg.toString()}</div>\n            </Message>\n          )}\n          {/** Render files */}\n          {nas.currentFolder && nas.currentFolder.files.length > 0 && (\n            <TableContainer>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Name</TableCell>\n                    <TableCell>Last Modify</TableCell>\n                    <TableCell>Actions</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {nas.currentFolder.files.map((f, i) => (\n                    <TableRow hover>\n                      <TableCell\n                        style={{ cursor: \"grab\" }}\n                        onClick={() => {\n                          if (isImage(f.file)) {\n                            setImageSrc(f.file);\n                          } else if (isVideo(f.file)) {\n                            setVideoSrc({ src: f.file, cover: f.cover });\n                          }\n                        }}\n                      >\n                        <Icon\n                          name={getIcon(f.file)}\n                          size=\"large\"\n                          color=\"teal\"\n                        />\n                        {path.basename(f.filename)}\n                      </TableCell>\n                      <TableCell>\n                        {\" \"}\n                        {moment(f.modified_at).format(\"MMM DD, YYYY\")}\n                      </TableCell>\n                      <TableCell>\n                        <IconButton\n                          onClick={e => {\n                            setselectedFile(f);\n                            handleClick(e);\n                          }}\n                        >\n                          <MoreHorizIcon></MoreHorizIcon>\n                        </IconButton>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </TableContainer>\n          )}\n          {/** End Render files */}\n        </Grid.Row>\n\n        <Menu\n          id=\"simple-menu\"\n          anchorEl={anchorEl}\n          keepMounted\n          open={Boolean(anchorEl)}\n          onClose={handleClose}\n        >\n          <MenuItem\n            onClick={() => {\n              /// Download from link\n              if (selectedFile) {\n                const link = document.createElement(\"a\");\n                link.href = `${selectedFile.file}`;\n                document.body.appendChild(link);\n                link.click();\n                document.body.removeChild(link);\n              }\n              handleClose();\n            }}\n          >\n            Download\n          </MenuItem>\n          <MenuItem\n            onClick={async () => {\n              if (selectedFile) {\n                handleClose();\n                setShowRenameDialog(true);\n              }\n            }}\n          >\n            Rename\n          </MenuItem>\n          <MenuItem\n            onClick={async () => {\n              if (selectedFile) {\n                await nas.deleteFile(selectedFile.id);\n                handleClose();\n                update();\n              }\n            }}\n          >\n            Delete\n          </MenuItem>\n          <MenuItem\n            onClick={async () => {\n              if (selectedFile) {\n                handleClose();\n                setShowMoveToDialog(true);\n              }\n            }}\n          >\n            Move To\n          </MenuItem>\n        </Menu>\n\n        {selectedDocument && (\n          <Editor\n            open={selectedDocument !== undefined}\n            setOpen={v => {\n              !v && selectDocument(undefined);\n            }}\n            document={selectedDocument}\n          ></Editor>\n        )}\n        <Modal\n          open={imageSrc !== undefined}\n          onClose={() => setImageSrc(undefined)}\n        >\n          <Image src={imageSrc} fluid></Image>\n        </Modal>\n        <Modal\n          open={videoSrc !== undefined}\n          onClose={() => setVideoSrc(undefined)}\n        >\n          <Player poster={videoSrc && videoSrc.cover}>\n            <source src={videoSrc && videoSrc.src} />\n          </Player>\n        </Modal>\n        {selectedFile && (\n          <MoveDialog\n            type=\"file\"\n            open={showMoveToDialog}\n            selectedFile={selectedFile}\n            onClose={() => {\n              setShowMoveToDialog(false);\n            }}\n          />\n        )}\n        {selectedFile && (\n          <RenameDialog\n            type=\"file\"\n            open={showRenameDialog}\n            selectedFile={selectedFile}\n            onClose={() => {\n              setShowRenameDialog(false);\n            }}\n          />\n        )}\n      </Grid>\n    </div>\n  );\n}\n","import React, { useContext } from \"react\";\nimport { HomePageContext } from \"../../../../models/HomeContext\";\nimport Rating from \"@material-ui/lab/Rating\";\nimport List from \"@material-ui/core/List\";\nimport { Icon, Grid, Item } from \"semantic-ui-react\";\nimport {\n  ListItem,\n  ListItemText,\n  LinearProgress,\n  Box,\n  Typography\n} from \"@material-ui/core\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport { SystemContext } from \"../../../../models/SystemContext\";\n\nexport default function UploadFilesSideBar() {\n  const { uploadFiles, uploadInfo } = useContext(HomePageContext);\n  const { systemInfo } = useContext(SystemContext);\n\n  return (\n    <List>\n      {systemInfo && (\n        <Grid style={{ height: \"100%\", marginTop: 10 }}>\n          <Grid.Row>\n            <Grid.Column width={8}>\n              <Typography component=\"legend\">CPU</Typography>\n              <Rating\n                name=\"read-only\"\n                value={(5 * systemInfo.cpu) / 100}\n                readOnly\n              />\n            </Grid.Column>\n            <Grid.Column width={8}>\n              <Typography component=\"legend\">Memory</Typography>\n              <Rating\n                name=\"read-only\"\n                value={(5 * systemInfo.memory.used) / systemInfo.memory.total}\n                readOnly\n              />\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      )}\n\n      {uploadFiles ? (\n        uploadFiles.map((f, i) => (\n          <ListItem>\n            <ListItemIcon>\n              <Icon name=\"file\" />\n            </ListItemIcon>\n            <ListItemText\n              primary={f.name}\n              secondary={\n                <LinearProgress\n                  variant={\n                    uploadInfo && uploadInfo.currentIndex === i\n                      ? \"determinate\"\n                      : \"indeterminate\"\n                  }\n                  value={\n                    uploadInfo && uploadInfo.currentIndex === i\n                      ? uploadInfo.progress\n                      : undefined\n                  }\n                />\n              }\n            />\n          </ListItem>\n        ))\n      ) : (\n        <Grid style={{ height: \"100%\" }} centered verticalAlign=\"middle\">\n          <div style={{ marginTop: \"10px\", marginBottom: \"auto\" }}>\n            No Pending Uploads\n          </div>\n        </Grid>\n      )}\n    </List>\n  );\n}\n","import React, { useContext, useState } from \"react\";\nimport Header from \"./components/others/Header\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport ListPanel from \"./components/folders/ListFolderPanel\";\nimport { Container, Segment, Progress, Grid, Menu } from \"semantic-ui-react\";\nimport NasMenus from \"./components/others/NasMenu\";\nimport ComputerStatus from \"./components/others/ComputerStatus\";\nimport ListFilesPanel from \"./components/files/ListFilesPanel\";\nimport { HomePageContext } from \"../../models/HomeContext\";\nimport { ContextMenu, ContextMenuTrigger } from \"react-contextmenu\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport UploadFilesSideBar from \"./components/files/UploadFilesSideBar\";\nimport { Hidden, AppBar, Toolbar, IconButton, Drawer } from \"@material-ui/core\";\n\nexport function HomePage() {\n  const { nas, isLoading, update } = useContext(HomePageContext);\n  const [show, setShow] = useState(false);\n\n  return (\n    <div\n      id=\"home\"\n      style={{\n        height: \"100%\",\n        overflow: \"hidden\"\n      }}\n    >\n      {/** drawer */}\n      <Drawer open={show} onClose={() => setShow(false)}>\n        <div style={{ width: 300, height: \"100%\" }}>\n          <ListPanel />\n        </div>\n      </Drawer>\n      {/** end drawer */}\n      <Segment\n        loading={isLoading}\n        style={{\n          height: \"100%\"\n        }}\n      >\n        <Grid\n          style={{\n            height: \"100%\",\n            overflow: \"hidden\",\n            position: \"relative\"\n          }}\n        >\n          <Grid.Row style={{ height: \"100%\", paddingTop: 0, paddingBottom: 0 }}>\n            {/** left side */}\n            <Hidden smDown implementation=\"js\">\n              <Grid.Column\n                computer={3}\n                style={{ height: \"100%\", backgroundColor: \"#fcfcfc\" }}\n              >\n                <ContextMenuTrigger id=\"folder\">\n                  <Grid.Row style={{ height: \"93%\" }}>\n                    <ListPanel />\n                  </Grid.Row>\n                  <Grid.Row>\n                    <ComputerStatus />\n                  </Grid.Row>\n                </ContextMenuTrigger>\n              </Grid.Column>\n            </Hidden>\n            {/** end left */}\n            <Grid.Column\n              computer={10}\n              mobile={16}\n              tablet={16}\n              style={{ height: \"100%\" }}\n            >\n              {/** App Bar */}\n              <Hidden mdUp>\n                <IconButton\n                  onClick={() => {\n                    setShow(true);\n                  }}\n                >\n                  <MenuIcon />\n                </IconButton>\n              </Hidden>\n              {/** end App Bar */}\n              <ContextMenuTrigger id=\"files\">\n                <ListFilesPanel />\n              </ContextMenuTrigger>\n            </Grid.Column>\n            {/** right side */}\n            <Hidden smDown implementation=\"js\">\n              <Grid.Column\n                computer={3}\n                style={{ height: \"100%\", backgroundColor: \"#fcfcfc\" }}\n              >\n                <UploadFilesSideBar />\n              </Grid.Column>\n            </Hidden>\n            {/** end right side */}\n          </Grid.Row>\n        </Grid>\n      </Segment>\n      <NasMenus />\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  PieChart,\n  Pie,\n  Legend,\n  Tooltip,\n  ResponsiveContainer,\n  Cell\n} from \"recharts\";\nimport { Segment } from \"semantic-ui-react\";\n\ninterface Props {\n  title: string;\n  used: number;\n  total: number;\n  color: string;\n  color2: string;\n}\nconst data02 = [\n  { name: \"Group A\", value: 400 },\n  { name: \"Group B\", value: 300 },\n  { name: \"Group C\", value: 300 },\n  { name: \"Group D\", value: 200 }\n];\nexport default function PercentageChart(props: Props) {\n  const { title, used, total, color, color2 } = props;\n  let data = [\n    {\n      name: \"Used\",\n      value: used\n    },\n    { name: \"Available\", value: total - used }\n  ];\n\n  return (\n    <Segment>\n      <ResponsiveContainer\n        minHeight={300}\n        height=\"100%\"\n        width=\"100%\"\n        minWidth={200}\n      >\n        <PieChart>\n          <Pie\n            data={data}\n            dataKey=\"value\"\n            label\n            fill={color}\n            isAnimationActive={false}\n          >\n            <Cell fill={color}></Cell>\n            <Cell fill={color2}></Cell>\n          </Pie>\n\n          <Tooltip></Tooltip>\n        </PieChart>\n      </ResponsiveContainer>\n      <span>{title}</span>\n    </Segment>\n  );\n}\n","import React, { useContext } from \"react\";\nimport { Container, Grid, Segment } from \"semantic-ui-react\";\nimport { SystemContext } from \"../../models/SystemContext\";\nimport PercentageChart from \"./PercentageChart\";\n\nexport default function SystemInfoPage() {\n  const { systemInfo } = useContext(SystemContext);\n  if (systemInfo === undefined) {\n    return <div>Infomation Not Available</div>;\n  }\n\n  return (\n    <div id=\"home\" style={{ width: \"100%\", color: \"black\" }}>\n      <Container>\n        <h1>System Info</h1>\n        <Grid columns={2}>\n          <Grid.Column>\n            <PercentageChart\n              used={Math.round(systemInfo.disk.used / 1024 / 1024)}\n              total={Math.round(systemInfo.disk.total / 1024 / 1024)}\n              title=\"Disk(MB)\"\n              color=\"#0088FE\"\n              color2=\"orange\"\n            />\n          </Grid.Column>\n          <Grid.Column>\n            <PercentageChart\n              used={Math.round(systemInfo.memory.used / 1024 / 1024)}\n              total={Math.round(systemInfo.memory.total / 1024 / 1024)}\n              title=\"Memory(MB)\"\n              color=\"#0088FE\"\n              color2=\"orange\"\n            />\n          </Grid.Column>\n          <Grid.Column>\n            <PercentageChart\n              used={systemInfo.cpu}\n              total={100}\n              title=\"CPU Usage(Percentage)\"\n              color=\"#0088FE\"\n              color2=\"orange\"\n            />\n          </Grid.Column>\n          <Grid.Column>\n            <Segment style={{ height: \"100%\" }}>\n              <h4>Temperature</h4>\n              <h1>\n                {systemInfo.temperature\n                  ? systemInfo.temperature.toFixed(1)\n                  : \"None\"}\n              </h1>\n            </Segment>\n          </Grid.Column>\n          <Grid.Column>\n            <Segment style={{ height: \"100%\" }}>\n              <h4>Humidity</h4>\n              <h1>\n                {systemInfo.humidity ? systemInfo.humidity.toFixed(1) : \"None\"}\n              </h1>\n            </Segment>\n          </Grid.Column>\n          <Grid.Column>\n            <Segment style={{ height: \"100%\" }}>\n              <h4>Pressure</h4>\n              <h1>\n                {systemInfo.pressure ? systemInfo.pressure.toFixed(2) : \"None\"}\n              </h1>\n            </Segment>\n          </Grid.Column>\n        </Grid>\n      </Container>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { I18nProvider } from \"@lingui/react\";\n\nReactDOM.render(\n  <I18nProvider catalogs={{}}>\n    <App />\n  </I18nProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { Component, useState } from \"react\";\nimport \"./App.css\";\nimport {\n  HashRouter as Router,\n  Route,\n  Link,\n  NavLink,\n  Redirect\n} from \"react-router-dom\";\nimport { HomePage } from \"./components/pages/home/HomePage\";\nimport { HomePageProvider } from \"./components/models/HomeContext\";\nimport { SystemProvider } from \"./components/models/SystemContext\";\nimport SystemInfoPage from \"./components/pages/systemInfo/SystemInfoPage\";\nimport { Sidebar, Menu, Icon, Button } from \"semantic-ui-react\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport { IconButton } from \"@material-ui/core\";\n\nexport default function App() {\n  const [visible, setVisible] = useState(false);\n  const [showMenu, setShowMenu] = useState(false);\n\n  return (\n    <SystemProvider>\n      <Router>\n        <div style={{ height: \"100%\" }}>\n          <Route exact path=\"/\" component={() => <Redirect to=\"/home\" />} />\n          <Route\n            exact\n            path=\"/home/:id?\"\n            component={(props: any) => {\n              setShowMenu(true);\n              return (\n                <HomePageProvider {...props}>\n                  <HomePage></HomePage>\n                </HomePageProvider>\n              );\n            }}\n          />\n\n          <Route\n            exact\n            path=\"/info\"\n            component={(props: any) => {\n              setShowMenu(true);\n              return <SystemInfoPage />;\n            }}\n          />\n        </div>\n      </Router>\n    </SystemProvider>\n  );\n}\n"],"sourceRoot":""}