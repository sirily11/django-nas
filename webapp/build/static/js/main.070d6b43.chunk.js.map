{"version":3,"sources":["components/pages/home/components/Header.tsx","components/models/urls.ts","components/models/nas.ts","components/pages/home/JSONSchema/model/Schema.ts","components/models/HomeContext.tsx","components/pages/home/JSONSchema/model/Action.ts","components/pages/home/JSONSchema/model/base.ts","components/pages/home/JSONSchema/model/Icon.ts","components/pages/home/JSONSchema/Components/JSONSchemaTextField.tsx","components/pages/home/JSONSchema/Components/JSONSchemaSelectField.tsx","components/pages/home/JSONSchema/Components/JSONSchemaForignField.tsx","components/pages/home/JSONSchema/JSONSchema.tsx","components/pages/home/components/UpdateFolderDialog.tsx","components/pages/home/components/Editor.tsx","components/pages/home/components/ListPanel.tsx","components/pages/home/components/UploadDialog.tsx","components/pages/home/components/NewFolderDialog.tsx","components/pages/home/components/Actions.tsx","components/models/SystemContext.tsx","components/pages/home/components/ComputerStatus.tsx","components/pages/home/HomePage.tsx","components/pages/systemInfo/PercentageChart.tsx","components/pages/systemInfo/SystemInfoPage.tsx","serviceWorker.js","index.js","App.tsx"],"names":["Header","Grid","columns","divided","style","margin","Row","Column","color","Icon","name","size","systemURL","url","downloadURL","Widget","Nas","menus","currentFolder","errorMsg","getContent","id","a","u","Axios","get","response","data","parents","undefined","uploadFile","files","onUpload","index","f","formData","FormData","append","toString","post","headers","onUploadProgress","progress","p","Math","round","loaded","total","res","push","total_size","alert","deleteFile","window","confirm","delete","deleteFolder","createNewFolder","parent","folders","renameFolder","patch","findIndex","getDocument","Promise","resolve","content","JSON","parse","createNewDocument","stringify","ops","documents","updateDocument","deleteDocument","console","log","reject","this","HomePageProvider","props","fetch","setState","isLoading","nas","state","update","oldProps","match","params","HomePageContext","Provider","value","children","Component","context","React","createContext","ActionTypes","ActionDone","SchemaList","schemas","schemaList","forEach","s","extra","default","values","map","widget","select","choice","choices","find","c","foreignkey","maps","filter","readonly","tomanyTable","BaseExtra","schemaName","FieldAction","t","d","n","actionTypes","actionDone","action","FieldIcon","i","iconData","icon","JSONSchemaTextField","schema","onSaved","Form","Input","data-testid","control","label","error","required","pointing","hasError","onChange","e","defaultValue","help","Label","JSONSchemaSelectField","Select","options","text","key","placeholder","JSONSchemaForignField","useState","list","setList","editSchema","setSchema","selected","setSelect","loading","setLoading","openDialogIndex","setOpen","getURL","path","fetchList","related_model","replace","axios","fetchSchema","request","method","fields","create","width","Dropdown","labeled","fluid","search","selection","l","onClick","result","Button","disabled","Dialog","open","onClose","fullWidth","DialogTitle","DialogContent","onSubmit","tag","JSONSchema","v","number","parseInt","submitSuccess","icons","actions","merge","newSchema","Container","basic","Field","renderField","UpdateFolderDialog","useContext","Modal","Content","selectedFolder","setTimeout","Actions","Editor","editor","setEditor","setName","isChanged","document","centered","TextField","target","ref","instance","getEditor","getContents","Player","require","imageExt","videoExt","ListPanel","selectedDocument","setSelectedDocument","imageSrc","setImageSrc","videoSrc","setVideoSrc","setSelectedFolder","isImage","filepath","includes","extname","isVideo","zIndex","position","toFixed","Segment","height","innerHeight","overflow","List","Message","MessageHeader","ListItem","button","location","href","ListItemAvatar","circular","ListItemText","primary","secondary","moment","modified_at","format","ListItemSecondaryAction","Group","link","createElement","download_url","body","appendChild","click","removeChild","edge","file","basename","filename","Fragment","aria-label","Image","src","UploadDialog","setFiles","uploadInfo","setUploadInfo","type","multiple","uploadFiles","length","marginTop","Progress","percent","attached","active","currentName","currentIndex","inverted","NewFolderDialog","openNewFolder","setOpenNewFolder","openEditor","setOpenEditor","floated","textAlign","Breadcrumb","Section","to","Divider","m","SystemProvider","fetchSystemInfo","info","systemInfo","setInterval","SystemContext","ComputerStatus","disk","used","HomePage","PercentageChart","title","color2","minHeight","minWidth","dataKey","fill","isAnimationActive","SystemInfoPage","memory","cpu","temperature","humidity","pressure","Boolean","hostname","ReactDOM","render","catalogs","visible","setVisible","showMenu","setShowMenu","Sidebar","Pushable","boxShadow","border","as","Menu","animation","onHide","vertical","Item","Pusher","IconButton","exact","component","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.070d6b43.chunk.js","sourcesContent":["import React from \"react\";\nimport { Grid, Image, Icon } from \"semantic-ui-react\";\n\nexport default function Header() {\n  return (\n    <Grid columns={2} divided style={{ margin: 10 }}>\n      <Grid.Row>\n        <Grid.Column>\n          <h1>Raspberry NAS</h1>\n        </Grid.Column>\n        <Grid.Column color=\"blue\">\n          <Icon name=\"database\" size=\"huge\"></Icon>\n        </Grid.Column>\n      </Grid.Row>\n    </Grid>\n  );\n}\n","export const systemURL = \"/system/\"\nexport const url = \"/api/folder/\"\nexport const fileURL = \"/api/file/\"\nexport const documentURL = \"/api/document/\"\n// download folder\nexport const downloadURL = \"/api/download/\"","import Axios from \"axios\"\nimport { Folder, Parent, File as NasFile, Document as NasDocument } from './Folder';\nimport { number } from \"@lingui/core\";\nimport { OutputData } from \"@editorjs/editorjs\";\nimport { systemURL, url, documentURL, fileURL } from \"./urls\"\nimport { DeltaStatic } from \"quill\";\n\n\n\ntype UploadProgressCallback = (index: number, progress: number) => void\n\n\nexport class Nas {\n    menus: Parent[]\n    currentFolder?: Folder\n    errorMsg?: string\n\n    constructor() {\n        this.menus = []\n\n    }\n\n    getContent = async (id?: number | string) => {\n        try {\n            let u = id ? `${url}${id}/` : url\n            let response = await Axios.get<Folder>(u)\n            const { data } = response\n            this.menus = data.parents\n            this.currentFolder = data\n            this.errorMsg = undefined\n        } catch (err) {\n            this.errorMsg = err\n            this.currentFolder = undefined\n        }\n    }\n\n    /**\n     * Upload file to server.\n     * If upload fail, will show alert dialog\n     * @param files: List of files\n     * @param onUpload: callback function\n     */\n    uploadFile = async (files: File[], onUpload: (index: number, progress: number) => void) => {\n        try {\n\n            let index = 0;\n            for (let f of files) {\n                if (this.currentFolder) {\n                    onUpload(index, 0);\n                    let formData = new FormData()\n                    formData.append(\"file\", f)\n                    this.currentFolder.id && formData.append(\"parent\", this.currentFolder.id.toString())\n                    let res = await Axios.post<NasFile>(fileURL, formData,\n                        {\n                            headers: { 'Content-Type': 'multipart/form-data' },\n                            onUploadProgress: (progress) => {\n                                let p = Math.round((progress.loaded * 100) / progress.total);\n                                onUpload(index, p)\n\n                            }\n\n                        })\n                    this.currentFolder.files.push(res.data)\n                    this.currentFolder.total_size += res.data.size\n\n\n                }\n                index += 1\n            }\n            onUpload(index, 100);\n        } catch (err) {\n            alert(\"Upload Failed: \" + err.toString())\n        }\n    }\n\n    deleteFile = async (id: number) => {\n        try {\n            let confirm = window.confirm(\"Are you sure you want to delete this file?\")\n            if (confirm && this.currentFolder) {\n                let res = await Axios.delete<Nas>(`${fileURL}${id}/`)\n                await this.getContent(this.currentFolder.id)\n            }\n        } catch (err) {\n            alert(\"Upload Failed: \" + err.toString())\n        }\n    }\n\n    deleteFolder = async (id: number) => {\n        try {\n            let confirm = window.confirm(\"Are you sure you want to delete this folder?\")\n            if (confirm && this.currentFolder) {\n                let res = await Axios.delete<Nas>(`${url}${id}/`)\n                await this.getContent(this.currentFolder.id)\n            }\n        } catch (err) {\n            alert(\"Upload Failed: \" + err.toString())\n        }\n    }\n\n    createNewFolder = async (data: any) => {\n        if (this.currentFolder) {\n            let res = await Axios.post<Folder>(url, { ...data, parent: this.currentFolder.id ? this.currentFolder.id : null })\n            this.currentFolder.folders.push(res.data)\n        } else {\n            alert(\"Create new folder error: empty parent folder\")\n        }\n    }\n\n    renameFolder = async (id: number, data: any) => {\n        if (this.currentFolder) {\n            let res = await Axios.patch<Folder>(`${url}${id}/`, { ...data, parent: this.currentFolder.id ? this.currentFolder.id : null })\n            let index = this.currentFolder.folders.findIndex((f) => f.id === id)\n            if (index > -1) {\n                this.currentFolder.folders[index] = res.data\n            }\n        } else {\n            alert(\"Rename new folder error: empty parent folder\")\n        }\n    }\n\n    /**\n     * Get document from server.\n     * We need this function because we are getting abstract document object from server\n     * at begining(Which doesn't include content field).\n     * \n     * We will Call this function when user want to edit the file\n     */\n    getDocument = async (id: string | number) => {\n\n        let res = await Axios.get<NasDocument>(`${documentURL}${id}/`)\n        /// Need to parse the content into js object\n        return Promise.resolve({ ...res.data, content: JSON.parse(res.data.content) })\n\n    }\n\n    /**\n     * Create new document\n     * @param name: Name of the document\n     * @param data: EditorJS object\n     */\n    createNewDocument = async (name: string, data: DeltaStatic) => {\n        let res = await Axios.\n            post<NasDocument>(documentURL,\n                {\n                    name: name, parent: this.currentFolder && this.currentFolder.id ? this.currentFolder.id : null,\n                    content: JSON.stringify(data.ops)\n                })\n        this.currentFolder && this.currentFolder.documents.push(res.data)\n\n    }\n\n    /**\n     * Update Document\n     * @param id: document's id\n     * @param data: EditorJS object\n     */\n    updateDocument = async (id: number, name: string, data: DeltaStatic) => {\n\n        let res = await Axios.patch<NasDocument>(`${documentURL}${id}/`, { name, content: JSON.stringify(data.ops) })\n        if (this.currentFolder) {\n            let index = this.currentFolder.documents.findIndex((f) => f.id === id)\n            if (index > -1) {\n                this.currentFolder.documents[index] = res.data\n            }\n\n        }\n\n    }\n\n    /**\n     * Delete document by id\n     * \n     * @param id: document's id\n     */\n    deleteDocument = async (id: number) => {\n        if (this.currentFolder) {\n            console.log(\"delte document\")\n            let res = await Axios.delete<NasDocument>(`${documentURL}${id}/`)\n            await this.getContent(this.currentFolder.id)\n            return Promise.resolve(res.data)\n        } else {\n            alert(\"Create new folder error: empty parent folder\")\n            return Promise.reject()\n        }\n    }\n\n}\n","import { FieldIcon } from \"./Icon\";\nimport { FieldAction } from \"./Action\";\nimport { string } from \"prop-types\";\n\n\ninterface Extra {\n    default?: any;\n    help?: string;\n    related_model?: string;\n    choices?: Choice[]\n\n}\n\nexport enum Widget {\n    text = \"text\",\n    number = \"number\",\n    datetime = \"datetime\",\n    foreignkey = \"foreignkey\",\n    unknown = \"unknown\",\n    select = \"select\",\n    tomanyTable = \"tomany-table\"\n}\n\ninterface Validation {\n    length: Length\n\n}\n\nexport interface Choice {\n    label: string;\n    value: any;\n}\n\ninterface Length {\n    maximum?: number;\n    minimum?: number;\n}\n\nexport interface Schema {\n    label: string;\n    readonly: boolean;\n    /// Could be null\n    extra?: Extra;\n    /// Map's key\n    name: string;\n    /// If widget type is not defined in the enum, then\n    /// return widgetType.unknown\n    widget: Widget | string;\n    required: boolean;\n    /// could be null\n    validations?: Validation;\n    /// this is value will be displayed at screen if set,\n    /// else null\n    value?: any;\n    /// Set this value only if the field includes selection\n    choice?: Choice;\n    /// icon for the field\n    /// this will be set through the params of JSONForm widget\n    icon?: FieldIcon;\n    /// action for the field\n    /// this will be set through the params of JSONForm widget\n    action?: FieldAction;\n\n}\n\n\n\nexport class SchemaList {\n\n    schemaList: Schema[];\n\n    constructor(schemas: Schema[]) {\n        schemas.forEach(s => {\n            if (s.extra && s.extra.default) {\n                s.value = s.extra.default\n            }\n        })\n        this.schemaList = schemas;\n    }\n\n    merge(values: { [key: string]: any }) {\n        this.schemaList = this.schemaList.map((s) => {\n            if (values[s.name]) {\n                let value = values[s.name];\n                if (s.widget == Widget.select) {\n                    let choice: Choice | undefined = s.extra\n                        && s.extra.choices\n                        && s.extra.choices.find((c) => c.value === value)\n                    s.choice = choice;\n                } else if (s.widget == Widget.foreignkey) {\n                    let choice: Choice = value;\n                    s.choice = choice;\n                    s.value = value.value;\n                } else {\n                    s.value = value;\n                }\n            }\n            return s;\n        });\n    }\n\n    onSubmit(): { [key: string]: any } {\n        console.log(this.schemaList)\n        let maps: { [key: string]: any } = {};\n        this.schemaList.filter(s => !s.readonly && s.widget !== Widget.tomanyTable).forEach((s) => maps[s.name] = s.value);\n        console.log(maps)\n        return maps;\n\n    }\n\n}\n","import React, { Component } from \"react\";\nimport { Nas } from \"./nas\";\nimport { RouteComponentProps } from \"react-router\";\n\ninterface RouterProps {\n  id: string;\n}\n\ninterface HomePageContext {\n  nas: Nas;\n  update(): void;\n  isLoading: boolean;\n}\n\ninterface HomePageProps extends RouteComponentProps<RouterProps> {}\n\nexport class HomePageProvider extends Component<\n  HomePageProps,\n  HomePageContext\n> {\n  constructor(props: HomePageProps) {\n    super(props);\n    this.state = {\n      nas: new Nas(),\n      update: this.update,\n      isLoading: false\n    };\n  }\n\n  async componentDidUpdate(oldProps: HomePageProps) {\n    if (this.props.match.params.id !== oldProps.match.params.id) {\n      let id = this.props.match.params.id;\n      await this.fetch(id);\n    }\n  }\n\n  async componentWillMount() {\n    let id = this.props.match.params.id;\n    await this.fetch(id);\n  }\n\n  fetch = async (id: any) => {\n    this.setState({ isLoading: true });\n    const { nas } = this.state;\n    await nas.getContent(id);\n    this.setState({ nas, isLoading: false });\n  };\n\n  update = () => {\n    this.setState({\n      nas: this.state.nas\n    });\n  };\n\n  render() {\n    return (\n      <HomePageContext.Provider value={this.state}>\n        {this.props.children}\n      </HomePageContext.Provider>\n    );\n  }\n}\n\nconst context: HomePageContext = {\n  nas: new Nas(),\n  update: () => {},\n  isLoading: false\n};\n\nexport const HomePageContext = React.createContext(context);\n","import { BaseExtra } from \"./base\";\nimport { Schema } from './Schema';\n\nexport enum ActionTypes {\n    image,\n    qrScan\n}\n\nexport enum ActionDone {\n    getInput,\n    getImage\n}\n\nexport class FieldAction extends BaseExtra<FieldAction>{\n\n    actionTypes: ActionTypes;\n    actionDone: ActionDone;\n    schemaName: string;\n\n    constructor(t: ActionTypes, d: ActionDone, n: string) {\n        super(n);\n        this.schemaName = n;\n        this.actionTypes = t;\n        this.actionDone = d;\n    }\n\n    static merge(schemas: Schema[], values: FieldAction[]): Schema[] {\n        return schemas.map((s) => {\n            values.forEach((f) => {\n                if (f.schemaName == s.name) {\n                    s.action = f;\n                }\n            })\n\n            return s;\n        })\n    }\n\n\n}","import { Schema } from \"./Schema\";\n\nexport abstract class BaseExtra<T> {\n\n    schemaName: string\n\n    constructor(name: string) {\n        this.schemaName = name;\n    }\n\n    /**\n     * Merge with schemas\n     * @param schemas shemas\n     * @param values values you want to merge\n     * @returns new schemas\n     */\n    merge(schemas: [], values: T[]): Schema[] {\n        return []\n    }\n}","import { BaseExtra } from './base';\nimport { Schema } from './Schema';\n\n\nexport class FieldIcon extends BaseExtra<FieldIcon> {\n    iconData: string;\n    schemaName: string;\n\n    constructor(i: string, n: string) {\n        super(n);\n        this.iconData = i;\n        this.schemaName = n;\n    }\n\n    static merge(schemas: Schema[], values: FieldIcon[]): Schema[] {\n        return schemas.map((s) => {\n            values.forEach((f) => {\n                if (f.schemaName == s.name) {\n                    s.icon = f;\n                }\n            })\n            return s;\n        })\n    }\n\n}","import React from \"react\";\nimport { Schema, Widget } from \"../model/Schema\";\nimport { Input, Form, Label } from \"semantic-ui-react\";\n\nexport interface FieldProps {\n  schema: Schema;\n  onSaved(value: any): void;\n}\n\nexport default function JSONSchemaTextField(props: FieldProps) {\n  const { schema, onSaved } = props;\n\n  function hasError() {\n    if (schema.required && schema.value === undefined) {\n      return { content: \"This field is required\", pointing: \"below\" };\n    }\n\n    return;\n  }\n\n  return (\n    <div>\n      <Form.Input\n        data-testid=\"input-field\"\n        control={Input}\n        label={schema.label}\n        error={hasError()}\n        onChange={(e, { value }) => {\n          onSaved(value);\n        }}\n        // defaultValue={\n        //   schema.value ? schema.value : schema.extra && schema.extra.default\n        // }\n        defaultValue={schema.value}\n      ></Form.Input>\n      {schema.extra && schema.extra.help && (\n        <Label color=\"blue\">{schema.extra.help}</Label>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Schema } from \"../model/Schema\";\nimport { Input, Form, Select } from \"semantic-ui-react\";\nimport { FieldProps } from \"./JSONSchemaTextField\";\n\nexport default function JSONSchemaSelectField(props: FieldProps) {\n  const { schema, onSaved } = props;\n\n  function hasError() {\n    if (schema.required && schema.value === undefined) {\n      return { content: \"This field is required\", pointing: \"below\" };\n    }\n\n    return;\n  }\n\n  const renderOptions = () => {\n    if (schema.extra && schema.extra.choices) {\n      return schema.extra.choices.map(c => {\n        return { text: c.label, value: c.value, key: c.label };\n      });\n    }\n    return [];\n  };\n\n  return (\n    <Form.Select\n      data-testid=\"select-field\"\n      control={Select}\n      label={schema.label}\n      options={renderOptions()}\n      value={schema.value}\n      onChange={(e, { value }) => onSaved(value as string)}\n      placeholder={\n        schema.value ? schema.value : schema.extra && schema.extra.default\n      }\n    />\n  );\n}\n","import React, { useState } from \"react\";\nimport { FieldProps } from \"./JSONSchemaTextField\";\nimport {\n  Form,\n  Dropdown,\n  Label,\n  Button,\n  Grid,\n  Modal,\n  Header\n} from \"semantic-ui-react\";\nimport axios from \"axios\";\nimport { Schema, Choice } from \"../model/Schema\";\nimport JSONSchema from \"../JSONSchema\";\nimport { Dialog, DialogContent, DialogTitle } from \"@material-ui/core\";\n\ninterface Props extends FieldProps {\n  url: string;\n  select(choice: Choice): void;\n}\n\nexport default function JSONSchemaForignField(props: Props) {\n  const { schema, onSaved, url } = props;\n  const [list, setList] = useState<any[]>();\n  const [editSchema, setSchema] = useState<Schema[]>();\n  const [selected, setSelect] = useState<number>(\n    schema.choice && schema.choice.value\n  );\n  const [loading, setLoading] = useState(false);\n  const [openDialogIndex, setOpen] = useState(-1);\n\n  function getURL(path?: string) {\n    return `${url}/${path}`;\n  }\n\n  /**\n   * Fetch selection\n   */\n  const fetchList = async () => {\n    if (schema.extra) {\n      let url = getURL(\n        schema.extra.related_model &&\n          schema.extra.related_model.replace(\"-\", \"_\") + \"/\"\n      );\n      let response = await axios.get<any[]>(url);\n\n      return response.data;\n    }\n  };\n\n  /**\n   * Fetch schema\n   */\n  const fetchSchema = async () => {\n    if (schema.extra) {\n      let url = getURL(\n        schema.extra.related_model &&\n          schema.extra.related_model.replace(\"-\", \"_\") + \"/\"\n      );\n      let response = await axios.request({ method: \"OPTIONS\", url: url });\n      setSchema(response.data.fields);\n    }\n  };\n\n  /**\n   * Update forign key\n   * @param data json data\n   */\n  const update = async (data: any) => {\n    setLoading(true);\n    if (schema.extra) {\n      let url = getURL(\n        schema.extra.related_model &&\n          schema.extra.related_model.replace(\"-\", \"_\") + \"/\" + selected + \"/\"\n      );\n      let response = await axios.patch(url, data);\n    }\n    setLoading(false);\n  };\n\n  /**\n   * Create forign key\n   * @param data JSon Data\n   */\n  const create = async (data: any) => {\n    setLoading(true);\n    if (schema.extra) {\n      let url = getURL(\n        schema.extra.related_model &&\n          schema.extra.related_model.replace(\"-\", \"_\") + \"/\"\n      );\n      let response = await axios.post(url, data);\n    }\n    setLoading(false);\n  };\n\n  const options = () => {\n    if (list !== undefined) {\n      return list.map(l => {\n        return { key: l.id, text: l.name, value: l.id };\n      });\n    } else {\n      if (schema.choice) {\n        return [\n          {\n            text: schema.choice.label,\n            key: schema.choice.value,\n            value: schema.choice.value\n          }\n        ];\n      } else {\n        return [];\n      }\n    }\n  };\n\n  return (\n    <Grid>\n      <Grid.Row columns=\"equal\">\n        <Grid.Column width={10}>\n          <Dropdown\n            value={schema.choice && schema.choice.value}\n            labeled\n            placeholder={`Select ${schema.label}`}\n            fluid\n            search\n            selection\n            onChange={(e, { value }) => {\n              setSelect(value as number);\n              onSaved(value as string);\n              if (list) {\n                let selected = list.find(l => l.id === value);\n                props.select({ label: selected.name, value: selected.id });\n              }\n            }}\n            options={options()}\n            onClick={async () => {\n              let result = await fetchList();\n              if (result) {\n                setList(result);\n              }\n            }}\n          />\n        </Grid.Column>\n        <Grid.Column>\n          <Button\n            icon=\"add\"\n            color=\"blue\"\n            onClick={async () => {\n              setOpen(0);\n              await fetchSchema();\n            }}\n          ></Button>\n          <Button\n            icon=\"edit\"\n            color=\"blue\"\n            disabled={schema.value === undefined}\n            onClick={async () => {\n              setOpen(1);\n              let list = await fetchList();\n              setList(list);\n              await fetchSchema();\n            }}\n          ></Button>\n          <Dialog\n            open={openDialogIndex === 0}\n            onClose={() => setOpen(-1)}\n            fullWidth\n          >\n            <DialogTitle>Add {schema.label}</DialogTitle>\n            <DialogContent>\n              {editSchema && (\n                <JSONSchema\n                  schemas={editSchema}\n                  url={url}\n                  onSubmit={create}\n                ></JSONSchema>\n              )}\n            </DialogContent>\n          </Dialog>\n\n          <Dialog\n            open={openDialogIndex === 1}\n            onClose={() => setOpen(-1)}\n            fullWidth\n          >\n            <DialogTitle>Edit {schema.label}</DialogTitle>\n            <DialogContent>\n              {editSchema && (\n                <JSONSchema\n                  schemas={editSchema}\n                  values={list && list.find(l => l.id === selected)}\n                  url={url}\n                  onSubmit={update}\n                  loading={loading}\n                ></JSONSchema>\n              )}\n            </DialogContent>\n          </Dialog>\n        </Grid.Column>\n        {schema.required && !schema.value && (\n          <Grid.Column>\n            <Label tag color=\"red\">\n              Required\n            </Label>\n          </Grid.Column>\n        )}\n      </Grid.Row>\n    </Grid>\n  );\n}\n","import React, { Component } from \"react\";\nimport { Schema, SchemaList, Widget } from \"./model/Schema\";\nimport { FieldAction } from \"./model/Action\";\nimport { FieldIcon } from \"./model/Icon\";\nimport { Form, Button, Container, Label } from \"semantic-ui-react\";\n\nimport \"semantic-ui-css/semantic.min.css\";\nimport JSONSchemaTextField from \"./Components/JSONSchemaTextField\";\nimport JSONSchemaSelectField from \"./Components/JSONSchemaSelectField\";\nimport JSONSchemaForignField from \"./Components/JSONSchemaForignField\";\n\ninterface Props {\n  schemas: Schema[] | any;\n  values?: { [key: string]: any };\n  actions?: FieldAction[];\n  icons?: FieldIcon[];\n  url: string;\n  loading?: boolean;\n  onSubmit?(data: { [key: string]: any }): void;\n}\n\ninterface State {\n  schemaList?: SchemaList;\n  submitSuccess?: boolean;\n}\n\nexport default class JSONSchema extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { schemaList: undefined, submitSuccess: undefined };\n  }\n\n  componentDidMount() {\n    const { schemas, values, icons, actions } = this.props;\n    let schemaList: SchemaList = new SchemaList(schemas);\n\n    if (values) {\n      schemaList.merge(values);\n    }\n    if (icons) {\n      let newSchema = FieldIcon.merge(schemaList.schemaList, icons);\n      schemaList.schemaList = newSchema;\n    }\n    if (actions) {\n      let newSchema = FieldAction.merge(schemaList.schemaList, actions);\n      schemaList.schemaList = newSchema;\n    }\n    this.setState({ schemaList: schemaList });\n  }\n\n  /**\n   * Onsave\n   */\n  onSaved = (value: string, schema: Schema) => {\n    let v: any = value;\n    if (schema.widget === Widget.number) {\n      v = parseInt(value);\n    }\n    schema.value = v;\n    this.setState({\n      schemaList: this.state.schemaList\n    });\n  };\n\n  /**\n   * render field based on schema's type\n   * @param schema Schema\n   */\n  renderField(schema: Schema) {\n    switch (schema.widget) {\n      case Widget.select:\n        return (\n          <JSONSchemaSelectField\n            schema={schema}\n            onSaved={v => this.onSaved(v, schema)}\n          ></JSONSchemaSelectField>\n        );\n      case Widget.foreignkey:\n        return (\n          <JSONSchemaForignField\n            select={choice => {\n              schema.choice = choice;\n              this.setState({\n                schemaList: this.state.schemaList\n              });\n            }}\n            schema={schema}\n            onSaved={v => this.onSaved(v, schema)}\n            url={this.props.url}\n          ></JSONSchemaForignField>\n        );\n      case Widget.text:\n        return (\n          <JSONSchemaTextField\n            schema={schema}\n            onSaved={v => this.onSaved(v, schema)}\n          />\n        );\n      case Widget.number:\n        return (\n          <JSONSchemaTextField\n            schema={schema}\n            onSaved={v => this.onSaved(v, schema)}\n          />\n        );\n      default:\n        return <div key={schema.name}></div>;\n    }\n  }\n\n  render() {\n    const { schemaList, submitSuccess } = this.state;\n    const { loading } = this.props;\n\n    return (\n      <Container>\n        {submitSuccess !== undefined && (\n          <Label basic color={submitSuccess ? \"green\" : \"red\"}>\n            Submitted {submitSuccess ? \"success\" : \"failed\"}\n          </Label>\n        )}\n        <Form loading={loading}>\n          {schemaList &&\n            schemaList.schemaList\n              .filter(s => !s.readonly)\n              .map(s => (\n                <Form.Field key={s.name}>{this.renderField(s)}</Form.Field>\n              ))}\n          <Button\n            loading={loading === true}\n            onClick={async () => {\n              if (schemaList && this.props.onSubmit) {\n                try {\n                  let data = schemaList.onSubmit();\n                  await this.props.onSubmit(data);\n                  this.setState({ submitSuccess: true });\n                } catch (e) {\n                  alert(e);\n                  this.setState({ submitSuccess: false });\n                }\n              }\n            }}\n          >\n            Submit\n          </Button>\n        </Form>\n      </Container>\n    );\n  }\n}\n","import React, { useState, useContext } from \"react\";\nimport {\n  Modal,\n  Segment,\n  Progress,\n  Grid,\n  Button,\n  Icon\n} from \"semantic-ui-react\";\nimport { HomePageContext } from \"../../../models/HomeContext\";\nimport { SchemaList, Schema, Widget } from \"../JSONSchema/model/Schema\";\nimport { JSONSchema } from \"../JSONSchema\";\nimport { Folder } from \"../../../models/Folder\";\n\ninterface Props {\n  selectedFolder: Folder;\n  open: boolean;\n  setOpen(open: boolean): void;\n}\n\ninterface UploadInfo {\n  currentName: string;\n  progress: number;\n  total: number;\n  currentIndex: number;\n}\n\nconst schema: Schema[] = [\n  {\n    name: \"name\",\n    label: \"Folder Name\",\n    readonly: false,\n    required: true,\n    widget: Widget.text\n  }\n];\n\nexport default function UpdateFolderDialog(props: Props) {\n  const { nas, update } = useContext(HomePageContext);\n\n  return (\n    <Modal open={props.open}>\n      <Modal.Header>Select files</Modal.Header>\n      <Modal.Content>\n        <JSONSchema\n          schemas={schema}\n          url=\"\"\n          values={{ name: props.selectedFolder.name }}\n          onSubmit={async data => {\n            try {\n              await nas.renameFolder(props.selectedFolder.id, data);\n              update();\n              setTimeout(() => {\n                props.setOpen(false);\n              }, 300);\n            } catch (err) {\n              throw err;\n            }\n          }}\n        />\n      </Modal.Content>\n      <Modal.Actions>\n        <Button basic color=\"red\" onClick={() => props.setOpen(false)}>\n          <Icon name=\"remove\" /> No\n        </Button>\n      </Modal.Actions>\n    </Modal>\n  );\n}\n","import React, { useState, useContext } from \"react\";\nimport EditorJs from \"react-editor-js\";\nimport { Modal, Button } from \"semantic-ui-react\";\nimport { TextField } from \"@material-ui/core\";\nimport { Document as NasDocument } from \"../../../models/Folder\";\nimport { HomePageContext } from \"../../../models/HomeContext\";\nimport EditorJS from \"@editorjs/editorjs\";\nimport \"react-quill/dist/quill.snow.css\";\nimport ReactQuill, { Quill } from \"react-quill\";\n\ninterface Props {\n  open: boolean;\n  setOpen(open: boolean): void;\n  document?: NasDocument;\n}\n\nexport default function Editor(props: Props) {\n  const [editor, setEditor] = useState<ReactQuill | undefined>();\n  const [name, setName] = useState<string | undefined>();\n  const [isChanged, setIsChanged] = useState(false);\n  const { document } = props;\n  const { nas, update } = useContext(HomePageContext);\n\n  if (name === undefined) {\n    setName(document ? document.name : \"\");\n  }\n\n  return (\n    <Modal open={props.open} centered={false}>\n      <Modal.Header>\n        <TextField\n          value={name}\n          label=\"You Document Title\"\n          onChange={e => {\n            setName(e.target.value);\n          }}\n          fullWidth\n        />\n      </Modal.Header>\n      <Modal.Content>\n        <ReactQuill\n          ref={instance => setEditor(instance != null ? instance : undefined)}\n          defaultValue={document && document.content}\n        />\n      </Modal.Content>\n      <Modal.Actions>\n        <Button\n          onClick={() => {\n            if (isChanged) {\n              let confirm = window.confirm(\n                \"Are you sure you want to exit? You will lose unsave data.\"\n              );\n              if (confirm) {\n                props.setOpen(false);\n              }\n            } else {\n              props.setOpen(false);\n            }\n          }}\n        >\n          close\n        </Button>\n        <Button\n          color=\"blue\"\n          onClick={async () => {\n            try {\n              if (editor && name) {\n                let data = editor.getEditor().getContents();\n                if (document) {\n                  // update current document\n                  await nas.updateDocument(document.id, name, data);\n                } else {\n                  if (name !== \"\") {\n                    await nas.createNewDocument(name, data);\n                  } else {\n                    throw \"Name should not be empty\";\n                  }\n                }\n                update();\n                setName(undefined);\n                props.setOpen(false);\n              }\n            } catch (err) {\n              alert(err.toString());\n            }\n          }}\n        >\n          Save\n        </Button>\n      </Modal.Actions>\n    </Modal>\n  );\n}\n","import React, { useContext, useState } from \"react\";\nimport {\n  Segment,\n  MessageHeader,\n  Message,\n  Icon,\n  Modal,\n  Image,\n  SemanticICONS,\n  Divider,\n  Label,\n  Button,\n  Popup\n} from \"semantic-ui-react\";\nimport { createStyles, Theme, makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport FolderIcon from \"@material-ui/icons/Folder\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport { ListItemSecondaryAction, IconButton } from \"@material-ui/core\";\nimport { HomePageContext } from \"../../../models/HomeContext\";\nimport moment from \"moment\";\nimport path from \"path\";\nimport \"video-react/dist/video-react.css\";\nimport { Folder, Document as NasDocument } from \"../../../models/Folder\";\nimport UpdateFolderDialog from \"./UpdateFolderDialog\";\nimport Editor from \"./Editor\";\nimport { downloadURL } from \"../../../models/urls\";\nimport Axios from \"axios\";\n\nconst { Player } = require(\"video-react\");\n\nconst imageExt = [\".jpg\", \".png\", \".bmp\", \".JPG\", \".gif\"];\nconst videoExt = [\".mov\", \".mp4\", \".avi\", \".m4v\", \".MOV\"];\n\nexport default function ListPanel() {\n  const { nas, isLoading, update } = useContext(HomePageContext);\n  const [selectedDocument, setSelectedDocument] = useState<\n    NasDocument | undefined\n  >();\n  const [imageSrc, setImageSrc] = useState<string | undefined>(undefined);\n  const [videoSrc, setVideoSrc] = useState<string | undefined>(undefined);\n  const [selectedFolder, setSelectedFolder] = useState<Folder | undefined>(\n    undefined\n  );\n\n  function isImage(filepath: string): boolean {\n    return imageExt.includes(path.extname(filepath));\n  }\n\n  function isVideo(filepath: string): boolean {\n    return videoExt.includes(path.extname(filepath));\n  }\n\n  function getIcon(filepath: string): SemanticICONS {\n    if (isImage(filepath)) {\n      return \"images\";\n    } else if (isVideo(filepath)) {\n      return \"file video\";\n    }\n\n    return \"file\";\n  }\n\n  return (\n    <div>\n      <Label style={{ zIndex: 10, position: \"absolute\" }}>\n        Total Size:{\" \"}\n        {nas.currentFolder &&\n          (nas.currentFolder.total_size / 1024 / 1024).toFixed(2)}{\" \"}\n        MB\n      </Label>\n      <Segment\n        placeholder\n        loading={isLoading}\n        style={{ height: window.innerHeight * 0.7, overflow: \"auto\" }}\n      >\n        <List style={{ height: \"100%\" }}>\n          {nas.errorMsg && (\n            <Message error>\n              <MessageHeader>Network Error</MessageHeader>\n              <div>{nas.errorMsg.toString()}</div>\n            </Message>\n          )}\n          {/*Render Folders*/}\n          {nas.currentFolder &&\n            nas.currentFolder.folders.map((f, i) => (\n              <ListItem\n                button\n                key={`folder-${f.id}`}\n                onClick={() => {\n                  window.location.href = `#/home/${f.id}`;\n                }}\n              >\n                <ListItemAvatar>\n                  <Icon circular name=\"folder\" size=\"large\" color=\"grey\"></Icon>\n                </ListItemAvatar>\n                <ListItemText\n                  primary={f.name}\n                  secondary={moment(f.modified_at).format(\"MMM DD, YYYY\")}\n                />\n\n                <ListItemSecondaryAction>\n                  <Button.Group>\n                    <Button\n                      icon\n                      onClick={async () => {\n                        let response = await Axios.post(\n                          `${downloadURL}${f.id}`\n                        );\n\n                        const link = document.createElement(\"a\");\n                        link.href = `${response.data.download_url}`;\n                        console.log(link.href);\n                        document.body.appendChild(link);\n                        link.click();\n                        document.body.removeChild(link);\n                      }}\n                    >\n                      <Icon name=\"download\" />\n                    </Button>\n                    <Button\n                      icon\n                      color=\"blue\"\n                      edge=\"end\"\n                      onClick={async () => {\n                        setSelectedFolder(f);\n                      }}\n                    >\n                      <Icon name=\"edit\"></Icon>\n                    </Button>\n                    <Button\n                      icon\n                      edge=\"end\"\n                      onClick={async () => {\n                        await nas.deleteFolder(f.id);\n                        update();\n                      }}\n                    >\n                      <Icon name=\"trash\"></Icon>\n                    </Button>\n                  </Button.Group>\n                </ListItemSecondaryAction>\n              </ListItem>\n            ))}\n          {/*End Render Folders*/}\n          {/*Render documents*/}\n          {nas.currentFolder &&\n            nas.currentFolder.documents.map((f, i) => (\n              <ListItem\n                button\n                key={`folder-${f.id}`}\n                onClick={async () => {\n                  let document = await nas.getDocument(f.id);\n                  setSelectedDocument(document);\n                }}\n              >\n                <ListItemAvatar>\n                  <Icon\n                    circular\n                    name=\"file pdf\"\n                    size=\"large\"\n                    color=\"red\"\n                  ></Icon>\n                </ListItemAvatar>\n                <ListItemText\n                  primary={f.name}\n                  secondary={moment(f.modified_at).format(\"MMM DD, YYYY\")}\n                />\n\n                <ListItemSecondaryAction>\n                  <Button.Group>\n                    <Button\n                      icon\n                      color=\"blue\"\n                      edge=\"end\"\n                      onClick={async () => {\n                        let document = await nas.getDocument(f.id);\n                        setSelectedDocument(document);\n                      }}\n                    >\n                      <Icon name=\"edit\"></Icon>\n                    </Button>\n                    <Button\n                      icon\n                      edge=\"end\"\n                      onClick={async () => {\n                        await nas.deleteDocument(f.id);\n                        update();\n                      }}\n                    >\n                      <Icon name=\"trash\"></Icon>\n                    </Button>\n                  </Button.Group>\n                </ListItemSecondaryAction>\n              </ListItem>\n            ))}\n\n          {/*End Render documents*/}\n\n          {/*Render Files*/}\n          {nas.currentFolder &&\n            nas.currentFolder.files.map((f, i) => (\n              <ListItem\n                button\n                onClick={() => {\n                  if (isImage(f.file)) {\n                    setImageSrc(f.file);\n                  } else if (isVideo(f.file)) {\n                    console.log(f.file);\n                    setVideoSrc(f.file);\n                  }\n                }}\n                key={`file-${f.id}`}\n              >\n                <ListItemAvatar>\n                  <Icon\n                    name={getIcon(f.file)}\n                    circular\n                    size=\"large\"\n                    color=\"teal\"\n                  />\n                </ListItemAvatar>\n                <ListItemText\n                  primary={path.basename(f.filename)}\n                  secondary={\n                    <React.Fragment>\n                      <label>\n                        {moment(f.modified_at).format(\"MMM DD, YYYY\")}\n                      </label>\n                      <p> {(f.size / 1024 / 1024).toFixed(2)}MB </p>\n                    </React.Fragment>\n                  }\n                />\n                <ListItemSecondaryAction>\n                  <Button.Group>\n                    <Button\n                      icon\n                      edge=\"end\"\n                      color=\"blue\"\n                      aria-label=\"download\"\n                      onClick={() => {\n                        /// Download from link\n                        const link = document.createElement(\"a\");\n                        link.href = `${f.file}`;\n                        document.body.appendChild(link);\n                        link.click();\n                        document.body.removeChild(link);\n                      }}\n                    >\n                      <Icon name=\"download\"></Icon>\n                    </Button>\n\n                    <Button\n                      icon\n                      onClick={async () => {\n                        await nas.deleteFile(f.id);\n                        update();\n                      }}\n                    >\n                      <Icon name=\"trash\"></Icon>\n                    </Button>\n                  </Button.Group>\n                </ListItemSecondaryAction>\n              </ListItem>\n            ))}\n          {/*End Render Files*/}\n        </List>\n\n        {selectedFolder && (\n          <UpdateFolderDialog\n            selectedFolder={selectedFolder}\n            open={selectedFolder !== undefined}\n            setOpen={(value: boolean) => {\n              !value && setSelectedFolder(undefined);\n            }}\n          />\n        )}\n        {selectedDocument && (\n          <Editor\n            open={selectedDocument !== undefined}\n            setOpen={v => {\n              !v && setSelectedDocument(undefined);\n            }}\n            document={selectedDocument}\n          ></Editor>\n        )}\n        <Modal\n          open={imageSrc !== undefined}\n          onClose={() => setImageSrc(undefined)}\n        >\n          <Image src={imageSrc} fluid></Image>\n        </Modal>\n        <Modal\n          open={videoSrc !== undefined}\n          onClose={() => setVideoSrc(undefined)}\n        >\n          <Player>\n            <source src={videoSrc} />\n          </Player>\n        </Modal>\n      </Segment>\n    </div>\n  );\n}\n","import React, { useState, useContext } from \"react\";\nimport {\n  Modal,\n  Segment,\n  Progress,\n  Grid,\n  Button,\n  Icon\n} from \"semantic-ui-react\";\nimport { HomePageContext } from \"../../../models/HomeContext\";\n\ninterface Props {\n  open: boolean;\n  setOpen(open: boolean): void;\n}\n\ninterface UploadInfo {\n  currentName: string;\n  progress: number;\n  total: number;\n  currentIndex: number;\n}\n\nexport default function UploadDialog(props: Props) {\n  const { nas, update } = useContext(HomePageContext);\n\n  const [files, setFiles] = useState<File[]>();\n  const [uploadInfo, setUploadInfo] = useState<UploadInfo>();\n\n  return (\n    <Modal open={props.open}>\n      <Modal.Header>Select Files</Modal.Header>\n      <Modal.Content>\n        <Grid.Row>\n          <input\n            type=\"file\"\n            multiple\n            name=\"Upload file\"\n            onChange={e => {\n              let uploadFiles = e.target.files;\n              if (uploadFiles) {\n                let l: File[] = [];\n                for (var i = 0; i < uploadFiles.length; i++) {\n                  l.push(uploadFiles[i]);\n                }\n                setFiles(l);\n              }\n            }}\n          ></input>\n        </Grid.Row>\n        {uploadInfo && (\n          <Grid.Row style={{ marginTop: 20 }}>\n            <Segment>\n              <Progress\n                percent={uploadInfo.progress}\n                attached=\"top\"\n                color=\"green\"\n                active\n              />\n              {uploadInfo.currentName} {uploadInfo.currentIndex} /{\" \"}\n              {uploadInfo.total}\n              <Progress\n                percent={(uploadInfo.currentIndex / uploadInfo.total) * 100}\n                attached=\"bottom\"\n                color=\"blue\"\n                active\n              />\n            </Segment>\n          </Grid.Row>\n        )}\n      </Modal.Content>\n      <Modal.Actions>\n        <Button basic color=\"red\" onClick={() => props.setOpen(false)}>\n          <Icon name=\"remove\" /> {uploadInfo ? \"Minimize\" : \"Close\"}\n        </Button>\n        <Button\n          disabled={files === undefined}\n          color=\"green\"\n          loading={uploadInfo !== undefined}\n          inverted\n          onClick={async () => {\n            if (files) {\n              await nas.uploadFile(files, (index: number, progress: number) => {\n                setUploadInfo({\n                  total: files.length,\n                  currentIndex: index,\n                  currentName: files[index] ? files[index].name : \"Finished\",\n                  progress: progress\n                });\n              });\n              update();\n              setTimeout(() => {\n                props.setOpen(false);\n                setFiles(undefined);\n                setUploadInfo(undefined);\n              }, 300);\n            }\n          }}\n        >\n          <Icon name=\"checkmark\" /> Upload\n        </Button>\n      </Modal.Actions>\n    </Modal>\n  );\n}\n","import React, { useState, useContext } from \"react\";\nimport {\n  Modal,\n  Segment,\n  Progress,\n  Grid,\n  Button,\n  Icon\n} from \"semantic-ui-react\";\nimport { HomePageContext } from \"../../../models/HomeContext\";\nimport { SchemaList, Schema, Widget } from \"../JSONSchema/model/Schema\";\nimport { JSONSchema } from \"../JSONSchema\";\n\ninterface Props {\n  open: boolean;\n  setOpen(open: boolean): void;\n}\n\ninterface UploadInfo {\n  currentName: string;\n  progress: number;\n  total: number;\n  currentIndex: number;\n}\n\nconst schema: Schema[] = [\n  {\n    name: \"name\",\n    label: \"Folder Name\",\n    readonly: false,\n    required: true,\n    widget: Widget.text\n  }\n];\n\nexport default function NewFolderDialog(props: Props) {\n  const { nas, update } = useContext(HomePageContext);\n\n  return (\n    <Modal open={props.open}>\n      <Modal.Header>New Folder</Modal.Header>\n      <Modal.Content>\n        <JSONSchema\n          schemas={schema}\n          url=\"\"\n          onSubmit={async data => {\n            try {\n              await nas.createNewFolder(data);\n              update();\n              setTimeout(() => {\n                props.setOpen(false);\n              }, 300);\n            } catch (err) {\n              throw err;\n            }\n          }}\n        />\n      </Modal.Content>\n      <Modal.Actions>\n        <Button basic color=\"red\" onClick={() => props.setOpen(false)}>\n          <Icon name=\"remove\" /> No\n        </Button>\n      </Modal.Actions>\n    </Modal>\n  );\n}\n","import React, { useContext, useState } from \"react\";\nimport { Button, Icon, Grid, Breadcrumb, Segment } from \"semantic-ui-react\";\nimport { Link, NavLink } from \"react-router-dom\";\nimport { HomePageContext } from \"../../../models/HomeContext\";\nimport UploadDialog from \"./UploadDialog\";\nimport NewFolderDialog from \"./NewFolderDialog\";\nimport Editor from \"./Editor\";\n\nexport default function Actions() {\n  const { nas } = useContext(HomePageContext);\n\n  const [open, setOpen] = useState(false);\n  const [openNewFolder, setOpenNewFolder] = useState(false);\n  const [openEditor, setOpenEditor] = useState(false);\n\n  return (\n    <Grid>\n      <Grid.Column floated=\"left\" width={10} textAlign=\"left\">\n        <Breadcrumb size=\"large\">\n          <Breadcrumb.Section>\n            <NavLink to=\"/home\">Root</NavLink>\n            <Breadcrumb.Divider icon=\"right chevron\" />\n          </Breadcrumb.Section>\n\n          {nas.menus.map(m => (\n            <Breadcrumb.Section key={`menu-${m.id}`}>\n              <NavLink to={`/home/${m.id}`}>{m.name}</NavLink>\n              <Breadcrumb.Divider icon=\"right chevron\" />\n            </Breadcrumb.Section>\n          ))}\n        </Breadcrumb>\n      </Grid.Column>\n      <Grid.Column floated=\"right\" width={6} textAlign=\"right\">\n        <Button.Group>\n          <Button icon onClick={() => setOpenNewFolder(true)}>\n            <Icon name=\"folder\" />\n          </Button>\n          <Button\n            icon\n            color=\"blue\"\n            onClick={() => setOpen(true)}\n            disabled={nas.currentFolder === undefined}\n          >\n            <Icon name=\"upload\" />\n          </Button>\n          <Button\n            icon\n            color=\"orange\"\n            onClick={() => setOpenEditor(true)}\n            disabled={nas.currentFolder === undefined}\n          >\n            <Icon name=\"edit\" />\n          </Button>\n        </Button.Group>\n      </Grid.Column>\n      <UploadDialog open={open} setOpen={setOpen}></UploadDialog>\n      <NewFolderDialog\n        open={openNewFolder}\n        setOpen={setOpenNewFolder}\n      ></NewFolderDialog>\n      <Editor open={openEditor} setOpen={setOpenEditor}></Editor>\n    </Grid>\n  );\n}\n","import React, { Component } from \"react\";\nimport { Nas } from \"./nas\";\nimport { RouteComponentProps } from \"react-router\";\nimport { SystemInfo } from \"./Folder\";\nimport Axios from \"axios\";\nimport { systemURL } from \"./urls\";\n\ninterface SystemContext {\n  systemInfo?: SystemInfo;\n}\n\ninterface SystemProps {}\n\nexport class SystemProvider extends Component<SystemProps, SystemContext> {\n  constructor(props: SystemProps) {\n    super(props);\n    this.state = {};\n  }\n\n  async componentDidMount() {\n    let info = await this.fetchSystemInfo();\n    if (info) {\n      this.setState({ systemInfo: info });\n    }\n    setInterval(async () => {\n      let info = await this.fetchSystemInfo();\n      console.log(\"Update system info\");\n      if (info) {\n        this.setState({ systemInfo: info });\n      }\n    }, 20000);\n  }\n\n  fetchSystemInfo = async (): Promise<SystemInfo> => {\n    let info = await Axios.get<SystemInfo>(systemURL);\n    return Promise.resolve(info.data);\n  };\n\n  render() {\n    return (\n      <SystemContext.Provider value={this.state}>\n        {this.props.children}\n      </SystemContext.Provider>\n    );\n  }\n}\n\nconst context: SystemContext = {};\n\nexport const SystemContext = React.createContext(context);\n","import React, { useContext } from \"react\";\nimport { Progress, Message } from \"semantic-ui-react\";\nimport { SystemContext } from \"../../../models/SystemContext\";\n\nexport default function ComputerStatus() {\n  const { systemInfo } = useContext(SystemContext);\n  if (systemInfo === undefined) {\n    return (\n      <Message>\n        <p>No Info Avaliable currently</p>\n      </Message>\n    );\n  }\n  return (\n    <div>\n      <span>\n        Used Sapce: {(systemInfo.disk.used / 1024 / 1024).toFixed(2)}MB/\n        {(systemInfo.disk.total / 1024 / 1024).toFixed(2)}MB\n      </span>\n      <Progress\n        percent={((systemInfo.disk.used / systemInfo.disk.total) * 100).toFixed(\n          2\n        )}\n        progress\n        color=\"green\"\n      />\n    </div>\n  );\n}\n","import React from \"react\";\nimport Header from \"./components/Header\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport ListPanel from \"./components/ListPanel\";\nimport { Container, Segment, Progress } from \"semantic-ui-react\";\nimport Actions from \"./components/Actions\";\nimport ComputerStatus from \"./components/ComputerStatus\";\n\nexport function HomePage() {\n  return (\n    <div id=\"home\">\n      <Container>\n        <Header />\n        <Segment>\n          <Actions />\n          <ListPanel />\n          <ComputerStatus />\n        </Segment>\n      </Container>\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  PieChart,\n  Pie,\n  Legend,\n  Tooltip,\n  ResponsiveContainer,\n  Cell\n} from \"recharts\";\nimport { Segment } from \"semantic-ui-react\";\n\ninterface Props {\n  title: string;\n  used: number;\n  total: number;\n  color: string;\n  color2: string;\n}\nconst data02 = [\n  { name: \"Group A\", value: 400 },\n  { name: \"Group B\", value: 300 },\n  { name: \"Group C\", value: 300 },\n  { name: \"Group D\", value: 200 }\n];\nexport default function PercentageChart(props: Props) {\n  const { title, used, total, color, color2 } = props;\n  let data = [\n    {\n      name: \"Used\",\n      value: used\n    },\n    { name: \"Available\", value: total - used }\n  ];\n\n  return (\n    <Segment>\n      <ResponsiveContainer\n        minHeight={300}\n        height=\"100%\"\n        width=\"100%\"\n        minWidth={200}\n      >\n        <PieChart>\n          <Pie\n            data={data}\n            dataKey=\"value\"\n            label\n            fill={color}\n            isAnimationActive={false}\n          >\n            <Cell fill={color}></Cell>\n            <Cell fill={color2}></Cell>\n          </Pie>\n\n          <Tooltip></Tooltip>\n        </PieChart>\n      </ResponsiveContainer>\n      <span>{title}</span>\n    </Segment>\n  );\n}\n","import React, { useContext } from \"react\";\nimport { Container, Grid, Segment } from \"semantic-ui-react\";\nimport { SystemContext } from \"../../models/SystemContext\";\nimport PercentageChart from \"./PercentageChart\";\n\nexport default function SystemInfoPage() {\n  const { systemInfo } = useContext(SystemContext);\n  if (systemInfo === undefined) {\n    return <div>Infomation Not Available</div>;\n  }\n\n  return (\n    <div id=\"home\" style={{ width: \"100%\", color: \"black\" }}>\n      <Container>\n        <h1>System Info</h1>\n        <Grid columns={2}>\n          <Grid.Column>\n            <PercentageChart\n              used={Math.round(systemInfo.disk.used / 1024 / 1024)}\n              total={Math.round(systemInfo.disk.total / 1024 / 1024)}\n              title=\"Disk(MB)\"\n              color=\"#0088FE\"\n              color2=\"orange\"\n            />\n          </Grid.Column>\n          <Grid.Column>\n            <PercentageChart\n              used={Math.round(systemInfo.memory.used / 1024 / 1024)}\n              total={Math.round(systemInfo.memory.total / 1024 / 1024)}\n              title=\"Memory(MB)\"\n              color=\"#0088FE\"\n              color2=\"orange\"\n            />\n          </Grid.Column>\n          <Grid.Column>\n            <PercentageChart\n              used={systemInfo.cpu}\n              total={100}\n              title=\"CPU Usage(Percentage)\"\n              color=\"#0088FE\"\n              color2=\"orange\"\n            />\n          </Grid.Column>\n          <Grid.Column>\n            <Segment style={{ height: \"100%\" }}>\n              <h4>Temperature</h4>\n              <h1>\n                {systemInfo.temperature\n                  ? systemInfo.temperature.toFixed(1)\n                  : \"None\"}\n              </h1>\n            </Segment>\n          </Grid.Column>\n          <Grid.Column>\n            <Segment style={{ height: \"100%\" }}>\n              <h4>Humidity</h4>\n              <h1>\n                {systemInfo.humidity ? systemInfo.humidity.toFixed(1) : \"None\"}\n              </h1>\n            </Segment>\n          </Grid.Column>\n          <Grid.Column>\n            <Segment style={{ height: \"100%\" }}>\n              <h4>Pressure</h4>\n              <h1>\n                {systemInfo.pressure ? systemInfo.pressure.toFixed(2) : \"None\"}\n              </h1>\n            </Segment>\n          </Grid.Column>\n        </Grid>\n      </Container>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { I18nProvider } from \"@lingui/react\";\n\nReactDOM.render(\n  <I18nProvider catalogs={{}}>\n    <App />\n  </I18nProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { Component, useState } from \"react\";\nimport \"./App.css\";\nimport {\n  HashRouter as Router,\n  Route,\n  Link,\n  NavLink,\n  Redirect\n} from \"react-router-dom\";\nimport { HomePage } from \"./components/pages/home/HomePage\";\nimport { HomePageProvider } from \"./components/models/HomeContext\";\nimport { SystemProvider } from \"./components/models/SystemContext\";\nimport SystemInfoPage from \"./components/pages/systemInfo/SystemInfoPage\";\nimport { Sidebar, Menu, Icon, Button } from \"semantic-ui-react\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport { IconButton } from \"@material-ui/core\";\n\nexport default function App() {\n  const [visible, setVisible] = useState(false);\n  const [showMenu, setShowMenu] = useState(false);\n\n  return (\n    <SystemProvider>\n      <Router>\n        <Sidebar.Pushable style={{ margin: 0 }}>\n          <Sidebar\n            style={{ boxShadow: \"none\", border: \"none\" }}\n            as={Menu}\n            animation=\"push\"\n            icon=\"labeled\"\n            onHide={() => setVisible(false)}\n            vertical\n            visible={visible}\n            width=\"thin\"\n          >\n            <Menu.Item as=\"a\" href=\"#/home\">\n              <Icon name=\"home\" />\n              Home\n            </Menu.Item>\n            <Menu.Item as=\"a\" href=\"#/info\">\n              <Icon name=\"info\" />\n              System Info\n            </Menu.Item>\n          </Sidebar>\n          <Sidebar.Pusher>\n            {showMenu && (\n              <IconButton\n                onClick={() => setVisible(!visible)}\n                style={{ position: \"absolute\" }}\n              >\n                <MenuIcon />\n              </IconButton>\n            )}\n            <div style={{ height: \"100%\" }}>\n              <Route exact path=\"/\" component={() => <Redirect to=\"/home\" />} />\n              <Route\n                exact\n                path=\"/home/:id?\"\n                component={(props: any) => {\n                  setShowMenu(true);\n                  return (\n                    <HomePageProvider {...props}>\n                      <HomePage></HomePage>\n                    </HomePageProvider>\n                  );\n                }}\n              />\n\n              <Route\n                exact\n                path=\"/info\"\n                component={(props: any) => {\n                  setShowMenu(true);\n                  return <SystemInfoPage />;\n                }}\n              />\n            </div>\n          </Sidebar.Pusher>\n        </Sidebar.Pushable>\n      </Router>\n    </SystemProvider>\n  );\n}\n"],"sourceRoot":""}