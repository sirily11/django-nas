{"version":3,"sources":["components/pages/home/components/Header.tsx","components/models/urls.ts","components/models/nas.ts","components/pages/home/JSONSchema/model/Schema.ts","components/models/HomeContext.tsx","components/pages/home/JSONSchema/model/Action.ts","components/pages/home/JSONSchema/model/base.ts","components/pages/home/JSONSchema/model/Icon.ts","components/pages/home/JSONSchema/Components/JSONSchemaTextField.tsx","components/pages/home/JSONSchema/Components/JSONSchemaSelectField.tsx","components/pages/home/JSONSchema/Components/JSONSchemaForignField.tsx","components/pages/home/JSONSchema/JSONSchema.tsx","components/pages/home/components/UpdateFolderDialog.tsx","components/pages/home/components/Editor.tsx","components/pages/home/components/ListPanel.tsx","components/pages/home/components/UploadDialog.tsx","components/pages/home/components/NewFolderDialog.tsx","components/pages/home/components/Actions.tsx","components/models/SystemContext.tsx","components/pages/home/components/ComputerStatus.tsx","components/pages/home/HomePage.tsx","components/pages/systemInfo/PercentageChart.tsx","components/pages/systemInfo/SystemInfoPage.tsx","serviceWorker.js","index.js","App.tsx"],"names":["Header","Grid","columns","divided","style","margin","Row","Column","color","Icon","name","size","systemURL","url","Widget","Nas","menus","currentFolder","errorMsg","getContent","id","a","u","Axios","get","response","data","parents","undefined","uploadFile","files","onUpload","index","f","formData","FormData","append","toString","post","headers","onUploadProgress","progress","p","Math","round","loaded","total","res","push","total_size","alert","deleteFile","window","confirm","delete","deleteFolder","createNewFolder","parent","folders","renameFolder","patch","findIndex","getDocument","Promise","resolve","content","JSON","parse","reject","createNewDocument","stringify","documents","updateDocument","deleteDocument","console","log","this","HomePageProvider","props","fetch","setState","isLoading","nas","state","update","oldProps","match","params","HomePageContext","Provider","value","children","Component","context","React","createContext","ActionTypes","ActionDone","SchemaList","schemas","schemaList","forEach","s","extra","default","values","map","widget","select","choice","choices","find","c","foreignkey","maps","filter","readonly","tomanyTable","BaseExtra","schemaName","FieldAction","t","d","n","actionTypes","actionDone","action","FieldIcon","i","iconData","icon","JSONSchemaTextField","schema","onSaved","Form","Input","data-testid","control","label","error","required","pointing","hasError","onChange","e","defaultValue","help","Label","JSONSchemaSelectField","Select","options","text","key","placeholder","JSONSchemaForignField","useState","list","setList","editSchema","setSchema","selected","setSelect","loading","setLoading","openDialogIndex","setOpen","getURL","path","fetchList","related_model","replace","axios","fetchSchema","request","method","fields","create","width","Dropdown","labeled","fluid","search","selection","l","onClick","result","Button","disabled","Dialog","open","onClose","fullWidth","DialogTitle","DialogContent","onSubmit","tag","JSONSchema","v","number","parseInt","submitSuccess","icons","actions","merge","newSchema","Container","basic","Field","renderField","UpdateFolderDialog","useContext","Modal","Content","selectedFolder","setTimeout","Actions","Editor","editor","setEditor","setName","isChanged","setIsChanged","document","centered","TextField","target","instanceRef","instance","save","Player","require","imageExt","videoExt","ListPanel","selectedDocument","setSelectedDocument","imageSrc","setImageSrc","videoSrc","setVideoSrc","setSelectedFolder","isImage","filepath","includes","extname","isVideo","Segment","attached","toFixed","List","Message","MessageHeader","ListItem","button","location","href","ListItemAvatar","circular","ListItemText","primary","secondary","moment","modified_at","format","ListItemSecondaryAction","Group","edge","file","basename","filename","Fragment","aria-label","link","createElement","body","appendChild","click","removeChild","Image","src","UploadDialog","setFiles","uploadInfo","setUploadInfo","type","multiple","uploadFiles","length","marginTop","Progress","percent","active","currentName","currentIndex","inverted","NewFolderDialog","openNewFolder","setOpenNewFolder","openEditor","setOpenEditor","floated","textAlign","Breadcrumb","Section","to","Divider","m","SystemProvider","fetchSystemInfo","info","systemInfo","setInterval","SystemContext","ComputerStatus","disk","used","HomePage","PercentageChart","title","color2","minHeight","height","minWidth","dataKey","fill","isAnimationActive","SystemInfoPage","parseFloat","memory","cpu","Boolean","hostname","ReactDOM","render","catalogs","visible","setVisible","Sidebar","Pushable","boxShadow","border","as","Menu","animation","onHide","vertical","Item","Pusher","IconButton","exact","component","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0b1255e4.chunk.js","sourcesContent":["import React from \"react\";\nimport { Grid, Image, Icon } from \"semantic-ui-react\";\n\nexport default function Header() {\n  return (\n    <Grid columns={2} divided style={{ margin: 10 }}>\n      <Grid.Row>\n        <Grid.Column>\n          <h1>Raspberry NAS</h1>\n        </Grid.Column>\n        <Grid.Column color=\"blue\">\n          <Icon name=\"database\" size=\"huge\"></Icon>\n        </Grid.Column>\n      </Grid.Row>\n    </Grid>\n  );\n}\n","export const systemURL = \"/system/\"\nexport const url = \"/api/folder/\"\nexport const fileURL = \"/api/file/\"\nexport const documentURL = \"/api/document/\"","import Axios from \"axios\"\nimport { Folder, Parent, File as NasFile, Document as NasDocument } from './Folder';\nimport { number } from \"@lingui/core\";\nimport { OutputData } from \"@editorjs/editorjs\";\nimport { systemURL, url, documentURL, fileURL } from \"./urls\"\n\n\n\ntype UploadProgressCallback = (index: number, progress: number) => void\n\n\nexport class Nas {\n    menus: Parent[]\n    currentFolder?: Folder\n    errorMsg?: string\n\n    constructor() {\n        this.menus = []\n\n    }\n\n    getContent = async (id?: number | string) => {\n        try {\n            let u = id ? `${url}${id}/` : url\n            let response = await Axios.get<Folder>(u)\n            const { data } = response\n            this.menus = data.parents\n            this.currentFolder = data\n            this.errorMsg = undefined\n        } catch (err) {\n            this.errorMsg = err\n            this.currentFolder = undefined\n        }\n    }\n\n    /**\n     * Upload file to server.\n     * If upload fail, will show alert dialog\n     * @param files: List of files\n     * @param onUpload: callback function\n     */\n    uploadFile = async (files: File[], onUpload: (index: number, progress: number) => void) => {\n        try {\n\n            let index = 0;\n            for (let f of files) {\n                if (this.currentFolder) {\n                    onUpload(index, 0);\n                    let formData = new FormData()\n                    formData.append(\"file\", f)\n                    this.currentFolder.id && formData.append(\"parent\", this.currentFolder.id.toString())\n                    let res = await Axios.post<NasFile>(fileURL, formData,\n                        {\n                            headers: { 'Content-Type': 'multipart/form-data' },\n                            onUploadProgress: (progress) => {\n                                let p = Math.round((progress.loaded * 100) / progress.total);\n                                onUpload(index, p)\n\n                            }\n\n                        })\n                    this.currentFolder.files.push(res.data)\n                    this.currentFolder.total_size += res.data.size\n\n\n                }\n                index += 1\n            }\n            onUpload(index, 100);\n        } catch (err) {\n            alert(\"Upload Failed: \" + err.toString())\n        }\n    }\n\n    deleteFile = async (id: number) => {\n        try {\n            let confirm = window.confirm(\"Are you sure you want to delete this file?\")\n            if (confirm && this.currentFolder) {\n                let res = await Axios.delete<Nas>(`${fileURL}${id}/`)\n                await this.getContent(this.currentFolder.id)\n            }\n        } catch (err) {\n            alert(\"Upload Failed: \" + err.toString())\n        }\n    }\n\n    deleteFolder = async (id: number) => {\n        try {\n            let confirm = window.confirm(\"Are you sure you want to delete this folder?\")\n            if (confirm && this.currentFolder) {\n                let res = await Axios.delete<Nas>(`${url}${id}/`)\n                await this.getContent(this.currentFolder.id)\n            }\n        } catch (err) {\n            alert(\"Upload Failed: \" + err.toString())\n        }\n    }\n\n    createNewFolder = async (data: any) => {\n        if (this.currentFolder) {\n            let res = await Axios.post<Folder>(url, { ...data, parent: this.currentFolder.id ? this.currentFolder.id : null })\n            this.currentFolder.folders.push(res.data)\n        } else {\n            alert(\"Create new folder error: empty parent folder\")\n        }\n    }\n\n    renameFolder = async (id: number, data: any) => {\n        if (this.currentFolder) {\n            let res = await Axios.patch<Folder>(`${url}${id}/`, { ...data, parent: this.currentFolder.id ? this.currentFolder.id : null })\n            let index = this.currentFolder.folders.findIndex((f) => f.id === id)\n            if (index > -1) {\n                this.currentFolder.folders[index] = res.data\n            }\n        } else {\n            alert(\"Rename new folder error: empty parent folder\")\n        }\n    }\n\n    /**\n     * Get document from server.\n     * We need this function because we are getting abstract document object from server\n     * at begining(Which doesn't include content field).\n     * \n     * We will Call this function when user want to edit the file\n     */\n    getDocument = async (id: number) => {\n        if (this.currentFolder) {\n            let res = await Axios.get<NasDocument>(`${documentURL}${id}/`)\n            /// Need to parse the content into js object\n            return Promise.resolve({ ...res.data, content: JSON.parse(res.data.content) })\n        } else {\n            alert(\"Create new folder error: empty parent folder\")\n            return Promise.reject()\n        }\n    }\n\n    /**\n     * Create new document\n     * @param name: Name of the document\n     * @param data: EditorJS object\n     */\n    createNewDocument = async (name: string, data: OutputData) => {\n        if (this.currentFolder) {\n            let res = await Axios.\n                post<NasDocument>(documentURL,\n                    {\n                        name: name, parent: this.currentFolder.id ? this.currentFolder.id : null,\n                        content: JSON.stringify(data)\n                    })\n            this.currentFolder.documents.push(res.data)\n        } else {\n            alert(\"Create new Document error: empty parent folder\")\n        }\n    }\n\n    /**\n     * Update Document\n     * @param id: document's id\n     * @param data: EditorJS object\n     */\n    updateDocument = async (id: number, name: string, data: OutputData) => {\n        if (this.currentFolder) {\n            let res = await Axios.patch<NasDocument>(`${documentURL}${id}/`, { name, content: JSON.stringify(data), parent: this.currentFolder.id ? this.currentFolder.id : null })\n            let index = this.currentFolder.documents.findIndex((f) => f.id === id)\n            if (index > -1) {\n                this.currentFolder.documents[index] = res.data\n            }\n        } else {\n            alert(\"Update new document error: empty parent folder\")\n        }\n    }\n\n    /**\n     * Delete document by id\n     * \n     * @param id: document's id\n     */\n    deleteDocument = async (id: number) => {\n        if (this.currentFolder) {\n            console.log(\"delte document\")\n            let res = await Axios.delete<NasDocument>(`${documentURL}${id}/`)\n            await this.getContent(this.currentFolder.id)\n            return Promise.resolve(res.data)\n        } else {\n            alert(\"Create new folder error: empty parent folder\")\n            return Promise.reject()\n        }\n    }\n\n}\n","import { FieldIcon } from \"./Icon\";\nimport { FieldAction } from \"./Action\";\nimport { string } from \"prop-types\";\n\n\ninterface Extra {\n    default?: any;\n    help?: string;\n    related_model?: string;\n    choices?: Choice[]\n\n}\n\nexport enum Widget {\n    text = \"text\",\n    number = \"number\",\n    datetime = \"datetime\",\n    foreignkey = \"foreignkey\",\n    unknown = \"unknown\",\n    select = \"select\",\n    tomanyTable = \"tomany-table\"\n}\n\ninterface Validation {\n    length: Length\n\n}\n\nexport interface Choice {\n    label: string;\n    value: any;\n}\n\ninterface Length {\n    maximum?: number;\n    minimum?: number;\n}\n\nexport interface Schema {\n    label: string;\n    readonly: boolean;\n    /// Could be null\n    extra?: Extra;\n    /// Map's key\n    name: string;\n    /// If widget type is not defined in the enum, then\n    /// return widgetType.unknown\n    widget: Widget | string;\n    required: boolean;\n    /// could be null\n    validations?: Validation;\n    /// this is value will be displayed at screen if set,\n    /// else null\n    value?: any;\n    /// Set this value only if the field includes selection\n    choice?: Choice;\n    /// icon for the field\n    /// this will be set through the params of JSONForm widget\n    icon?: FieldIcon;\n    /// action for the field\n    /// this will be set through the params of JSONForm widget\n    action?: FieldAction;\n\n}\n\n\n\nexport class SchemaList {\n\n    schemaList: Schema[];\n\n    constructor(schemas: Schema[]) {\n        schemas.forEach(s => {\n            if (s.extra && s.extra.default) {\n                s.value = s.extra.default\n            }\n        })\n        this.schemaList = schemas;\n    }\n\n    merge(values: { [key: string]: any }) {\n        this.schemaList = this.schemaList.map((s) => {\n            if (values[s.name]) {\n                let value = values[s.name];\n                if (s.widget == Widget.select) {\n                    let choice: Choice | undefined = s.extra\n                        && s.extra.choices\n                        && s.extra.choices.find((c) => c.value === value)\n                    s.choice = choice;\n                } else if (s.widget == Widget.foreignkey) {\n                    let choice: Choice = value;\n                    s.choice = choice;\n                    s.value = value.value;\n                } else {\n                    s.value = value;\n                }\n            }\n            return s;\n        });\n    }\n\n    onSubmit(): { [key: string]: any } {\n        console.log(this.schemaList)\n        let maps: { [key: string]: any } = {};\n        this.schemaList.filter(s => !s.readonly && s.widget !== Widget.tomanyTable).forEach((s) => maps[s.name] = s.value);\n        console.log(maps)\n        return maps;\n\n    }\n\n}\n","import React, { Component } from \"react\";\nimport { Nas } from \"./nas\";\nimport { RouteComponentProps } from \"react-router\";\n\ninterface RouterProps {\n  id: string;\n}\n\ninterface HomePageContext {\n  nas: Nas;\n  update(): void;\n  isLoading: boolean;\n}\n\ninterface HomePageProps extends RouteComponentProps<RouterProps> {}\n\nexport class HomePageProvider extends Component<\n  HomePageProps,\n  HomePageContext\n> {\n  constructor(props: HomePageProps) {\n    super(props);\n    this.state = {\n      nas: new Nas(),\n      update: this.update,\n      isLoading: false\n    };\n  }\n\n  async componentDidUpdate(oldProps: HomePageProps) {\n    if (this.props.match.params.id !== oldProps.match.params.id) {\n      let id = this.props.match.params.id;\n      await this.fetch(id);\n    }\n  }\n\n  async componentWillMount() {\n    let id = this.props.match.params.id;\n    await this.fetch(id);\n  }\n\n  fetch = async (id: any) => {\n    this.setState({ isLoading: true });\n    const { nas } = this.state;\n    await nas.getContent(id);\n    this.setState({ nas, isLoading: false });\n  };\n\n  update = () => {\n    this.setState({\n      nas: this.state.nas\n    });\n  };\n\n  render() {\n    return (\n      <HomePageContext.Provider value={this.state}>\n        {this.props.children}\n      </HomePageContext.Provider>\n    );\n  }\n}\n\nconst context: HomePageContext = {\n  nas: new Nas(),\n  update: () => {},\n  isLoading: false\n};\n\nexport const HomePageContext = React.createContext(context);\n","import { BaseExtra } from \"./base\";\nimport { Schema } from './Schema';\n\nexport enum ActionTypes {\n    image,\n    qrScan\n}\n\nexport enum ActionDone {\n    getInput,\n    getImage\n}\n\nexport class FieldAction extends BaseExtra<FieldAction>{\n\n    actionTypes: ActionTypes;\n    actionDone: ActionDone;\n    schemaName: string;\n\n    constructor(t: ActionTypes, d: ActionDone, n: string) {\n        super(n);\n        this.schemaName = n;\n        this.actionTypes = t;\n        this.actionDone = d;\n    }\n\n    static merge(schemas: Schema[], values: FieldAction[]): Schema[] {\n        return schemas.map((s) => {\n            values.forEach((f) => {\n                if (f.schemaName == s.name) {\n                    s.action = f;\n                }\n            })\n\n            return s;\n        })\n    }\n\n\n}","import { Schema } from \"./Schema\";\n\nexport abstract class BaseExtra<T> {\n\n    schemaName: string\n\n    constructor(name: string) {\n        this.schemaName = name;\n    }\n\n    /**\n     * Merge with schemas\n     * @param schemas shemas\n     * @param values values you want to merge\n     * @returns new schemas\n     */\n    merge(schemas: [], values: T[]): Schema[] {\n        return []\n    }\n}","import { BaseExtra } from './base';\nimport { Schema } from './Schema';\n\n\nexport class FieldIcon extends BaseExtra<FieldIcon> {\n    iconData: string;\n    schemaName: string;\n\n    constructor(i: string, n: string) {\n        super(n);\n        this.iconData = i;\n        this.schemaName = n;\n    }\n\n    static merge(schemas: Schema[], values: FieldIcon[]): Schema[] {\n        return schemas.map((s) => {\n            values.forEach((f) => {\n                if (f.schemaName == s.name) {\n                    s.icon = f;\n                }\n            })\n            return s;\n        })\n    }\n\n}","import React from \"react\";\nimport { Schema, Widget } from \"../model/Schema\";\nimport { Input, Form, Label } from \"semantic-ui-react\";\n\nexport interface FieldProps {\n  schema: Schema;\n  onSaved(value: any): void;\n}\n\nexport default function JSONSchemaTextField(props: FieldProps) {\n  const { schema, onSaved } = props;\n\n  function hasError() {\n    if (schema.required && schema.value === undefined) {\n      return { content: \"This field is required\", pointing: \"below\" };\n    }\n\n    return;\n  }\n\n  return (\n    <div>\n      <Form.Input\n        data-testid=\"input-field\"\n        control={Input}\n        label={schema.label}\n        error={hasError()}\n        onChange={(e, { value }) => {\n          onSaved(value);\n        }}\n        // defaultValue={\n        //   schema.value ? schema.value : schema.extra && schema.extra.default\n        // }\n        defaultValue={schema.value}\n      ></Form.Input>\n      {schema.extra && schema.extra.help && (\n        <Label color=\"blue\">{schema.extra.help}</Label>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Schema } from \"../model/Schema\";\nimport { Input, Form, Select } from \"semantic-ui-react\";\nimport { FieldProps } from \"./JSONSchemaTextField\";\n\nexport default function JSONSchemaSelectField(props: FieldProps) {\n  const { schema, onSaved } = props;\n\n  function hasError() {\n    if (schema.required && schema.value === undefined) {\n      return { content: \"This field is required\", pointing: \"below\" };\n    }\n\n    return;\n  }\n\n  const renderOptions = () => {\n    if (schema.extra && schema.extra.choices) {\n      return schema.extra.choices.map(c => {\n        return { text: c.label, value: c.value, key: c.label };\n      });\n    }\n    return [];\n  };\n\n  return (\n    <Form.Select\n      data-testid=\"select-field\"\n      control={Select}\n      label={schema.label}\n      options={renderOptions()}\n      value={schema.value}\n      onChange={(e, { value }) => onSaved(value as string)}\n      placeholder={\n        schema.value ? schema.value : schema.extra && schema.extra.default\n      }\n    />\n  );\n}\n","import React, { useState } from \"react\";\nimport { FieldProps } from \"./JSONSchemaTextField\";\nimport {\n  Form,\n  Dropdown,\n  Label,\n  Button,\n  Grid,\n  Modal,\n  Header\n} from \"semantic-ui-react\";\nimport axios from \"axios\";\nimport { Schema, Choice } from \"../model/Schema\";\nimport JSONSchema from \"../JSONSchema\";\nimport { Dialog, DialogContent, DialogTitle } from \"@material-ui/core\";\n\ninterface Props extends FieldProps {\n  url: string;\n  select(choice: Choice): void;\n}\n\nexport default function JSONSchemaForignField(props: Props) {\n  const { schema, onSaved, url } = props;\n  const [list, setList] = useState<any[]>();\n  const [editSchema, setSchema] = useState<Schema[]>();\n  const [selected, setSelect] = useState<number>(\n    schema.choice && schema.choice.value\n  );\n  const [loading, setLoading] = useState(false);\n  const [openDialogIndex, setOpen] = useState(-1);\n\n  function getURL(path?: string) {\n    return `${url}/${path}`;\n  }\n\n  /**\n   * Fetch selection\n   */\n  const fetchList = async () => {\n    if (schema.extra) {\n      let url = getURL(\n        schema.extra.related_model &&\n          schema.extra.related_model.replace(\"-\", \"_\") + \"/\"\n      );\n      let response = await axios.get<any[]>(url);\n\n      return response.data;\n    }\n  };\n\n  /**\n   * Fetch schema\n   */\n  const fetchSchema = async () => {\n    if (schema.extra) {\n      let url = getURL(\n        schema.extra.related_model &&\n          schema.extra.related_model.replace(\"-\", \"_\") + \"/\"\n      );\n      let response = await axios.request({ method: \"OPTIONS\", url: url });\n      setSchema(response.data.fields);\n    }\n  };\n\n  /**\n   * Update forign key\n   * @param data json data\n   */\n  const update = async (data: any) => {\n    setLoading(true);\n    if (schema.extra) {\n      let url = getURL(\n        schema.extra.related_model &&\n          schema.extra.related_model.replace(\"-\", \"_\") + \"/\" + selected + \"/\"\n      );\n      let response = await axios.patch(url, data);\n    }\n    setLoading(false);\n  };\n\n  /**\n   * Create forign key\n   * @param data JSon Data\n   */\n  const create = async (data: any) => {\n    setLoading(true);\n    if (schema.extra) {\n      let url = getURL(\n        schema.extra.related_model &&\n          schema.extra.related_model.replace(\"-\", \"_\") + \"/\"\n      );\n      let response = await axios.post(url, data);\n    }\n    setLoading(false);\n  };\n\n  const options = () => {\n    if (list !== undefined) {\n      return list.map(l => {\n        return { key: l.id, text: l.name, value: l.id };\n      });\n    } else {\n      if (schema.choice) {\n        return [\n          {\n            text: schema.choice.label,\n            key: schema.choice.value,\n            value: schema.choice.value\n          }\n        ];\n      } else {\n        return [];\n      }\n    }\n  };\n\n  return (\n    <Grid>\n      <Grid.Row columns=\"equal\">\n        <Grid.Column width={10}>\n          <Dropdown\n            value={schema.choice && schema.choice.value}\n            labeled\n            placeholder={`Select ${schema.label}`}\n            fluid\n            search\n            selection\n            onChange={(e, { value }) => {\n              setSelect(value as number);\n              onSaved(value as string);\n              if (list) {\n                let selected = list.find(l => l.id === value);\n                props.select({ label: selected.name, value: selected.id });\n              }\n            }}\n            options={options()}\n            onClick={async () => {\n              let result = await fetchList();\n              if (result) {\n                setList(result);\n              }\n            }}\n          />\n        </Grid.Column>\n        <Grid.Column>\n          <Button\n            icon=\"add\"\n            color=\"blue\"\n            onClick={async () => {\n              setOpen(0);\n              await fetchSchema();\n            }}\n          ></Button>\n          <Button\n            icon=\"edit\"\n            color=\"blue\"\n            disabled={schema.value === undefined}\n            onClick={async () => {\n              setOpen(1);\n              let list = await fetchList();\n              setList(list);\n              await fetchSchema();\n            }}\n          ></Button>\n          <Dialog\n            open={openDialogIndex === 0}\n            onClose={() => setOpen(-1)}\n            fullWidth\n          >\n            <DialogTitle>Add {schema.label}</DialogTitle>\n            <DialogContent>\n              {editSchema && (\n                <JSONSchema\n                  schemas={editSchema}\n                  url={url}\n                  onSubmit={create}\n                ></JSONSchema>\n              )}\n            </DialogContent>\n          </Dialog>\n\n          <Dialog\n            open={openDialogIndex === 1}\n            onClose={() => setOpen(-1)}\n            fullWidth\n          >\n            <DialogTitle>Edit {schema.label}</DialogTitle>\n            <DialogContent>\n              {editSchema && (\n                <JSONSchema\n                  schemas={editSchema}\n                  values={list && list.find(l => l.id === selected)}\n                  url={url}\n                  onSubmit={update}\n                  loading={loading}\n                ></JSONSchema>\n              )}\n            </DialogContent>\n          </Dialog>\n        </Grid.Column>\n        {schema.required && !schema.value && (\n          <Grid.Column>\n            <Label tag color=\"red\">\n              Required\n            </Label>\n          </Grid.Column>\n        )}\n      </Grid.Row>\n    </Grid>\n  );\n}\n","import React, { Component } from \"react\";\nimport { Schema, SchemaList, Widget } from \"./model/Schema\";\nimport { FieldAction } from \"./model/Action\";\nimport { FieldIcon } from \"./model/Icon\";\nimport { Form, Button, Container, Label } from \"semantic-ui-react\";\n\nimport \"semantic-ui-css/semantic.min.css\";\nimport JSONSchemaTextField from \"./Components/JSONSchemaTextField\";\nimport JSONSchemaSelectField from \"./Components/JSONSchemaSelectField\";\nimport JSONSchemaForignField from \"./Components/JSONSchemaForignField\";\n\ninterface Props {\n  schemas: Schema[] | any;\n  values?: { [key: string]: any };\n  actions?: FieldAction[];\n  icons?: FieldIcon[];\n  url: string;\n  loading?: boolean;\n  onSubmit?(data: { [key: string]: any }): void;\n}\n\ninterface State {\n  schemaList?: SchemaList;\n  submitSuccess?: boolean;\n}\n\nexport default class JSONSchema extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { schemaList: undefined, submitSuccess: undefined };\n  }\n\n  componentDidMount() {\n    const { schemas, values, icons, actions } = this.props;\n    let schemaList: SchemaList = new SchemaList(schemas);\n\n    if (values) {\n      schemaList.merge(values);\n    }\n    if (icons) {\n      let newSchema = FieldIcon.merge(schemaList.schemaList, icons);\n      schemaList.schemaList = newSchema;\n    }\n    if (actions) {\n      let newSchema = FieldAction.merge(schemaList.schemaList, actions);\n      schemaList.schemaList = newSchema;\n    }\n    this.setState({ schemaList: schemaList });\n  }\n\n  /**\n   * Onsave\n   */\n  onSaved = (value: string, schema: Schema) => {\n    let v: any = value;\n    if (schema.widget === Widget.number) {\n      v = parseInt(value);\n    }\n    schema.value = v;\n    this.setState({\n      schemaList: this.state.schemaList\n    });\n  };\n\n  /**\n   * render field based on schema's type\n   * @param schema Schema\n   */\n  renderField(schema: Schema) {\n    switch (schema.widget) {\n      case Widget.select:\n        return (\n          <JSONSchemaSelectField\n            schema={schema}\n            onSaved={v => this.onSaved(v, schema)}\n          ></JSONSchemaSelectField>\n        );\n      case Widget.foreignkey:\n        return (\n          <JSONSchemaForignField\n            select={choice => {\n              schema.choice = choice;\n              this.setState({\n                schemaList: this.state.schemaList\n              });\n            }}\n            schema={schema}\n            onSaved={v => this.onSaved(v, schema)}\n            url={this.props.url}\n          ></JSONSchemaForignField>\n        );\n      case Widget.text:\n        return (\n          <JSONSchemaTextField\n            schema={schema}\n            onSaved={v => this.onSaved(v, schema)}\n          />\n        );\n      case Widget.number:\n        return (\n          <JSONSchemaTextField\n            schema={schema}\n            onSaved={v => this.onSaved(v, schema)}\n          />\n        );\n      default:\n        return <div key={schema.name}></div>;\n    }\n  }\n\n  render() {\n    const { schemaList, submitSuccess } = this.state;\n    const { loading } = this.props;\n\n    return (\n      <Container>\n        {submitSuccess !== undefined && (\n          <Label basic color={submitSuccess ? \"green\" : \"red\"}>\n            Submitted {submitSuccess ? \"success\" : \"failed\"}\n          </Label>\n        )}\n        <Form loading={loading}>\n          {schemaList &&\n            schemaList.schemaList\n              .filter(s => !s.readonly)\n              .map(s => (\n                <Form.Field key={s.name}>{this.renderField(s)}</Form.Field>\n              ))}\n          <Button\n            loading={loading === true}\n            onClick={async () => {\n              if (schemaList && this.props.onSubmit) {\n                try {\n                  let data = schemaList.onSubmit();\n                  await this.props.onSubmit(data);\n                  this.setState({ submitSuccess: true });\n                } catch (e) {\n                  alert(e);\n                  this.setState({ submitSuccess: false });\n                }\n              }\n            }}\n          >\n            Submit\n          </Button>\n        </Form>\n      </Container>\n    );\n  }\n}\n","import React, { useState, useContext } from \"react\";\nimport {\n  Modal,\n  Segment,\n  Progress,\n  Grid,\n  Button,\n  Icon\n} from \"semantic-ui-react\";\nimport { HomePageContext } from \"../../../models/HomeContext\";\nimport { SchemaList, Schema, Widget } from \"../JSONSchema/model/Schema\";\nimport { JSONSchema } from \"../JSONSchema\";\nimport { Folder } from \"../../../models/Folder\";\n\ninterface Props {\n  selectedFolder: Folder;\n  open: boolean;\n  setOpen(open: boolean): void;\n}\n\ninterface UploadInfo {\n  currentName: string;\n  progress: number;\n  total: number;\n  currentIndex: number;\n}\n\nconst schema: Schema[] = [\n  {\n    name: \"name\",\n    label: \"Folder Name\",\n    readonly: false,\n    required: true,\n    widget: Widget.text\n  }\n];\n\nexport default function UpdateFolderDialog(props: Props) {\n  const { nas, update } = useContext(HomePageContext);\n\n  return (\n    <Modal open={props.open}>\n      <Modal.Header>Select files</Modal.Header>\n      <Modal.Content>\n        <JSONSchema\n          schemas={schema}\n          url=\"\"\n          values={{ name: props.selectedFolder.name }}\n          onSubmit={async data => {\n            try {\n              await nas.renameFolder(props.selectedFolder.id, data);\n              update();\n              setTimeout(() => {\n                props.setOpen(false);\n              }, 300);\n            } catch (err) {\n              throw err;\n            }\n          }}\n        />\n      </Modal.Content>\n      <Modal.Actions>\n        <Button basic color=\"red\" onClick={() => props.setOpen(false)}>\n          <Icon name=\"remove\" /> No\n        </Button>\n      </Modal.Actions>\n    </Modal>\n  );\n}\n","import React, { useState, useContext } from \"react\";\nimport EditorJs from \"react-editor-js\";\nimport { Modal, Button } from \"semantic-ui-react\";\nimport { TextField } from \"@material-ui/core\";\nimport { Document as NasDocument } from \"../../../models/Folder\";\nimport { HomePageContext } from \"../../../models/HomeContext\";\nimport EditorJS from \"@editorjs/editorjs\";\n\ninterface Props {\n  open: boolean;\n  setOpen(open: boolean): void;\n  document?: NasDocument;\n}\n\nexport default function Editor(props: Props) {\n  const [editor, setEditor] = useState<EditorJS | undefined>();\n  const [name, setName] = useState<string | undefined>();\n  const [isChanged, setIsChanged] = useState(false);\n  const { document } = props;\n  const { nas, update } = useContext(HomePageContext);\n\n  if (name === undefined) {\n    setName(document ? document.name : \"\");\n  }\n\n  return (\n    <Modal open={props.open} centered={false}>\n      <Modal.Header>\n        <TextField\n          value={name}\n          label=\"You Document Title\"\n          onChange={e => {\n            setName(e.target.value);\n          }}\n          fullWidth\n        />\n      </Modal.Header>\n      <Modal.Content>\n        <EditorJs\n          onChange={() => {\n            setIsChanged(true);\n          }}\n          data={document && document.content}\n          instanceRef={instance => setEditor(instance)}\n        />\n      </Modal.Content>\n      <Modal.Actions>\n        <Button\n          onClick={() => {\n            if (isChanged) {\n              let confirm = window.confirm(\n                \"Are you sure you want to exit? You will lose unsave data.\"\n              );\n              if (confirm) {\n                props.setOpen(false);\n              }\n            } else {\n              props.setOpen(false);\n            }\n          }}\n        >\n          close\n        </Button>\n        <Button\n          color=\"blue\"\n          onClick={async () => {\n            try {\n              if (editor && name) {\n                let data = await editor.save();\n                if (document) {\n                  // update current document\n                  await nas.updateDocument(document.id, name, data);\n                } else {\n                  if (name !== \"\") {\n                    await nas.createNewDocument(name, data);\n                  } else {\n                    throw \"Name should not be empty\";\n                  }\n                }\n                update();\n                setName(undefined);\n                props.setOpen(false);\n              }\n            } catch (err) {\n              alert(err.toString());\n            }\n          }}\n        >\n          Save\n        </Button>\n      </Modal.Actions>\n    </Modal>\n  );\n}\n","import React, { useContext, useState } from \"react\";\nimport {\n  Segment,\n  MessageHeader,\n  Message,\n  Icon,\n  Modal,\n  Image,\n  SemanticICONS,\n  Divider,\n  Label,\n  Button,\n  Popup\n} from \"semantic-ui-react\";\nimport { createStyles, Theme, makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport FolderIcon from \"@material-ui/icons/Folder\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport { ListItemSecondaryAction, IconButton } from \"@material-ui/core\";\nimport { HomePageContext } from \"../../../models/HomeContext\";\nimport moment from \"moment\";\nimport path from \"path\";\nimport \"video-react/dist/video-react.css\";\nimport { Folder, Document as NasDocument } from \"../../../models/Folder\";\nimport UpdateFolderDialog from \"./UpdateFolderDialog\";\nimport Editor from \"./Editor\";\n\nconst { Player } = require(\"video-react\");\n\nconst imageExt = [\".jpg\", \".png\", \".bmp\"];\nconst videoExt = [\".mov\", \".mp4\", \".avi\", \".m4v\"];\n\nexport default function ListPanel() {\n  const { nas, isLoading, update } = useContext(HomePageContext);\n  const [selectedDocument, setSelectedDocument] = useState<\n    NasDocument | undefined\n  >();\n  const [imageSrc, setImageSrc] = useState<string | undefined>(undefined);\n  const [videoSrc, setVideoSrc] = useState<string | undefined>(undefined);\n  const [selectedFolder, setSelectedFolder] = useState<Folder | undefined>(\n    undefined\n  );\n\n  function isImage(filepath: string): boolean {\n    return imageExt.includes(path.extname(filepath));\n  }\n\n  function isVideo(filepath: string): boolean {\n    return videoExt.includes(path.extname(filepath));\n  }\n\n  function getIcon(filepath: string): SemanticICONS {\n    if (isImage(filepath)) {\n      return \"images\";\n    } else if (isVideo(filepath)) {\n      return \"file video\";\n    }\n\n    return \"file\";\n  }\n\n  return (\n    <Segment placeholder loading={isLoading}>\n      <Label attached=\"bottom left\">\n        Total Size:{\" \"}\n        {nas.currentFolder &&\n          (nas.currentFolder.total_size / 1024 / 1024).toFixed(2)}{\" \"}\n        MB\n      </Label>\n      <List>\n        {nas.errorMsg && (\n          <Message error>\n            <MessageHeader>Network Error</MessageHeader>\n            <div>{nas.errorMsg.toString()}</div>\n          </Message>\n        )}\n        {/*Render Folders*/}\n        {nas.currentFolder &&\n          nas.currentFolder.folders.map((f, i) => (\n            <ListItem\n              button\n              key={`folder-${f.id}`}\n              onClick={() => {\n                window.location.href = `#/home/${f.id}`;\n              }}\n            >\n              <ListItemAvatar>\n                <Icon circular name=\"folder\" size=\"large\" color=\"grey\"></Icon>\n              </ListItemAvatar>\n              <ListItemText\n                primary={f.name}\n                secondary={moment(f.modified_at).format(\"MMM DD, YYYY\")}\n              />\n\n              <ListItemSecondaryAction>\n                <Button.Group>\n                  <Button\n                    icon\n                    color=\"blue\"\n                    edge=\"end\"\n                    onClick={async () => {\n                      setSelectedFolder(f);\n                    }}\n                  >\n                    <Icon name=\"edit\"></Icon>\n                  </Button>\n                  <Button\n                    icon\n                    edge=\"end\"\n                    onClick={async () => {\n                      await nas.deleteFolder(f.id);\n                      update();\n                    }}\n                  >\n                    <Icon name=\"trash\"></Icon>\n                  </Button>\n                </Button.Group>\n              </ListItemSecondaryAction>\n            </ListItem>\n          ))}\n        {/*End Render Folders*/}\n        {/*Render documents*/}\n        {nas.currentFolder &&\n          nas.currentFolder.documents.map((f, i) => (\n            <ListItem\n              button\n              key={`folder-${f.id}`}\n              onClick={async () => {\n                let document = await nas.getDocument(f.id);\n                setSelectedDocument(document);\n              }}\n            >\n              <ListItemAvatar>\n                <Icon circular name=\"file pdf\" size=\"large\" color=\"red\"></Icon>\n              </ListItemAvatar>\n              <ListItemText\n                primary={f.name}\n                secondary={moment(f.modified_at).format(\"MMM DD, YYYY\")}\n              />\n\n              <ListItemSecondaryAction>\n                <Button.Group>\n                  <Button\n                    icon\n                    color=\"blue\"\n                    edge=\"end\"\n                    onClick={async () => {\n                      let document = await nas.getDocument(f.id);\n                      setSelectedDocument(document);\n                    }}\n                  >\n                    <Icon name=\"edit\"></Icon>\n                  </Button>\n                  <Button\n                    icon\n                    edge=\"end\"\n                    onClick={async () => {\n                      await nas.deleteDocument(f.id);\n                      update();\n                    }}\n                  >\n                    <Icon name=\"trash\"></Icon>\n                  </Button>\n                </Button.Group>\n              </ListItemSecondaryAction>\n            </ListItem>\n          ))}\n\n        {/*End Render documents*/}\n\n        {/*Render Files*/}\n        {nas.currentFolder &&\n          nas.currentFolder.files.map((f, i) => (\n            <ListItem\n              button\n              onClick={() => {\n                if (isImage(f.file)) {\n                  setImageSrc(f.file);\n                } else if (isVideo(f.file)) {\n                  console.log(f.file);\n                  setVideoSrc(f.file);\n                }\n              }}\n              key={`file-${f.id}`}\n            >\n              <ListItemAvatar>\n                <Icon\n                  name={getIcon(f.file)}\n                  circular\n                  size=\"large\"\n                  color=\"teal\"\n                />\n              </ListItemAvatar>\n              <ListItemText\n                primary={path.basename(f.filename)}\n                secondary={\n                  <React.Fragment>\n                    <label>\n                      {moment(f.modified_at).format(\"MMM DD, YYYY\")}\n                    </label>\n                    <p> {(f.size / 1024 / 1024).toFixed(2)}MB </p>\n                  </React.Fragment>\n                }\n              />\n              <ListItemSecondaryAction>\n                <Button.Group>\n                  <Button\n                    icon\n                    edge=\"end\"\n                    color=\"blue\"\n                    aria-label=\"download\"\n                    onClick={() => {\n                      /// Download from link\n                      const link = document.createElement(\"a\");\n                      link.href = `${f.file}`;\n                      document.body.appendChild(link);\n                      link.click();\n                      document.body.removeChild(link);\n                    }}\n                  >\n                    <Icon name=\"download\"></Icon>\n                  </Button>\n\n                  <Button\n                    icon\n                    onClick={async () => {\n                      await nas.deleteFile(f.id);\n                      update();\n                    }}\n                  >\n                    <Icon name=\"trash\"></Icon>\n                  </Button>\n                </Button.Group>\n              </ListItemSecondaryAction>\n            </ListItem>\n          ))}\n        {/*End Render Files*/}\n      </List>\n\n      {selectedFolder && (\n        <UpdateFolderDialog\n          selectedFolder={selectedFolder}\n          open={selectedFolder !== undefined}\n          setOpen={(value: boolean) => {\n            !value && setSelectedFolder(undefined);\n          }}\n        />\n      )}\n      {selectedDocument && (\n        <Editor\n          open={selectedDocument !== undefined}\n          setOpen={v => {\n            !v && setSelectedDocument(undefined);\n          }}\n          document={selectedDocument}\n        ></Editor>\n      )}\n      <Modal\n        open={imageSrc !== undefined}\n        onClose={() => setImageSrc(undefined)}\n      >\n        <Image src={imageSrc} fluid></Image>\n      </Modal>\n      <Modal\n        open={videoSrc !== undefined}\n        onClose={() => setVideoSrc(undefined)}\n      >\n        <Player>\n          <source src={videoSrc} />\n        </Player>\n      </Modal>\n    </Segment>\n  );\n}\n","import React, { useState, useContext } from \"react\";\nimport {\n  Modal,\n  Segment,\n  Progress,\n  Grid,\n  Button,\n  Icon\n} from \"semantic-ui-react\";\nimport { HomePageContext } from \"../../../models/HomeContext\";\n\ninterface Props {\n  open: boolean;\n  setOpen(open: boolean): void;\n}\n\ninterface UploadInfo {\n  currentName: string;\n  progress: number;\n  total: number;\n  currentIndex: number;\n}\n\nexport default function UploadDialog(props: Props) {\n  const { nas, update } = useContext(HomePageContext);\n\n  const [files, setFiles] = useState<File[]>();\n  const [uploadInfo, setUploadInfo] = useState<UploadInfo>();\n\n  return (\n    <Modal open={props.open}>\n      <Modal.Header>Select files</Modal.Header>\n      <Modal.Content>\n        <Grid.Row>\n          <input\n            type=\"file\"\n            multiple\n            name=\"Upload file\"\n            onChange={e => {\n              let uploadFiles = e.target.files;\n              if (uploadFiles) {\n                let l: File[] = [];\n                for (var i = 0; i < uploadFiles.length; i++) {\n                  l.push(uploadFiles[i]);\n                }\n                setFiles(l);\n              }\n            }}\n          ></input>\n        </Grid.Row>\n        {uploadInfo && (\n          <Grid.Row style={{ marginTop: 20 }}>\n            <Segment>\n              <Progress\n                percent={uploadInfo.progress}\n                attached=\"top\"\n                color=\"green\"\n                active\n              />\n              {uploadInfo.currentName} {uploadInfo.currentIndex} /{\" \"}\n              {uploadInfo.total}\n              <Progress\n                percent={(uploadInfo.currentIndex / uploadInfo.total) * 100}\n                attached=\"bottom\"\n                color=\"blue\"\n                active\n              />\n            </Segment>\n          </Grid.Row>\n        )}\n      </Modal.Content>\n      <Modal.Actions>\n        <Button basic color=\"red\" onClick={() => props.setOpen(false)}>\n          <Icon name=\"remove\" /> No\n        </Button>\n        <Button\n          disabled={files === undefined}\n          color=\"green\"\n          inverted\n          onClick={async () => {\n            if (files) {\n              await nas.uploadFile(files, (index: number, progress: number) => {\n                setUploadInfo({\n                  total: files.length,\n                  currentIndex: index,\n                  currentName: files[index] ? files[index].name : \"Finished\",\n                  progress: progress\n                });\n              });\n              update();\n              setTimeout(() => {\n                props.setOpen(false);\n                setFiles(undefined);\n                setUploadInfo(undefined);\n              }, 300);\n            }\n          }}\n        >\n          <Icon name=\"checkmark\" /> Yes\n        </Button>\n      </Modal.Actions>\n    </Modal>\n  );\n}\n","import React, { useState, useContext } from \"react\";\nimport {\n  Modal,\n  Segment,\n  Progress,\n  Grid,\n  Button,\n  Icon\n} from \"semantic-ui-react\";\nimport { HomePageContext } from \"../../../models/HomeContext\";\nimport { SchemaList, Schema, Widget } from \"../JSONSchema/model/Schema\";\nimport { JSONSchema } from \"../JSONSchema\";\n\ninterface Props {\n  open: boolean;\n  setOpen(open: boolean): void;\n}\n\ninterface UploadInfo {\n  currentName: string;\n  progress: number;\n  total: number;\n  currentIndex: number;\n}\n\nconst schema: Schema[] = [\n  {\n    name: \"name\",\n    label: \"Folder Name\",\n    readonly: false,\n    required: true,\n    widget: Widget.text\n  }\n];\n\nexport default function NewFolderDialog(props: Props) {\n  const { nas, update } = useContext(HomePageContext);\n\n  return (\n    <Modal open={props.open}>\n      <Modal.Header>New Folder</Modal.Header>\n      <Modal.Content>\n        <JSONSchema\n          schemas={schema}\n          url=\"\"\n          onSubmit={async data => {\n            try {\n              await nas.createNewFolder(data);\n              update();\n              setTimeout(() => {\n                props.setOpen(false);\n              }, 300);\n            } catch (err) {\n              throw err;\n            }\n          }}\n        />\n      </Modal.Content>\n      <Modal.Actions>\n        <Button basic color=\"red\" onClick={() => props.setOpen(false)}>\n          <Icon name=\"remove\" /> No\n        </Button>\n      </Modal.Actions>\n    </Modal>\n  );\n}\n","import React, { useContext, useState } from \"react\";\nimport { Button, Icon, Grid, Breadcrumb, Segment } from \"semantic-ui-react\";\nimport { Link, NavLink } from \"react-router-dom\";\nimport { HomePageContext } from \"../../../models/HomeContext\";\nimport UploadDialog from \"./UploadDialog\";\nimport NewFolderDialog from \"./NewFolderDialog\";\nimport Editor from \"./Editor\";\n\nexport default function Actions() {\n  const { nas } = useContext(HomePageContext);\n\n  const [open, setOpen] = useState(false);\n  const [openNewFolder, setOpenNewFolder] = useState(false);\n  const [openEditor, setOpenEditor] = useState(false);\n\n  return (\n    <Grid>\n      <Grid.Column floated=\"left\" width={10} textAlign=\"left\">\n        <Breadcrumb size=\"large\">\n          <Breadcrumb.Section>\n            <NavLink to=\"/home\">Root</NavLink>\n            <Breadcrumb.Divider icon=\"right chevron\" />\n          </Breadcrumb.Section>\n\n          {nas.menus.map(m => (\n            <Breadcrumb.Section key={`menu-${m.id}`}>\n              <NavLink to={`/home/${m.id}`}>{m.name}</NavLink>\n              <Breadcrumb.Divider icon=\"right chevron\" />\n            </Breadcrumb.Section>\n          ))}\n        </Breadcrumb>\n      </Grid.Column>\n      <Grid.Column floated=\"right\" width={6} textAlign=\"right\">\n        <Button.Group>\n          <Button icon onClick={() => setOpenNewFolder(true)}>\n            <Icon name=\"folder\" />\n          </Button>\n          <Button\n            icon\n            color=\"blue\"\n            onClick={() => setOpen(true)}\n            disabled={nas.currentFolder === undefined}\n          >\n            <Icon name=\"upload\" />\n          </Button>\n          <Button\n            icon\n            color=\"orange\"\n            onClick={() => setOpenEditor(true)}\n            disabled={nas.currentFolder === undefined}\n          >\n            <Icon name=\"edit\" />\n          </Button>\n        </Button.Group>\n      </Grid.Column>\n      <UploadDialog open={open} setOpen={setOpen}></UploadDialog>\n      <NewFolderDialog\n        open={openNewFolder}\n        setOpen={setOpenNewFolder}\n      ></NewFolderDialog>\n      <Editor open={openEditor} setOpen={setOpenEditor}></Editor>\n    </Grid>\n  );\n}\n","import React, { Component } from \"react\";\nimport { Nas } from \"./nas\";\nimport { RouteComponentProps } from \"react-router\";\nimport { SystemInfo } from \"./Folder\";\nimport Axios from \"axios\";\nimport { systemURL } from \"./urls\";\n\ninterface SystemContext {\n  systemInfo?: SystemInfo;\n}\n\ninterface SystemProps {}\n\nexport class SystemProvider extends Component<SystemProps, SystemContext> {\n  constructor(props: SystemProps) {\n    super(props);\n    this.state = {};\n  }\n\n  async componentDidMount() {\n    let info = await this.fetchSystemInfo();\n    if (info) {\n      this.setState({ systemInfo: info });\n    }\n    setInterval(async () => {\n      let info = await this.fetchSystemInfo();\n      console.log(\"Update system info\");\n      if (info) {\n        this.setState({ systemInfo: info });\n      }\n    }, 20000);\n  }\n\n  fetchSystemInfo = async (): Promise<SystemInfo> => {\n    let info = await Axios.get<SystemInfo>(systemURL);\n    return Promise.resolve(info.data);\n  };\n\n  render() {\n    return (\n      <SystemContext.Provider value={this.state}>\n        {this.props.children}\n      </SystemContext.Provider>\n    );\n  }\n}\n\nconst context: SystemContext = {};\n\nexport const SystemContext = React.createContext(context);\n","import React, { useContext } from \"react\";\nimport { Progress, Message } from \"semantic-ui-react\";\nimport { SystemContext } from \"../../../models/SystemContext\";\n\nexport default function ComputerStatus() {\n  const { systemInfo } = useContext(SystemContext);\n  if (systemInfo === undefined) {\n    return (\n      <Message>\n        <p>No Info Avaliable currently</p>\n      </Message>\n    );\n  }\n  return (\n    <div>\n      <span>\n        Used Sapce: {(systemInfo.disk.used / 1024 / 1024).toFixed(2)}MB/\n        {(systemInfo.disk.total / 1024 / 1024).toFixed(2)}MB\n      </span>\n      <Progress\n        percent={((systemInfo.disk.used / systemInfo.disk.total) * 100).toFixed(\n          2\n        )}\n        progress\n        color=\"green\"\n      />\n    </div>\n  );\n}\n","import React from \"react\";\nimport Header from \"./components/Header\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport ListPanel from \"./components/ListPanel\";\nimport { Container, Segment, Progress } from \"semantic-ui-react\";\nimport Actions from \"./components/Actions\";\nimport ComputerStatus from \"./components/ComputerStatus\";\n\nexport function HomePage() {\n  return (\n    <div id=\"home\">\n      <Container>\n        <Header />\n        <Segment>\n          <Actions />\n          <ListPanel />\n          <ComputerStatus />\n        </Segment>\n      </Container>\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  PieChart,\n  Pie,\n  Legend,\n  Tooltip,\n  ResponsiveContainer,\n  Cell\n} from \"recharts\";\nimport { Segment } from \"semantic-ui-react\";\n\ninterface Props {\n  title: string;\n  used: number;\n  total: number;\n  color: string;\n  color2: string;\n}\nconst data02 = [\n  { name: \"Group A\", value: 400 },\n  { name: \"Group B\", value: 300 },\n  { name: \"Group C\", value: 300 },\n  { name: \"Group D\", value: 200 }\n];\nexport default function PercentageChart(props: Props) {\n  const { title, used, total, color, color2 } = props;\n  let data = [\n    {\n      name: \"Used\",\n      value: used\n    },\n    { name: \"Available\", value: total - used }\n  ];\n\n  return (\n    <Segment>\n      <ResponsiveContainer\n        minHeight={300}\n        height=\"100%\"\n        width=\"100%\"\n        minWidth={200}\n      >\n        <PieChart>\n          <Pie\n            data={data}\n            dataKey=\"value\"\n            label\n            fill={color}\n            isAnimationActive={false}\n          >\n            <Cell fill={color}></Cell>\n            <Cell fill={color2}></Cell>\n          </Pie>\n\n          <Tooltip></Tooltip>\n        </PieChart>\n      </ResponsiveContainer>\n      <span>{title}</span>\n    </Segment>\n  );\n}\n","import React, { useContext } from \"react\";\nimport { Container, Grid } from \"semantic-ui-react\";\nimport { SystemContext } from \"../../models/SystemContext\";\nimport PercentageChart from \"./PercentageChart\";\n\nexport default function SystemInfoPage() {\n  const { systemInfo } = useContext(SystemContext);\n  if (systemInfo === undefined) {\n    return <div>Infomation Not Available</div>;\n  }\n\n  return (\n    <div id=\"home\" style={{ width: \"100%\", color: \"black\" }}>\n      <Container>\n        <h1>System Info</h1>\n        <Grid columns={2}>\n          <Grid.Column>\n            <PercentageChart\n              used={parseFloat((systemInfo.disk.used / 1024 / 1024).toFixed(2))}\n              total={parseFloat(\n                (systemInfo.disk.total / 1024 / 1024).toFixed(2)\n              )}\n              title=\"Disk(MB)\"\n              color=\"#0088FE\"\n              color2=\"orange\"\n            />\n          </Grid.Column>\n          <Grid.Column>\n            <PercentageChart\n              used={parseFloat(\n                (systemInfo.memory.used / 1024 / 1024).toFixed(2)\n              )}\n              total={parseFloat(\n                (systemInfo.memory.total / 1024 / 1024).toFixed(2)\n              )}\n              title=\"Memory(MB)\"\n              color=\"#0088FE\"\n              color2=\"orange\"\n            />\n          </Grid.Column>\n          <Grid.Column>\n            <PercentageChart\n              used={systemInfo.cpu}\n              total={100}\n              title=\"CPU Usage(Percentage)\"\n              color=\"#0088FE\"\n              color2=\"orange\"\n            />\n          </Grid.Column>\n        </Grid>\n      </Container>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { I18nProvider } from \"@lingui/react\";\n\nReactDOM.render(\n  <I18nProvider catalogs={{}}>\n    <App />\n  </I18nProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { Component, useState } from \"react\";\nimport \"./App.css\";\nimport {\n  HashRouter as Router,\n  Route,\n  Link,\n  NavLink,\n  Redirect\n} from \"react-router-dom\";\nimport {\n  spring,\n  AnimatedRoute,\n  AnimatedSwitch\n} from \"./components/plugins/react-router-transition\";\nimport { HomePage } from \"./components/pages/home/HomePage\";\nimport { HomePageProvider } from \"./components/models/HomeContext\";\nimport { SystemProvider } from \"./components/models/SystemContext\";\nimport SystemInfoPage from \"./components/pages/systemInfo/SystemInfoPage\";\nimport { Sidebar, Menu, Icon, Button } from \"semantic-ui-react\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport { IconButton } from \"@material-ui/core\";\n\nexport default function App() {\n  const [visible, setVisible] = useState(false);\n\n  return (\n    <SystemProvider>\n      <Router>\n        <Sidebar.Pushable style={{ margin: 0 }}>\n          <Sidebar\n            style={{ boxShadow: \"none\", border: \"none\" }}\n            as={Menu}\n            animation=\"push\"\n            icon=\"labeled\"\n            onHide={() => setVisible(false)}\n            vertical\n            visible={visible}\n            width=\"thin\"\n          >\n            <Menu.Item as=\"a\" name=\"Home\" href=\"#/home\" />\n            <Menu.Item as=\"a\" name=\"System Info\" href=\"#/info\" />\n          </Sidebar>\n          <Sidebar.Pusher>\n            <IconButton onClick={() => setVisible(!visible)}>\n              <MenuIcon />\n            </IconButton>\n            <div>\n              <Route exact path=\"/\" component={() => <Redirect to=\"/home\" />} />\n              <Route\n                exact\n                path=\"/home/:id?\"\n                component={(props: any) => (\n                  <HomePageProvider {...props}>\n                    <HomePage></HomePage>\n                  </HomePageProvider>\n                )}\n              />\n              <Route\n                exact\n                path=\"/info\"\n                component={(props: any) => <SystemInfoPage />}\n              />\n            </div>\n          </Sidebar.Pusher>\n        </Sidebar.Pushable>\n      </Router>\n    </SystemProvider>\n  );\n}\n"],"sourceRoot":""}