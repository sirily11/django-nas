{"version":3,"sources":["components/models/urls.ts","components/models/nas.ts","components/models/HomeContext.tsx","components/pages/home/components/files/MoveDialog.tsx","components/pages/home/components/files/RenameDialog.tsx","components/pages/home/components/folders/ListFolderPanel.tsx","components/pages/home/components/files/UploadDialog.tsx","components/pages/home/JSONSchema/model/Schema.ts","components/pages/home/components/folders/NewFolderDialog.tsx","components/pages/home/components/documents/Editor.tsx","components/pages/home/components/others/NasMenu.tsx","components/models/SystemContext.tsx","components/pages/home/components/files/utils.ts","components/pages/home/components/others/ComputerStatus.tsx","components/pages/home/components/files/FilesActions.tsx","components/pages/home/components/files/ListFilesPanel.tsx","components/pages/home/components/files/UploadFilesSideBar.tsx","components/pages/home/components/files/SearchField.tsx","components/pages/home/HomePage.tsx","components/pages/systemInfo/PercentageChart.tsx","components/pages/systemInfo/SystemInfoPage.tsx","serviceWorker.js","index.js","App.tsx"],"names":["url","Nas","constructor","menus","currentFolder","searchedFiles","errorMsg","moveFileTo","fileId","dest","a","Axios","patch","getContent","id","moveFolderTo","folderId","u","rename","newName","search","keyword","get","response","data","parents","undefined","uploadFile","files","isDir","onUpload","index","f","size","getUploadFileAndCreateFolder","getSingleUploadFile","formData","post","headers","onUploadProgress","progress","p","Math","round","loaded","total","console","log","alert","toString","deleteFile","window","confirm","delete","deleteFolder","createNewFolder","name","parent","res","folders","push","renameFolder","findIndex","getDocument","Promise","resolve","content","JSON","parse","createNewDocument","stringify","ops","documents","updateDocument","deleteDocument","reject","this","file","FormData","append","path","webkitRelativePath","split","folder","HomePageProvider","Component","props","super","selectDocument","document","setState","selectedDocument","updateUploadInfo","uploadInfo","setUploadInfo","uploadFiles","fetch","isLoading","nas","state","update","componentDidUpdate","oldProps","match","params","componentWillMount","render","HomePageContext","Provider","value","children","context","info","React","createContext","MoveDialog","useContext","useState","selection","setSelection","Dialog","open","fullWidth","DialogTitle","DialogContent","FormControl","InputLabel","Select","color","onChange","e","target","MenuItem","filter","type","selectedFile","map","key","DialogActions","Button","onClick","onClose","s","RenameDialog","ext","filename","getDefaultName","setName","TextField","ListPanel","showMoveToDialog","setShowMoveToDialog","showRenameDialog","setShowRenameDialog","selectedFolder","setSelectedFolder","anchorEl","setAnchorEl","handleClose","style","overflow","overflowX","height","List","Grid","centered","Row","verticalAlign","Column","width","to","IconButton","Message","error","MessageHeader","i","ListItem","button","ListItemAvatar","Icon","ListItemText","location","href","primary","secondary","moment","modified_at","format","ListItemSecondaryAction","currentTarget","Menu","keepMounted","Boolean","UploadDialog","onInputChange","l","length","Modal","Header","Content","multiple","webkitdirectory","marginTop","Segment","Progress","percent","attached","active","currentName","currentIndex","Actions","basic","setOpen","disabled","loading","inverted","current","uploadedDataSize","totalDataSize","setTimeout","Widget","text","NewFolderDialog","folderName","setFolderName","setIsLoading","label","required","Editor","editor","setEditor","isChanged","setIsloading","ref","instance","defaultValue","getEditor","getContents","NasMenus","openFilesUpload","setOpenFilesUpload","openFolderUpload","setOpenFolderUpload","openNewFolder","setOpenNewFolder","openEditor","setOpenEditor","vertical","SystemProvider","fetchSystemInfo","componentDidMount","systemInfo","SystemContext","formatBytes","bytes","decimals","dm","floor","parseFloat","pow","toFixed","ComputerStatus","disk","used","FilesActions","shadow","setShadow","margin","computer","mobile","padding","onMouseOver","onMouseOut","cursor","raised","icon","Player","require","imageExt","videoExt","ListFilesPanel","previewAnchor","setPreviewAnchor","onHoverFile","setOnHoverFile","setselectedFile","imageSrc","setImageSrc","videoSrc","setVideoSrc","isImage","filepath","includes","extname","isVideo","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","hover","onMouseLeave","src","transcode_filepath","cover","basename","link","createElement","body","appendChild","click","removeChild","v","Image","fluid","poster","Popper","Card","CardMedia","image","CardActionArea","CardContent","UploadFilesSideBar","LinearProgress","variant","cpu","title","memory","ListItemIcon","marginBottom","useStyles","makeStyles","theme","createStyles","popper","marginRight","maxHeight","position","borderRadius","shape","backgroundColor","fade","palette","common","white","marginLeft","breakpoints","up","spacing","searchIcon","pointerEvents","display","alignItems","justifyContent","inputRoot","inputInput","paddingLeft","transition","transitions","create","SearchField","classes","setValue","className","CircularProgress","InputBase","placeholder","root","input","inputProps","onKeyDown","ClickAwayListener","onClickAway","Paper","createMuiTheme","main","flexGrow","menuButton","HomePage","show","setShow","ThemeProvider","AppBar","Toolbar","Hidden","mdUp","Typography","noWrap","Drawer","paddingTop","paddingBottom","smDown","implementation","tablet","PercentageChart","color2","minHeight","minWidth","dataKey","fill","isAnimationActive","SystemInfoPage","Container","columns","temperature","humidity","pressure","hostname","ReactDOM","catalogs","setShowMenu","exact","component","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.55edc064.chunk.js","sourcesContent":["export const systemURL = \"/system/\"\nexport const url = \"/api/folder/\"\nexport const fileURL = \"/api/file/\"\nexport const documentURL = \"/api/document/\"\nexport const searchFileURL = \"/api/file?search=\"\n// download folder\nexport const downloadURL = \"/api/download/\"","import Axios from \"axios\"\nimport { Folder, Parent, File as NasFile, Document as NasDocument } from './Folder';\n\nimport { url, documentURL, fileURL, searchFileURL } from \"./urls\"\nimport { DeltaStatic } from \"quill\";\nimport * as path from 'path';\n\n\n\ntype UploadProgressCallback = (index: number, progress: number) => void\n\n\nexport class Nas {\n    menus: Parent[]\n    currentFolder?: Folder\n    searchedFiles: NasFile[];\n    errorMsg?: string\n\n\n    constructor() {\n        this.menus = []\n        this.searchedFiles = [];\n    }\n\n    moveFileTo = async (fileId: number, dest: number | null) => {\n        try {\n            if (this.currentFolder) {\n                let url = `${fileURL}${fileId}/`\n                await Axios.patch(url, { \"parent\": dest })\n                await this.getContent(this.currentFolder.id)\n            }\n\n        } catch (err) {\n            this.errorMsg = err;\n        }\n    }\n\n    moveFolderTo = async (folderId: number, dest: number | null) => {\n        try {\n            if (this.currentFolder) {\n                let u = `${url}${folderId}/`\n                await Axios.patch(u, { \"parent\": dest })\n                await this.getContent(this.currentFolder.id)\n            }\n\n        } catch (err) {\n            this.errorMsg = err;\n        }\n    }\n\n    /**\n     * Rename file\n     */\n    rename = async (fileId: number, newName: string) => {\n        try {\n            if (this.currentFolder) {\n                let url = `${fileURL}${fileId}/`\n                await Axios.patch(url, { \"filename\": newName })\n                await this.getContent(this.currentFolder.id)\n            }\n\n        } catch (err) {\n            this.errorMsg = err;\n        }\n    }\n\n    /**\n     * Search by keyword\n     * @param keyword Keyword\n     */\n    search = async (keyword: String) => {\n        try {\n            let url = `${searchFileURL}${keyword}`\n            let response = await Axios.get<NasFile[]>(url);\n            this.searchedFiles = response.data;\n        } catch (err) {\n            this.errorMsg = err\n        }\n    }\n\n    /**\n     * Get content by id\n     */\n    getContent = async (id?: number | string) => {\n        try {\n            let u = id ? `${url}${id}/` : url\n            let response = await Axios.get<Folder>(u)\n            const { data } = response\n            this.menus = data.parents\n            this.currentFolder = data\n            this.errorMsg = undefined\n        } catch (err) {\n            this.errorMsg = err\n            this.currentFolder = undefined\n        }\n    }\n\n\n    /**\n     * Upload file to server.\n     * If upload fail, will show alert dialog\n     * @param files: List of files\n     * @param onUpload: callback function\n     * @param isDir: Whether upload directory\n     */\n    uploadFile = async (files: File[], isDir: boolean, onUpload: (index: number, progress: number, current: number, total: number) => void) => {\n        try {\n            let index = 0;\n            for (let f of files) {\n                if (this.currentFolder) {\n                    onUpload(index, 0, 0, f.size);\n\n                    let formData =\n                        isDir ?\n                            await this.getUploadFileAndCreateFolder(f) :\n                            this.getSingleUploadFile(f)\n\n                    await Axios.post<NasFile>(fileURL, formData,\n                        {\n                            headers: { 'Content-Type': 'multipart/form-data' },\n                            // eslint-disable-next-line no-loop-func\n                            onUploadProgress: (progress) => {\n                                let p = Math.round((progress.loaded * 100) / progress.total);\n                                onUpload(index, p, f.size * progress.loaded, progress.total)\n\n                            }\n\n                        })\n                    await this.getContent(this.currentFolder.id)\n\n                }\n                index += 1\n            }\n            onUpload(index, 100, 0, 0);\n        } catch (err) {\n            console.log(err)\n            alert(\"Upload Failed: \" + err.toString())\n        }\n    }\n\n    /**\n     * Only get the formdata but don't create folder\n     * @param file File\n     */\n    getSingleUploadFile(file: File): FormData | undefined {\n        if (this.currentFolder) {\n            let formData = new FormData()\n            formData.append(\"file\", file)\n            this.currentFolder.id && formData.append(\"parent\", this.currentFolder.id.toString())\n            return formData\n        }\n\n    }\n\n    /**\n     * Create folder for file. And then return the file\n     * For example file with path a/a.jpg will create a folder\n     * @param file Upload file\n     */\n    async getUploadFileAndCreateFolder(file: File): Promise<FormData | undefined> {\n        if (this.currentFolder) {\n            //@ts-ignore\n            let folders = path.dirname(file.webkitRelativePath).split(path.sep)\n            let folder: Folder | undefined;\n\n            for (let f of folders) {\n                let res = await Axios.post(url, { \"parent\": folder?.id ?? this.currentFolder.id ?? null, \"name\": f })\n                folder = res.data;\n\n            }\n\n            let formData = new FormData()\n\n            formData.append(\"file\", file)\n            console.log(\"parent\", folder)\n            folder && folder.id && formData.append(\"parent\", `${folder?.id}`)\n            return formData\n        }\n\n    }\n\n    /** \n     * Delete file by id\n     */\n    deleteFile = async (id: number) => {\n        try {\n            let confirm = window.confirm(\"Are you sure you want to delete this file?\")\n            if (confirm && this.currentFolder) {\n                await Axios.delete<Nas>(`${fileURL}${id}/`)\n                await this.getContent(this.currentFolder.id)\n            }\n        } catch (err) {\n            alert(\"Upload Failed: \" + err.toString())\n        }\n    }\n\n    /**\n     * Delete folder by id\n     */\n    deleteFolder = async (id: number) => {\n        try {\n            let confirm = window.confirm(\"Are you sure you want to delete this folder?\")\n            if (confirm && this.currentFolder) {\n                await Axios.delete<Nas>(`${url}${id}/`)\n                await this.getContent(this.currentFolder.id)\n            }\n        } catch (err) {\n            alert(\"Upload Failed: \" + err.toString())\n        }\n    }\n\n    /**\n     * Create folder with name\n     * @param name\n     */\n    createNewFolder = async (name: string) => {\n        if (this.currentFolder) {\n            let res = await Axios.post<Folder>(url, { name: name, parent: this.currentFolder.id ? this.currentFolder.id : null })\n            this.currentFolder.folders.push(res.data)\n        } else {\n            alert(\"Create new folder error: empty parent folder\")\n        }\n    }\n\n    /**\n     * Rename the folder \n     * @param id folder id\n     * @param newName new name\n     */\n    renameFolder = async (id: number, newName: string) => {\n        if (this.currentFolder) {\n            let res = await Axios.patch<Folder>(`${url}${id}/`, { \"name\": newName })\n            let index = this.currentFolder.folders.findIndex((f) => f.id === id)\n            if (index > -1) {\n                this.currentFolder.folders[index] = res.data\n            }\n        } else {\n            alert(\"Rename new folder error: empty parent folder\")\n        }\n    }\n\n    /**\n     * Get document from server.\n     * We need this function because we are getting abstract document object from server\n     * at begining(Which doesn't include content field).\n     * \n     * We will Call this function when user want to edit the file\n     */\n    getDocument = async (id: string | number) => {\n\n        let res = await Axios.get<NasDocument>(`${documentURL}${id}/`)\n        /// Need to parse the content into js object\n        return Promise.resolve({ ...res.data, content: JSON.parse(res.data.content) })\n\n    }\n\n    /**\n     * Create new document\n     * @param name: Name of the document\n     * @param data: EditorJS object\n     */\n    createNewDocument = async (name: string, data: DeltaStatic) => {\n        let res = await Axios.post<NasDocument>(documentURL,\n            {\n                name: name, parent: this.currentFolder && this.currentFolder.id ? this.currentFolder.id : null,\n                content: JSON.stringify(data.ops)\n            })\n        this.currentFolder && this.currentFolder.documents.push(res.data)\n\n    }\n\n    /**\n     * Update Document\n     * @param id: document's id\n     * @param data: EditorJS object\n     */\n    updateDocument = async (id: number, name: string, data: DeltaStatic) => {\n\n        let res = await Axios.patch<NasDocument>(`${documentURL}${id}/`, { name, content: JSON.stringify(data.ops) })\n        if (this.currentFolder) {\n            let index = this.currentFolder.documents.findIndex((f) => f.id === id)\n            if (index > -1) {\n                this.currentFolder.documents[index] = res.data\n            }\n\n        }\n\n    }\n\n    /**\n     * Delete document by id\n     * \n     * @param id: document's id\n     */\n    deleteDocument = async (id: number) => {\n        if (this.currentFolder) {\n            let confirm = window.confirm(\"Do you want to delete this document?\")\n            if (confirm) {\n                let res = await Axios.delete<NasDocument>(`${documentURL}${id}/`)\n                await this.getContent(this.currentFolder.id)\n                return Promise.resolve(res.data)\n            } else {\n\n            }\n\n        } else {\n            alert(\"Create new folder error: empty parent folder\")\n            return Promise.reject()\n        }\n    }\n\n}\n","import React, { Component } from \"react\";\nimport { Nas } from \"./nas\";\nimport { RouteComponentProps } from \"react-router\";\nimport { Folder, Document as NasDocument, File as NasFile } from \"./Folder\";\nimport { UploadInfo } from \"../pages/home/components/files/UploadDialog\";\n\ninterface RouterProps {\n  id: string;\n}\n\ninterface HomePageContext {\n  nas: Nas;\n  selectedDocument?: NasDocument;\n  uploadInfo?: UploadInfo;\n  updateUploadInfo(info?: UploadInfo): void;\n  uploadFiles?: File[];\n  setUploadInfo(files?: File[]): void;\n  update(): void;\n  selectDocument(doc?: NasDocument): void;\n  isLoading: boolean;\n}\n\ninterface HomePageProps extends RouteComponentProps<RouterProps> {}\n\nexport class HomePageProvider extends Component<\n  HomePageProps,\n  HomePageContext\n> {\n  constructor(props: HomePageProps) {\n    super(props);\n    this.state = {\n      nas: new Nas(),\n      selectDocument: this.selectDocument,\n      updateUploadInfo: this.updateUploadInfo,\n      setUploadInfo: this.setUploadInfo,\n      update: this.update,\n      isLoading: false\n    };\n  }\n\n  selectDocument = (document?: NasDocument) => {\n    this.setState({ selectedDocument: document });\n  };\n\n  updateUploadInfo = (uploadInfo?: UploadInfo) => {\n    this.setState({ uploadInfo });\n  };\n\n  setUploadInfo = (file: File[]) => {\n    this.setState({ uploadFiles: file });\n  };\n\n  async componentDidUpdate(oldProps: HomePageProps) {\n    if (this.props.match.params.id !== oldProps.match.params.id) {\n      let id = this.props.match.params.id;\n      await this.fetch(id);\n    }\n  }\n\n  async componentWillMount() {\n    let id = this.props.match.params.id;\n    await this.fetch(id);\n  }\n\n  fetch = async (id: any) => {\n    this.setState({ isLoading: true });\n    const { nas } = this.state;\n    await nas.getContent(id);\n    this.setState({ nas, isLoading: false });\n  };\n\n  update = () => {\n    this.setState({\n      nas: this.state.nas\n    });\n  };\n\n  render() {\n    return (\n      <HomePageContext.Provider value={this.state}>\n        {this.props.children}\n      </HomePageContext.Provider>\n    );\n  }\n}\n\nconst context: HomePageContext = {\n  nas: new Nas(),\n  update: () => {},\n  selectDocument: () => {},\n  updateUploadInfo: (info: UploadInfo) => {},\n  setUploadInfo: (files: File[]) => {},\n  isLoading: false\n};\n\nexport const HomePageContext = React.createContext(context);\n","import React, { useContext, useState } from \"react\";\nimport {\n  Folder,\n  File as NasFile,\n  Document as NasDocument\n} from \"../../../../models/Folder\";\nimport { HomePageContext } from \"../../../../models/HomeContext\";\nimport * as path from \"path\";\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  TextField,\n  FormControl,\n  Select,\n  MenuItem,\n  InputLabel,\n  Button,\n  DialogActions\n} from \"@material-ui/core\";\n\ninterface Props {\n  open: boolean;\n  onClose(): void;\n  type: \"file\" | \"folder\" | \"document\";\n  selectedFile: NasFile | NasDocument | Folder;\n}\n\nexport default function MoveDialog(props: Props) {\n  const { nas } = useContext(HomePageContext);\n\n  const [selection, setSelection] = useState<number>(-1);\n  console.log(selection);\n  return (\n    <Dialog open={props.open} fullWidth>\n      <DialogTitle>Move File To</DialogTitle>\n      <DialogContent>\n        <FormControl fullWidth>\n          <InputLabel>Destnation</InputLabel>\n          <Select\n            color=\"secondary\"\n            value={selection}\n            onChange={e => {\n              let selection = e.target.value as number;\n              setSelection(selection);\n            }}\n            fullWidth\n          >\n            {nas.currentFolder && (\n              <MenuItem value={nas.currentFolder.parent ?? -1}>\n                Parent Folder\n              </MenuItem>\n            )}\n            {nas.currentFolder &&\n              nas.currentFolder.folders\n                .filter(f =>\n                  props.type === \"folder\"\n                    ? props.selectedFile.id !== f.id\n                    : true\n                )\n                .map(f => (\n                  <MenuItem key={f.id} value={f.id}>\n                    {f.name}\n                  </MenuItem>\n                ))}\n          </Select>\n        </FormControl>\n      </DialogContent>\n      <DialogActions>\n        <Button\n          onClick={() => {\n            setSelection(-1);\n            props.onClose();\n          }}\n        >\n          cancel\n        </Button>\n        <Button\n          onClick={async () => {\n            if (selection) {\n              let s = selection === -1 ? null : selection;\n              switch (props.type) {\n                case \"file\":\n                  await nas.moveFileTo(props.selectedFile.id, s);\n                  break;\n                case \"folder\":\n                  await nas.moveFolderTo(props.selectedFile.id, s);\n              }\n            }\n            setSelection(-1);\n            props.onClose();\n          }}\n        >\n          ok\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n","import React, { useContext, useState } from \"react\";\nimport {\n  Folder,\n  File as NasFile,\n  Document as NasDocument\n} from \"../../../../models/Folder\";\nimport { HomePageContext } from \"../../../../models/HomeContext\";\nimport * as path from \"path\";\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  TextField,\n  FormControl,\n  Select,\n  MenuItem,\n  InputLabel,\n  Button,\n  DialogActions\n} from \"@material-ui/core\";\n\ninterface Props {\n  open: boolean;\n  onClose(): void;\n  type: \"file\" | \"folder\" | \"document\";\n  selectedFile: NasFile | NasDocument | Folder;\n}\n\nexport default function RenameDialog(props: Props) {\n  const getDefaultName = () => {\n    switch (props.type) {\n      case \"file\":\n        let ext = path.extname((props.selectedFile as NasFile).filename);\n        return path.basename((props.selectedFile as NasFile).filename, ext);\n\n      case \"folder\":\n        return (props.selectedFile as Folder).name;\n\n      default:\n        return (props.selectedFile as NasDocument).name;\n    }\n  };\n\n  const { nas } = useContext(HomePageContext);\n\n  const [name, setName] = useState<string>(getDefaultName());\n  console.log(props.selectedFile);\n  return (\n    <Dialog open={props.open} fullWidth>\n      <DialogTitle>Rename</DialogTitle>\n      <DialogContent>\n        <TextField\n          color=\"secondary\"\n          fullWidth\n          value={name}\n          onChange={e => {\n            setName(e.target.value);\n          }}\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button\n          onClick={() => {\n            props.onClose();\n            setName(\"\");\n          }}\n        >\n          cancel\n        </Button>\n        <Button\n          onClick={async () => {\n            if (name) {\n              switch (props.type) {\n                case \"file\":\n                  let ext = path.extname(\n                    (props.selectedFile as NasFile).filename\n                  );\n                  await nas.rename(props.selectedFile.id, `${name}${ext}`);\n                  break;\n                case \"folder\":\n                  await nas.renameFolder(props.selectedFile.id, name);\n              }\n            }\n            props.onClose();\n          }}\n        >\n          ok\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n","import React, { useContext, useState } from \"react\";\nimport {\n  Segment,\n  MessageHeader,\n  Message,\n  Icon,\n  Modal,\n  Image,\n  SemanticICONS,\n  Divider,\n  Label,\n  Button,\n  Popup,\n  Grid\n} from \"semantic-ui-react\";\nimport { createStyles, Theme, makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nimport ArrowBackIosIcon from \"@material-ui/icons/ArrowBackIos\";\nimport {\n  ListItemSecondaryAction,\n  IconButton,\n  Menu,\n  MenuItem\n} from \"@material-ui/core\";\nimport { HomePageContext } from \"../../../../models/HomeContext\";\nimport moment from \"moment\";\nimport \"video-react/dist/video-react.css\";\nimport { Folder, Document as NasDocument } from \"../../../../models/Folder\";\n\nimport { NavLink } from \"react-router-dom\";\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\nimport MoveDialog from \"../files/MoveDialog\";\nimport RenameDialog from \"../files/RenameDialog\";\n\nexport default function ListPanel() {\n  const { nas, isLoading, update } = useContext(HomePageContext);\n  const [showMoveToDialog, setShowMoveToDialog] = useState(false);\n  const [showRenameDialog, setShowRenameDialog] = useState(false);\n  const [selectedFolder, setSelectedFolder] = useState<Folder | undefined>(\n    undefined\n  );\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <div\n      style={{\n        overflow: \"auto\",\n        overflowX: \"hidden\",\n        height: \"100%\",\n        color: \"blue\"\n      }}\n    >\n      <List>\n        <Grid centered>\n          <Grid.Row verticalAlign=\"middle\">\n            <Grid.Column width={5}>\n              {nas.currentFolder && nas.currentFolder.parent ? (\n                <NavLink to={`/home/${nas.currentFolder.parent}`}>\n                  <IconButton>\n                    <ArrowBackIosIcon />\n                  </IconButton>\n                </NavLink>\n              ) : (\n                <IconButton>\n                  <NavLink to={`/home`}>\n                    <ArrowBackIosIcon />\n                  </NavLink>{\" \"}\n                </IconButton>\n              )}\n            </Grid.Column>\n            <Grid.Column width={11}>\n              <div style={{ color: \"black\" }}>\n                {nas.currentFolder && nas.currentFolder.name}\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n        {nas.errorMsg && (\n          <Message error>\n            <MessageHeader>Network Error</MessageHeader>\n            <div>{nas.errorMsg.toString()}</div>\n          </Message>\n        )}\n        {/*Render Folders*/}\n        {nas.currentFolder &&\n          nas.currentFolder.folders.map((f, i) => (\n            <ListItem button key={`folder-${f.id}`}>\n              <ListItemAvatar>\n                <Icon name=\"folder\" size=\"large\" color=\"grey\"></Icon>\n              </ListItemAvatar>\n              <ListItemText\n                onClick={() => {\n                  window.location.href = `#/home/${f.id}`;\n                }}\n                style={{ color: \"black\" }}\n                primary={f.name}\n                secondary={moment(f.modified_at).format(\"MMM DD, YYYY\")}\n              />\n              {/** folder menu button */}\n              <ListItemSecondaryAction>\n                <IconButton\n                  onClick={e => {\n                    handleClick(e);\n                    setSelectedFolder(f);\n                  }}\n                >\n                  <MoreHorizIcon />\n                </IconButton>\n              </ListItemSecondaryAction>\n\n              {/** end folder menu button */}\n            </ListItem>\n          ))}\n        {/*End Render Folders*/}\n      </List>\n\n      <Menu\n        id=\"simple-menu\"\n        anchorEl={anchorEl}\n        keepMounted\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n      >\n        <MenuItem\n          onClick={() => {\n            setShowRenameDialog(true);\n            handleClose();\n          }}\n        >\n          Rename\n        </MenuItem>\n        <MenuItem\n          onClick={async () => {\n            if (selectedFolder) {\n              await nas.deleteFolder(selectedFolder.id);\n              handleClose();\n              update();\n              setSelectedFolder(undefined);\n            }\n          }}\n        >\n          Delete\n        </MenuItem>\n        <MenuItem\n          onClick={() => {\n            handleClose();\n            setShowMoveToDialog(true);\n          }}\n        >\n          Move To\n        </MenuItem>\n      </Menu>\n\n      {selectedFolder && showRenameDialog && (\n        <RenameDialog\n          type=\"folder\"\n          selectedFile={selectedFolder}\n          open={showRenameDialog}\n          onClose={() => {\n            setSelectedFolder(undefined);\n            setShowRenameDialog(false);\n          }}\n        />\n      )}\n\n      {selectedFolder && showMoveToDialog && (\n        <MoveDialog\n          type=\"folder\"\n          selectedFile={selectedFolder}\n          open={showMoveToDialog}\n          onClose={() => {\n            setShowMoveToDialog(false);\n            setSelectedFolder(undefined);\n          }}\n        />\n      )}\n    </div>\n  );\n}\n","// @ts-nocheck\nimport React, { useState, useContext } from \"react\";\nimport {\n  Modal,\n  Segment,\n  Progress,\n  Grid,\n  Button,\n  Icon\n} from \"semantic-ui-react\";\nimport { HomePageContext } from \"../../../../models/HomeContext\";\n\ninterface Props {\n  open: boolean;\n  setOpen(open: boolean): void;\n  isDir: boolean;\n}\n\nexport interface UploadInfo {\n  currentName: string;\n  progress: number;\n  total: number;\n  currentIndex: number;\n  uploadedDataSize: number;\n  totalDataSize: number;\n}\n\nexport default function UploadDialog(props: Props) {\n  const {\n    nas,\n    update,\n    uploadInfo,\n    setUploadInfo,\n    uploadFiles,\n    updateUploadInfo\n  } = useContext(HomePageContext);\n\n  const onInputChange = e => {\n    let uploadFiles = e.target.files;\n    if (uploadFiles) {\n      let l: File[] = [];\n      for (var i = 0; i < uploadFiles.length; i++) {\n        l.push(uploadFiles[i]);\n      }\n\n      setUploadInfo(l);\n    }\n  };\n\n  return (\n    <Modal open={props.open}>\n      <Modal.Header>Select {props.isDir ? \"Folder\" : \"Files\"} </Modal.Header>\n      <Modal.Content>\n        <Grid.Row>\n          {props.isDir ? (\n            <input\n              type=\"file\"\n              multiple\n              webkitdirectory=\"\"\n              name=\"Upload file\"\n              onChange={onInputChange}\n            />\n          ) : (\n            <input\n              type=\"file\"\n              multiple\n              name=\"Upload file\"\n              onChange={onInputChange}\n            />\n          )}\n        </Grid.Row>\n        {uploadInfo && (\n          <Grid.Row style={{ marginTop: 20 }}>\n            <Segment>\n              <Progress\n                percent={uploadInfo.progress}\n                attached=\"top\"\n                color=\"green\"\n                active\n              />\n              {uploadInfo.currentName} {uploadInfo.currentIndex}/\n              {uploadInfo.total} --- {uploadInfo.progress} %\n              <Progress\n                percent={(uploadInfo.currentIndex / uploadInfo.total) * 100}\n                attached=\"bottom\"\n                color=\"blue\"\n                active\n              />\n            </Segment>\n          </Grid.Row>\n        )}\n      </Modal.Content>\n      <Modal.Actions>\n        <Button basic color=\"red\" onClick={() => props.setOpen(false)}>\n          <Icon name=\"remove\" /> {uploadInfo ? \"Minimize\" : \"Close\"}\n        </Button>\n        <Button\n          disabled={uploadFiles === undefined}\n          color=\"green\"\n          loading={uploadInfo !== undefined}\n          inverted\n          onClick={async () => {\n            if (uploadFiles) {\n              await nas.uploadFile(\n                uploadFiles,\n                props.isDir,\n                (\n                  index: number,\n                  progress: number,\n                  current: number,\n                  total: number\n                ) => {\n                  updateUploadInfo({\n                    total: uploadFiles.length,\n                    currentIndex: index,\n                    currentName: uploadFiles[index]\n                      ? uploadFiles[index].name\n                      : \"Finished\",\n                    progress: progress,\n                    uploadedDataSize: current,\n                    totalDataSize: total\n                  });\n                }\n              );\n              update();\n              setTimeout(() => {\n                props.setOpen(false);\n                setUploadInfo(undefined);\n                updateUploadInfo(undefined);\n              }, 300);\n            }\n          }}\n        >\n          <Icon name=\"checkmark\" /> Upload\n        </Button>\n      </Modal.Actions>\n    </Modal>\n  );\n}\n","import { FieldIcon } from \"./Icon\";\nimport { FieldAction } from \"./Action\";\nimport { string } from \"prop-types\";\n\n\ninterface Extra {\n    default?: any;\n    help?: string;\n    related_model?: string;\n    choices?: Choice[]\n\n}\n\nexport enum Widget {\n    text = \"text\",\n    number = \"number\",\n    datetime = \"datetime\",\n    foreignkey = \"foreignkey\",\n    unknown = \"unknown\",\n    select = \"select\",\n    tomanyTable = \"tomany-table\"\n}\n\ninterface Validation {\n    length: Length\n\n}\n\nexport interface Choice {\n    label: string;\n    value: any;\n}\n\ninterface Length {\n    maximum?: number;\n    minimum?: number;\n}\n\nexport interface Schema {\n    label: string;\n    readonly: boolean;\n    /// Could be null\n    extra?: Extra;\n    /// Map's key\n    name: string;\n    /// If widget type is not defined in the enum, then\n    /// return widgetType.unknown\n    widget: Widget | string;\n    required: boolean;\n    /// could be null\n    validations?: Validation;\n    /// this is value will be displayed at screen if set,\n    /// else null\n    value?: any;\n    /// Set this value only if the field includes selection\n    choice?: Choice;\n    /// icon for the field\n    /// this will be set through the params of JSONForm widget\n    icon?: FieldIcon;\n    /// action for the field\n    /// this will be set through the params of JSONForm widget\n    action?: FieldAction;\n\n}\n\n\n\nexport class SchemaList {\n\n    schemaList: Schema[];\n\n    constructor(schemas: Schema[]) {\n        schemas.forEach(s => {\n            if (s.extra && s.extra.default) {\n                s.value = s.extra.default\n            }\n        })\n        this.schemaList = schemas;\n    }\n\n    merge(values: { [key: string]: any }) {\n        this.schemaList = this.schemaList.map((s) => {\n            if (values[s.name]) {\n                let value = values[s.name];\n                if (s.widget == Widget.select) {\n                    let choice: Choice | undefined = s.extra\n                        && s.extra.choices\n                        && s.extra.choices.find((c) => c.value === value)\n                    s.choice = choice;\n                } else if (s.widget == Widget.foreignkey) {\n                    let choice: Choice = value;\n                    s.choice = choice;\n                    s.value = value.value;\n                } else {\n                    s.value = value;\n                }\n            }\n            return s;\n        });\n    }\n\n    onSubmit(): { [key: string]: any } {\n        console.log(this.schemaList)\n        let maps: { [key: string]: any } = {};\n        this.schemaList.filter(s => !s.readonly && s.widget !== Widget.tomanyTable).forEach((s) => maps[s.name] = s.value);\n        console.log(maps)\n        return maps;\n\n    }\n\n}\n","import React, { useState, useContext } from \"react\";\nimport {\n  Modal,\n  Segment,\n  Progress,\n  Grid,\n  Button,\n  Icon\n} from \"semantic-ui-react\";\nimport { HomePageContext } from \"../../../../models/HomeContext\";\nimport { SchemaList, Schema, Widget } from \"../../JSONSchema/model/Schema\";\nimport { DialogContent } from \"@material-ui/core\";\nimport {\n  TextField,\n  Dialog,\n  DialogActions,\n  DialogTitle\n} from \"@material-ui/core\";\n\ninterface Props {\n  open: boolean;\n  setOpen(open: boolean): void;\n}\n\ninterface UploadInfo {\n  currentName: string;\n  progress: number;\n  total: number;\n  currentIndex: number;\n}\n\nconst schema: Schema[] = [\n  {\n    name: \"name\",\n    label: \"Folder Name\",\n    readonly: false,\n    required: true,\n    widget: Widget.text\n  }\n];\n\nexport default function NewFolderDialog(props: Props) {\n  const { nas, update } = useContext(HomePageContext);\n  const [folderName, setFolderName] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  return (\n    <Dialog open={props.open} fullWidth>\n      <DialogTitle>New Folder</DialogTitle>\n      <DialogContent>\n        <TextField\n          onChange={e => {\n            setFolderName(e.target.value);\n          }}\n          value={folderName}\n          color=\"secondary\"\n          fullWidth\n          label=\"Folder Name\"\n          required\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button basic color=\"red\" onClick={() => props.setOpen(false)}>\n          <Icon name=\"remove\" /> No\n        </Button>\n        <Button\n          basic\n          color=\"green\"\n          onClick={async () => {\n            setIsLoading(true);\n            await nas.createNewFolder(folderName);\n            update();\n            setIsLoading(false);\n            props.setOpen(false);\n          }}\n          loading={isLoading}\n        >\n          <Icon name=\"add\" /> Create\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n","import React, { useState, useContext } from \"react\";\nimport EditorJs from \"react-editor-js\";\nimport { Modal, Button } from \"semantic-ui-react\";\nimport { TextField } from \"@material-ui/core\";\nimport { Document as NasDocument } from \"../../../../models/Folder\";\nimport { HomePageContext } from \"../../../../models/HomeContext\";\nimport EditorJS from \"@editorjs/editorjs\";\nimport \"react-quill/dist/quill.snow.css\";\nimport ReactQuill, { Quill } from \"react-quill\";\n\ninterface Props {\n  open: boolean;\n  setOpen(open: boolean): void;\n  document?: NasDocument;\n}\n\nexport default function Editor(props: Props) {\n  const [editor, setEditor] = useState<ReactQuill | undefined>();\n  const [name, setName] = useState<string | undefined>();\n  const [isChanged, setIsChanged] = useState(false);\n  const [isLoading, setIsloading] = useState(false);\n  const { document } = props;\n  const { nas, update } = useContext(HomePageContext);\n\n  if (name === undefined) {\n    setName(document ? document.name : \"\");\n  }\n\n  return (\n    <Modal open={props.open} centered={false}>\n      <Modal.Header>\n        <TextField\n          value={name}\n          label=\"You Document Title\"\n          onChange={e => {\n            setName(e.target.value);\n          }}\n          fullWidth\n        />\n      </Modal.Header>\n      <Modal.Content>\n        <ReactQuill\n          ref={instance => setEditor(instance != null ? instance : undefined)}\n          defaultValue={document && document.content}\n        />\n      </Modal.Content>\n      <Modal.Actions>\n        <Button\n          onClick={() => {\n            if (isChanged) {\n              let confirm = window.confirm(\n                \"Are you sure you want to exit? You will lose unsave data.\"\n              );\n              if (confirm) {\n                props.setOpen(false);\n              }\n            } else {\n              props.setOpen(false);\n            }\n          }}\n        >\n          close\n        </Button>\n        <Button\n          loading={isLoading}\n          color=\"blue\"\n          onClick={async () => {\n            try {\n              setIsloading(true);\n              if (editor && name) {\n                let data = editor.getEditor().getContents();\n                if (document) {\n                  // update current document\n                  await nas.updateDocument(document.id, name, data);\n                } else {\n                  if (name !== \"\") {\n                    await nas.createNewDocument(name, data);\n                  } else {\n                    throw \"Name should not be empty\";\n                  }\n                }\n                update();\n                setName(undefined);\n                props.setOpen(false);\n                setIsloading(false);\n              }\n            } catch (err) {\n              alert(err.toString());\n              setIsloading(false);\n            }\n          }}\n        >\n          Save\n        </Button>\n      </Modal.Actions>\n    </Modal>\n  );\n}\n","import React, { useContext, useState } from \"react\";\nimport {\n  Button,\n  Icon,\n  Grid,\n  Breadcrumb,\n  Segment,\n  Card,\n  MenuItem as MMenuItem\n} from \"semantic-ui-react\";\nimport { Link, NavLink } from \"react-router-dom\";\nimport { HomePageContext } from \"../../../../models/HomeContext\";\nimport UploadDialog from \"../files/UploadDialog\";\nimport NewFolderDialog from \"../folders/NewFolderDialog\";\nimport Editor from \"../documents/Editor\";\nimport { ContextMenu, MenuItem } from \"react-contextmenu\";\n\nimport { Menu } from \"semantic-ui-react\";\n\nexport default function NasMenus() {\n  const { nas } = useContext(HomePageContext);\n\n  const [openFilesUpload, setOpenFilesUpload] = useState(false);\n  const [openFolderUpload, setOpenFolderUpload] = useState(false);\n  const [openNewFolder, setOpenNewFolder] = useState(false);\n  const [openEditor, setOpenEditor] = useState(false);\n\n  return (\n    <div>\n      <ContextMenu id=\"folder\">\n        <Menu id=\"folder\" vertical>\n          <MenuItem\n            onClick={() => {\n              setOpenNewFolder(true);\n            }}\n          >\n            <MMenuItem>New Folder</MMenuItem>\n          </MenuItem>\n        </Menu>\n      </ContextMenu>\n      <ContextMenu id=\"files\">\n        <Menu vertical>\n          <MMenuItem onClick={() => setOpenEditor(true)}>\n            New Document\n          </MMenuItem>\n          <MMenuItem\n            onClick={() => {\n              setOpenFilesUpload(true);\n            }}\n          >\n            Upload Files\n          </MMenuItem>\n          <MMenuItem\n            onClick={() => {\n              setOpenFolderUpload(true);\n            }}\n          >\n            Upload Folder\n          </MMenuItem>\n        </Menu>\n      </ContextMenu>\n      <UploadDialog\n        isDir={false}\n        open={openFilesUpload}\n        setOpen={setOpenFilesUpload}\n      />\n      <UploadDialog\n        isDir={true}\n        open={openFolderUpload}\n        setOpen={setOpenFolderUpload}\n      />\n      <NewFolderDialog\n        open={openNewFolder}\n        setOpen={setOpenNewFolder}\n      ></NewFolderDialog>\n      <Editor open={openEditor} setOpen={setOpenEditor}></Editor>\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\nimport { Nas } from \"./nas\";\nimport { RouteComponentProps } from \"react-router\";\nimport { SystemInfo } from \"./Folder\";\nimport Axios from \"axios\";\nimport { systemURL } from \"./urls\";\n\ninterface SystemContext {\n  systemInfo?: SystemInfo;\n}\n\ninterface SystemProps {}\n\nexport class SystemProvider extends Component<SystemProps, SystemContext> {\n  constructor(props: SystemProps) {\n    super(props);\n    this.state = {};\n  }\n\n  async componentDidMount() {\n    let info = await this.fetchSystemInfo();\n    if (info) {\n      this.setState({ systemInfo: info });\n    }\n    // setInterval(async () => {\n    //   let info = await this.fetchSystemInfo();\n    //   console.log(\"Update system info\");\n    //   if (info) {\n    //     this.setState({ systemInfo: info });\n    //   }\n    // }, 20000);\n  }\n\n  fetchSystemInfo = async (): Promise<SystemInfo> => {\n    let info = await Axios.get<SystemInfo>(systemURL);\n    return Promise.resolve(info.data);\n  };\n\n  render() {\n    return (\n      <SystemContext.Provider value={this.state}>\n        {this.props.children}\n      </SystemContext.Provider>\n    );\n  }\n}\n\nconst context: SystemContext = {};\n\nexport const SystemContext = React.createContext(context);\n","export function formatBytes(bytes: number, decimals = 2) {\n    if (bytes === 0) return '0 Bytes';\n\n    const k = 1024;\n    const dm = decimals < 0 ? 0 : decimals;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}","import React, { useContext } from \"react\";\nimport { Progress, Message } from \"semantic-ui-react\";\nimport { SystemContext } from \"../../../../models/SystemContext\";\nimport { formatBytes } from \"../files/utils\";\n\nexport default function ComputerStatus() {\n  const { systemInfo } = useContext(SystemContext);\n  if (systemInfo === undefined) {\n    return (\n      <Message>\n        <p>No Info Avaliable currently</p>\n      </Message>\n    );\n  }\n  return (\n    <div>\n      <span>\n        Used Sapce: {formatBytes(systemInfo.disk.used)}/\n        {formatBytes(systemInfo.disk.total)}\n      </span>\n      <Progress\n        percent={((systemInfo.disk.used / systemInfo.disk.total) * 100).toFixed(\n          2\n        )}\n        size=\"tiny\"\n        color=\"green\"\n      />\n    </div>\n  );\n}\n","import React, { useContext, useState } from \"react\";\nimport { HomePageContext } from \"../../../../models/HomeContext\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport { Grid, Card, Header, Icon } from \"semantic-ui-react\";\nimport { IconButton } from \"@material-ui/core\";\n\nexport default function FilesActions() {\n  const { nas, update, selectedDocument, selectDocument } = useContext(\n    HomePageContext\n  );\n  const [isLoading, setIsLoading] = useState(false);\n  const [shadow, setShadow] = useState<number>();\n\n  return (\n    <div style={{ width: \"100%\", margin: \"20px\" }}>\n      <Grid>\n        <Grid.Row>\n          {/*Render documents*/}\n          {nas.currentFolder &&\n            nas.currentFolder.documents.map((f, i) => (\n              <Grid.Column computer={4} mobile={8} style={{ padding: 10 }}>\n                <div\n                  onMouseOver={() => setShadow(i)}\n                  onMouseOut={() => setShadow(undefined)}\n                  style={{ cursor: \"grab\" }}\n                >\n                  <Card\n                    style={{ height: 130 }}\n                    raised={shadow === i ? true : false}\n                  >\n                    <Card.Content>\n                      <Header icon style={{ padding: 10 }} size=\"small\">\n                        <Icon\n                          onClick={async () => {\n                            let document = await nas.getDocument(f.id);\n                            selectDocument(document);\n                          }}\n                          name=\"file pdf\"\n                          color=\"red\"\n                        />\n                        {f.name}\n                        <IconButton\n                          onClick={async () => {\n                            await nas.deleteDocument(f.id);\n                          }}\n                        >\n                          <DeleteIcon />\n                        </IconButton>\n                      </Header>\n                    </Card.Content>\n                  </Card>\n                </div>\n              </Grid.Column>\n            ))}\n          {/*End Render documents*/}\n        </Grid.Row>\n\n        <Grid.Row>\n          <h3>Files</h3>\n        </Grid.Row>\n      </Grid>\n    </div>\n  );\n}\n","import React, { useContext, useState } from \"react\";\nimport {\n  Segment,\n  MessageHeader,\n  Message,\n  Icon,\n  Modal,\n  Image,\n  SemanticICONS,\n  Dropdown,\n  CardContent\n} from \"semantic-ui-react\";\nimport {\n  TableContainer,\n  TableHead,\n  Table,\n  TableCell,\n  TableRow,\n  Menu,\n  MenuItem,\n  TableBody,\n  IconButton,\n  Popper,\n  Paper,\n  CardMedia,\n  Card,\n  CardActionArea\n} from \"@material-ui/core\";\nimport { HomePageContext } from \"../../../../models/HomeContext\";\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\nimport moment from \"moment\";\nimport path from \"path\";\nimport \"video-react/dist/video-react.css\";\nimport {\n  Folder,\n  Document as NasDocument,\n  File as NasFile\n} from \"../../../../models/Folder\";\nimport Editor from \"../documents/Editor\";\nimport { downloadURL } from \"../../../../models/urls\";\nimport { Grid } from \"semantic-ui-react\";\nimport FilesActions from \"./FilesActions\";\nimport MoveDialog from \"./MoveDialog\";\nimport RenameDialog from \"./RenameDialog\";\nimport { formatBytes } from \"./utils\";\n\nconst { Player } = require(\"video-react\");\n\nconst imageExt = [\".jpg\", \".png\", \".bmp\", \".JPG\", \".gif\", \".jpeg\", \".JPEG\"];\nconst videoExt = [\".mov\", \".mp4\", \".avi\", \".m4v\", \".MOV\", \".MP4\"];\n\nexport default function ListFilesPanel() {\n  const {\n    nas,\n    isLoading,\n    update,\n    selectedDocument,\n    selectDocument\n  } = useContext(HomePageContext);\n  const [previewAnchor, setPreviewAnchor] = React.useState<null | HTMLElement>(\n    null\n  );\n  const [onHoverFile, setOnHoverFile] = useState<NasFile>();\n  const [selectedFile, setselectedFile] = useState<NasFile>();\n  const [showRenameDialog, setShowRenameDialog] = useState(false);\n  const [showMoveToDialog, setShowMoveToDialog] = useState(false);\n  const [imageSrc, setImageSrc] = useState<string | undefined>(undefined);\n  const [videoSrc, setVideoSrc] = useState<\n    { src: string; cover: string } | undefined\n  >(undefined);\n\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleClosePreview = () => {\n    setPreviewAnchor(null);\n  };\n\n  function isImage(filepath: string): boolean {\n    return imageExt.includes(path.extname(filepath));\n  }\n\n  function isVideo(filepath: string): boolean {\n    return videoExt.includes(path.extname(filepath));\n  }\n\n  function getIcon(filepath: string): SemanticICONS {\n    if (isImage(filepath)) {\n      return \"images\";\n    } else if (isVideo(filepath)) {\n      return \"file video\";\n    }\n\n    return \"file\";\n  }\n\n  return (\n    <div id=\"file-list\">\n      <Grid>\n        <FilesActions />\n        <Grid.Row style={{ overflow: \"auto\", overflowX: \"hidden\" }}>\n          {/** Render files */}\n          {nas.currentFolder && nas.currentFolder.files.length > 0 && (\n            <TableContainer>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Name</TableCell>\n                    <TableCell>Last Modify</TableCell>\n                    <TableCell>Size</TableCell>\n                    <TableCell>Actions</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {nas.currentFolder.files.map((f, i) => (\n                    <TableRow hover>\n                      <TableCell\n                        style={{ cursor: \"grab\" }}\n                        onMouseOver={e => {\n                          setPreviewAnchor(e.currentTarget);\n                          setOnHoverFile(f);\n                        }}\n                        onMouseLeave={() => {\n                          handleClosePreview();\n                          setOnHoverFile(undefined);\n                        }}\n                        onClick={() => {\n                          if (isImage(f.file)) {\n                            setImageSrc(f.file);\n                          } else if (isVideo(f.file)) {\n                            setVideoSrc({\n                              src: f.transcode_filepath ?? f.file,\n                              cover: f.cover\n                            });\n                          }\n                        }}\n                      >\n                        <Icon\n                          name={getIcon(f.file)}\n                          size=\"large\"\n                          color=\"teal\"\n                        />\n                        {path.basename(f.filename)}\n                      </TableCell>\n                      <TableCell>\n                        {moment(f.modified_at).format(\"MMM DD, YYYY\")}\n                      </TableCell>\n                      <TableCell>{formatBytes(f.size)}</TableCell>\n                      <TableCell>\n                        <IconButton\n                          onClick={e => {\n                            setselectedFile(f);\n                            handleClick(e);\n                          }}\n                        >\n                          <MoreHorizIcon></MoreHorizIcon>\n                        </IconButton>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </TableContainer>\n          )}\n          {/** End Render files */}\n        </Grid.Row>\n        {/** File Action Menu */}\n        <Menu\n          id=\"simple-menu\"\n          anchorEl={anchorEl}\n          keepMounted\n          open={Boolean(anchorEl)}\n          onClose={handleClose}\n        >\n          <MenuItem\n            onClick={() => {\n              /// Download from link\n              if (selectedFile) {\n                const link = document.createElement(\"a\");\n                link.href = `${selectedFile.file}`;\n                document.body.appendChild(link);\n                link.click();\n                document.body.removeChild(link);\n              }\n              handleClose();\n            }}\n          >\n            Download\n          </MenuItem>\n          <MenuItem\n            onClick={async () => {\n              if (selectedFile) {\n                handleClose();\n                setShowRenameDialog(true);\n              }\n            }}\n          >\n            Rename\n          </MenuItem>\n          <MenuItem\n            onClick={async () => {\n              if (selectedFile) {\n                await nas.deleteFile(selectedFile.id);\n                handleClose();\n                update();\n              }\n            }}\n          >\n            Delete\n          </MenuItem>\n          <MenuItem\n            onClick={async () => {\n              if (selectedFile) {\n                handleClose();\n                setShowMoveToDialog(true);\n              }\n            }}\n          >\n            Move To\n          </MenuItem>\n        </Menu>\n        {/** end file action menu */}\n        {selectedDocument && (\n          <Editor\n            open={selectedDocument !== undefined}\n            setOpen={v => {\n              !v && selectDocument(undefined);\n            }}\n            document={selectedDocument}\n          ></Editor>\n        )}\n        <Modal\n          open={imageSrc !== undefined}\n          onClose={() => setImageSrc(undefined)}\n        >\n          <Image src={imageSrc} fluid></Image>\n        </Modal>\n        <Modal\n          open={videoSrc !== undefined}\n          onClose={() => setVideoSrc(undefined)}\n        >\n          <Player poster={videoSrc && videoSrc.cover}>\n            <source src={videoSrc && videoSrc.src} />\n          </Player>\n        </Modal>\n        {selectedFile && (\n          <MoveDialog\n            type=\"file\"\n            open={showMoveToDialog}\n            selectedFile={selectedFile}\n            onClose={() => {\n              setShowMoveToDialog(false);\n            }}\n          />\n        )}\n        {selectedFile && (\n          <RenameDialog\n            type=\"file\"\n            open={showRenameDialog}\n            selectedFile={selectedFile}\n            onClose={() => {\n              setShowRenameDialog(false);\n              setselectedFile(undefined);\n            }}\n          />\n        )}\n      </Grid>\n      {/** Preview */}\n      <Popper open={Boolean(previewAnchor)} anchorEl={previewAnchor}>\n        {onHoverFile && (\n          <Card style={{ padding: 10 }}>\n            {isImage(onHoverFile.filename) && (\n              <CardMedia\n                style={{ height: 140, width: 140 }}\n                image={onHoverFile.file}\n              />\n            )}\n            {isVideo(onHoverFile.filename) &&\n              (onHoverFile.cover ? (\n                <CardActionArea>\n                  <CardMedia\n                    style={{ height: 140, width: 140 }}\n                    image={onHoverFile.cover}\n                  />\n                  <CardContent> {formatBytes(onHoverFile.size)}</CardContent>\n                </CardActionArea>\n              ) : (\n                <div>\n                  {onHoverFile.filename} - {formatBytes(onHoverFile.size)}\n                </div>\n              ))}\n          </Card>\n        )}\n      </Popper>\n      {/** end preview */}\n    </div>\n  );\n}\n","import React, { useContext } from \"react\";\nimport { HomePageContext } from \"../../../../models/HomeContext\";\nimport Rating from \"@material-ui/lab/Rating\";\nimport List from \"@material-ui/core/List\";\nimport { Icon, Grid, Item } from \"semantic-ui-react\";\nimport {\n  ListItem,\n  ListItemText,\n  LinearProgress,\n  Box,\n  Typography\n} from \"@material-ui/core\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport { SystemContext } from \"../../../../models/SystemContext\";\n\nexport default function UploadFilesSideBar() {\n  const { uploadFiles, uploadInfo } = useContext(HomePageContext);\n  const { systemInfo } = useContext(SystemContext);\n\n  return (\n    <List>\n      {systemInfo && (\n        <Grid style={{ height: \"100%\", marginTop: 10 }}>\n          <Grid.Row style={{ height: 40 }}>\n            <Grid.Column width={8}>\n              <div>CPU</div>\n              <LinearProgress\n                color=\"secondary\"\n                variant=\"determinate\"\n                value={systemInfo.cpu}\n              />\n            </Grid.Column>\n            <Grid.Column width={8}>\n              <div>Memory</div>\n              <LinearProgress\n                title=\"Memory\"\n                color=\"secondary\"\n                variant=\"determinate\"\n                value={(systemInfo.memory.used / systemInfo.memory.total) * 100}\n              />\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      )}\n\n      {uploadFiles ? (\n        uploadFiles.map((f, i) => (\n          <ListItem>\n            <ListItemIcon>\n              <Icon name=\"file\" />\n            </ListItemIcon>\n            <ListItemText\n              primary={f.name}\n              secondary={\n                <LinearProgress\n                  color=\"secondary\"\n                  variant={\n                    uploadInfo && uploadInfo.currentIndex === i\n                      ? \"determinate\"\n                      : \"indeterminate\"\n                  }\n                  value={\n                    uploadInfo && uploadInfo.currentIndex === i\n                      ? uploadInfo.progress\n                      : undefined\n                  }\n                />\n              }\n            />\n          </ListItem>\n        ))\n      ) : (\n        <Grid style={{ height: \"100%\" }} centered verticalAlign=\"middle\">\n          <div style={{ marginTop: \"10px\", marginBottom: \"auto\" }}>\n            No Pending Uploads\n          </div>\n        </Grid>\n      )}\n    </List>\n  );\n}\n","import React, { useState, useContext } from \"react\";\nimport { createStyles, Theme, makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nimport ArrowBackIosIcon from \"@material-ui/icons/ArrowBackIos\";\nimport {\n  ListItemSecondaryAction,\n  IconButton,\n  Menu,\n  MenuItem,\n  TextField,\n  CircularProgress,\n  fade,\n  InputBase,\n  MenuList,\n  Popper,\n  Paper,\n  ClickAwayListener\n} from \"@material-ui/core\";\nimport { HomePageContext } from \"../../../../models/HomeContext\";\nimport moment from \"moment\";\nimport path from \"path\";\nimport {\n  Folder,\n  Document as NasDocument,\n  File as NasFile\n} from \"../../../../models/Folder\";\nimport SearchIcon from \"@material-ui/icons/Search\";\n\nimport { NavLink } from \"react-router-dom\";\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\nimport MoveDialog from \"../files/MoveDialog\";\nimport RenameDialog from \"../files/RenameDialog\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    popper: {\n      marginTop: 10,\n      marginRight: 15,\n      width: \"40ch\",\n      maxHeight: 400,\n      overflow: \"auto\"\n    },\n    search: {\n      position: \"relative\",\n      borderRadius: theme.shape.borderRadius,\n      backgroundColor: fade(theme.palette.common.white, 0.15),\n      \"&:hover\": {\n        backgroundColor: fade(theme.palette.common.white, 0.25)\n      },\n      marginLeft: 0,\n      width: \"100%\",\n      [theme.breakpoints.up(\"sm\")]: {\n        marginLeft: theme.spacing(1),\n        width: \"auto\"\n      }\n    },\n    searchIcon: {\n      padding: theme.spacing(0, 2),\n      height: \"100%\",\n      position: \"absolute\",\n      pointerEvents: \"none\",\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\"\n    },\n    inputRoot: {\n      color: \"inherit\"\n    },\n    inputInput: {\n      padding: theme.spacing(1, 1, 1, 0),\n      // vertical padding + font size from searchIcon\n      paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n      transition: theme.transitions.create(\"width\"),\n      width: \"100%\",\n      [theme.breakpoints.up(\"sm\")]: {\n        width: \"12ch\",\n        \"&:focus\": {\n          width: \"20ch\"\n        }\n      }\n    }\n  })\n);\n\nexport default function SearchField() {\n  const classes = useStyles();\n  const { nas, update } = useContext(HomePageContext);\n  const [isLoading, setIsLoading] = useState(false);\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n  const [value, setValue] = useState(\"\");\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <div className={classes.search}>\n      <div className={classes.searchIcon}>\n        {isLoading ? (\n          <CircularProgress size={20} color=\"inherit\" />\n        ) : (\n          <SearchIcon />\n        )}\n      </div>\n      <InputBase\n        placeholder=\"Search…\"\n        classes={{\n          root: classes.inputRoot,\n          input: classes.inputInput\n        }}\n        inputProps={{ \"aria-label\": \"search\" }}\n        onClick={e => setAnchorEl(e.currentTarget)}\n        onChange={async e => {\n          let keyword = e.target.value;\n          setValue(keyword);\n        }}\n        onKeyDown={async e => {\n          if (e.key === \"Enter\") {\n            setIsLoading(true);\n            await nas.search(value);\n            update();\n            setIsLoading(false);\n          }\n        }}\n      />\n\n      <Popper open={Boolean(anchorEl)} anchorEl={anchorEl}>\n        <ClickAwayListener onClickAway={handleClose}>\n          <Paper className={classes.popper}>\n            {nas.searchedFiles.length === 0 && (\n              <MenuItem>No File. Press Enter to search</MenuItem>\n            )}\n            {nas.searchedFiles.map(f => (\n              <MenuItem\n                key={f.id}\n                onClick={() => {\n                  window.location.href = `#/home/${f.parent}`;\n                  handleClose();\n                }}\n              >\n                {path.basename(f.filename)}\n              </MenuItem>\n            ))}\n          </Paper>\n        </ClickAwayListener>\n      </Popper>\n    </div>\n  );\n}\n","import React, { useContext, useState } from \"react\";\nimport Header from \"./components/others/Header\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport ListPanel from \"./components/folders/ListFolderPanel\";\nimport { Container, Segment, Progress, Grid, Menu } from \"semantic-ui-react\";\nimport NasMenus from \"./components/others/NasMenu\";\nimport ComputerStatus from \"./components/others/ComputerStatus\";\nimport ListFilesPanel from \"./components/files/ListFilesPanel\";\nimport { HomePageContext } from \"../../models/HomeContext\";\nimport { ContextMenu, ContextMenuTrigger } from \"react-contextmenu\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport UploadFilesSideBar from \"./components/files/UploadFilesSideBar\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport {\n  Hidden,\n  AppBar,\n  Toolbar,\n  IconButton,\n  Drawer,\n  makeStyles,\n  Theme,\n  createStyles,\n  fade,\n  Typography,\n  InputBase,\n  createMuiTheme,\n  ThemeProvider\n} from \"@material-ui/core\";\nimport blue from \"@material-ui/core/colors/blue\";\nimport SearchField from \"./components/files/SearchField\";\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"#fafafa\"\n    }\n  }\n});\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1\n    },\n    menuButton: {\n      marginRight: theme.spacing(2)\n    },\n    title: {\n      flexGrow: 1,\n      display: \"none\",\n      [theme.breakpoints.up(\"sm\")]: {\n        display: \"block\"\n      }\n    },\n    search: {\n      position: \"relative\",\n      borderRadius: theme.shape.borderRadius,\n      backgroundColor: fade(theme.palette.common.white, 0.15),\n      \"&:hover\": {\n        backgroundColor: fade(theme.palette.common.white, 0.25)\n      },\n      marginLeft: 0,\n      width: \"100%\",\n      [theme.breakpoints.up(\"sm\")]: {\n        marginLeft: theme.spacing(1),\n        width: \"auto\"\n      }\n    },\n    searchIcon: {\n      padding: theme.spacing(0, 2),\n      height: \"100%\",\n      position: \"absolute\",\n      pointerEvents: \"none\",\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\"\n    },\n    inputRoot: {\n      color: \"inherit\"\n    },\n    inputInput: {\n      padding: theme.spacing(1, 1, 1, 0),\n      // vertical padding + font size from searchIcon\n      paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n      transition: theme.transitions.create(\"width\"),\n      width: \"100%\",\n      [theme.breakpoints.up(\"sm\")]: {\n        width: \"12ch\",\n        \"&:focus\": {\n          width: \"20ch\"\n        }\n      }\n    }\n  })\n);\n\nexport function HomePage() {\n  const { nas, isLoading, update } = useContext(HomePageContext);\n  const [show, setShow] = useState(false);\n  const classes = useStyles();\n\n  return (\n    <ThemeProvider theme={theme}>\n      <div\n        id=\"home\"\n        style={{\n          height: \"100%\",\n          overflow: \"hidden\"\n        }}\n      >\n        {/** App Bar */}\n        <AppBar position=\"static\">\n          <Toolbar>\n            <Hidden mdUp>\n              <IconButton\n                className={classes.menuButton}\n                color=\"inherit\"\n                onClick={() => {\n                  setShow(true);\n                }}\n              >\n                <MenuIcon />\n              </IconButton>\n            </Hidden>\n            <Typography className={classes.title} variant=\"h6\" noWrap>\n              Django Nas\n            </Typography>\n            <SearchField />\n          </Toolbar>\n        </AppBar>\n        {/** End App Bar */}\n        {/** drawer */}\n        <Drawer open={show} onClose={() => setShow(false)}>\n          <div style={{ width: 300, height: \"100%\" }}>\n            <ListPanel />\n          </div>\n        </Drawer>\n        {/** end drawer */}\n        <Segment\n          loading={isLoading}\n          style={{\n            height: \"100%\",\n            margin: 0\n          }}\n        >\n          <Grid\n            style={{\n              height: \"100%\",\n              overflow: \"hidden\",\n              position: \"relative\"\n            }}\n          >\n            <Grid.Row\n              style={{ height: \"100%\", paddingTop: 0, paddingBottom: 0 }}\n            >\n              {/** left side */}\n              <Hidden smDown implementation=\"js\">\n                <Grid.Column\n                  computer={3}\n                  style={{ height: \"100%\", backgroundColor: \"#fcfcfc\" }}\n                >\n                  <ContextMenuTrigger id=\"folder\">\n                    <Grid.Row style={{ height: \"92%\" }}>\n                      <ListPanel />\n                    </Grid.Row>\n                    <Grid.Row>\n                      <ComputerStatus />\n                    </Grid.Row>\n                  </ContextMenuTrigger>\n                </Grid.Column>\n              </Hidden>\n              {/** end left */}\n              <Grid.Column\n                computer={10}\n                mobile={16}\n                tablet={16}\n                style={{ height: \"100%\" }}\n              >\n                <ContextMenuTrigger id=\"files\">\n                  <ListFilesPanel />\n                </ContextMenuTrigger>\n              </Grid.Column>\n              {/** right side */}\n              <Hidden smDown implementation=\"js\">\n                <Grid.Column\n                  computer={3}\n                  style={{\n                    height: \"100%\",\n                    backgroundColor: \"#fcfcfc\"\n                  }}\n                >\n                  <UploadFilesSideBar />\n                </Grid.Column>\n              </Hidden>\n              {/** end right side */}\n            </Grid.Row>\n          </Grid>\n        </Segment>\n        <NasMenus />\n      </div>\n    </ThemeProvider>\n  );\n}\n","import React from \"react\";\nimport {\n  PieChart,\n  Pie,\n  Legend,\n  Tooltip,\n  ResponsiveContainer,\n  Cell\n} from \"recharts\";\nimport { Segment } from \"semantic-ui-react\";\n\ninterface Props {\n  title: string;\n  used: number;\n  total: number;\n  color: string;\n  color2: string;\n}\nconst data02 = [\n  { name: \"Group A\", value: 400 },\n  { name: \"Group B\", value: 300 },\n  { name: \"Group C\", value: 300 },\n  { name: \"Group D\", value: 200 }\n];\nexport default function PercentageChart(props: Props) {\n  const { title, used, total, color, color2 } = props;\n  let data = [\n    {\n      name: \"Used\",\n      value: used\n    },\n    { name: \"Available\", value: total - used }\n  ];\n\n  return (\n    <Segment>\n      <ResponsiveContainer\n        minHeight={300}\n        height=\"100%\"\n        width=\"100%\"\n        minWidth={200}\n      >\n        <PieChart>\n          <Pie\n            data={data}\n            dataKey=\"value\"\n            label\n            fill={color}\n            isAnimationActive={false}\n          >\n            <Cell fill={color}></Cell>\n            <Cell fill={color2}></Cell>\n          </Pie>\n\n          <Tooltip></Tooltip>\n        </PieChart>\n      </ResponsiveContainer>\n      <span>{title}</span>\n    </Segment>\n  );\n}\n","import React, { useContext } from \"react\";\nimport { Container, Grid, Segment } from \"semantic-ui-react\";\nimport { SystemContext } from \"../../models/SystemContext\";\nimport PercentageChart from \"./PercentageChart\";\n\nexport default function SystemInfoPage() {\n  const { systemInfo } = useContext(SystemContext);\n  if (systemInfo === undefined) {\n    return <div>Infomation Not Available</div>;\n  }\n\n  return (\n    <div id=\"home\" style={{ width: \"100%\", color: \"black\" }}>\n      <Container>\n        <h1>System Info</h1>\n        <Grid columns={2}>\n          <Grid.Column>\n            <PercentageChart\n              used={Math.round(systemInfo.disk.used / 1024 / 1024)}\n              total={Math.round(systemInfo.disk.total / 1024 / 1024)}\n              title=\"Disk(MB)\"\n              color=\"#0088FE\"\n              color2=\"orange\"\n            />\n          </Grid.Column>\n          <Grid.Column>\n            <PercentageChart\n              used={Math.round(systemInfo.memory.used / 1024 / 1024)}\n              total={Math.round(systemInfo.memory.total / 1024 / 1024)}\n              title=\"Memory(MB)\"\n              color=\"#0088FE\"\n              color2=\"orange\"\n            />\n          </Grid.Column>\n          <Grid.Column>\n            <PercentageChart\n              used={systemInfo.cpu}\n              total={100}\n              title=\"CPU Usage(Percentage)\"\n              color=\"#0088FE\"\n              color2=\"orange\"\n            />\n          </Grid.Column>\n          <Grid.Column>\n            <Segment style={{ height: \"100%\" }}>\n              <h4>Temperature</h4>\n              <h1>\n                {systemInfo.temperature\n                  ? systemInfo.temperature.toFixed(1)\n                  : \"None\"}\n              </h1>\n            </Segment>\n          </Grid.Column>\n          <Grid.Column>\n            <Segment style={{ height: \"100%\" }}>\n              <h4>Humidity</h4>\n              <h1>\n                {systemInfo.humidity ? systemInfo.humidity.toFixed(1) : \"None\"}\n              </h1>\n            </Segment>\n          </Grid.Column>\n          <Grid.Column>\n            <Segment style={{ height: \"100%\" }}>\n              <h4>Pressure</h4>\n              <h1>\n                {systemInfo.pressure ? systemInfo.pressure.toFixed(2) : \"None\"}\n              </h1>\n            </Segment>\n          </Grid.Column>\n        </Grid>\n      </Container>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { I18nProvider } from \"@lingui/react\";\n\nReactDOM.render(\n  <I18nProvider catalogs={{}}>\n    <App />\n  </I18nProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { Component, useState } from \"react\";\nimport \"./App.css\";\nimport {\n  HashRouter as Router,\n  Route,\n  Link,\n  NavLink,\n  Redirect\n} from \"react-router-dom\";\nimport { HomePage } from \"./components/pages/home/HomePage\";\nimport { HomePageProvider } from \"./components/models/HomeContext\";\nimport { SystemProvider } from \"./components/models/SystemContext\";\nimport SystemInfoPage from \"./components/pages/systemInfo/SystemInfoPage\";\nimport { Sidebar, Menu, Icon, Button } from \"semantic-ui-react\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport { IconButton } from \"@material-ui/core\";\n\nexport default function App() {\n  const [visible, setVisible] = useState(false);\n  const [showMenu, setShowMenu] = useState(false);\n\n  return (\n    <SystemProvider>\n      <Router>\n        <div style={{ height: \"100%\" }}>\n          <Route exact path=\"/\" component={() => <Redirect to=\"/home\" />} />\n          <Route\n            exact\n            path=\"/home/:id?\"\n            component={(props: any) => {\n              setShowMenu(true);\n              return (\n                <HomePageProvider {...props}>\n                  <HomePage></HomePage>\n                </HomePageProvider>\n              );\n            }}\n          />\n\n          <Route\n            exact\n            path=\"/info\"\n            component={(props: any) => {\n              setShowMenu(true);\n              return <SystemInfoPage />;\n            }}\n          />\n        </div>\n      </Router>\n    </SystemProvider>\n  );\n}\n"],"sourceRoot":""}